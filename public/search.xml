<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python</title>
    <url>/2022/05/04/2022/Python/</url>
    <content><![CDATA[<h1 id="一、常见函数使用方法"><a href="#一、常见函数使用方法" class="headerlink" title="一、常见函数使用方法"></a>一、常见函数使用方法</h1><h2 id="1-enumerate"><a href="#1-enumerate" class="headerlink" title="1. enumerate"></a>1. enumerate</h2><p><code>enumerate(sequence, [start=0])</code></p>
<ul>
<li>sequence – 一个序列、迭代器或其他支持迭代对象。</li>
<li>start – 下标起始位置。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index, val <span class="keyword">in</span> <span class="built_in">enumerate</span>(a):</span><br><span class="line">    <span class="built_in">print</span>(index, val)</span><br><span class="line"><span class="comment"># 	0 A</span></span><br><span class="line"><span class="comment">#	1 B</span></span><br><span class="line"><span class="comment">#	2 C</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index, val <span class="keyword">in</span> <span class="built_in">enumerate</span>(a,<span class="number">20</span>):</span><br><span class="line">    <span class="built_in">print</span>(index, val)</span><br><span class="line"><span class="comment"># 	20 A</span></span><br><span class="line"><span class="comment">#	21 B</span></span><br><span class="line"><span class="comment">#	22 C</span></span><br></pre></td></tr></table></figure>

<h2 id="2-lambda"><a href="#2-lambda" class="headerlink" title="2. lambda"></a>2. lambda</h2><blockquote>
<p>lambda 函数是一种小的匿名函数。lambda 函数可接受任意数量的参数，但只能有一个表达式。</p>
</blockquote>
<p>一个 lambda 函数，它把作为参数传入的数字加 10，然后打印结果：【不推荐这样使用，不如def函数的结构清晰，不足以体现lambda函数的强大之处】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="keyword">lambda</span> a : a + <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(x(<span class="number">5</span>))  <span class="comment">##15</span></span><br></pre></td></tr></table></figure>

<h3 id="为何使用-Lambda-函数？"><a href="#为何使用-Lambda-函数？" class="headerlink" title="为何使用 Lambda 函数？"></a>为何使用 Lambda 函数？</h3><p>当您把 lambda 用作另一个函数内的匿名函数时，会更好地展现 lambda 的强大能力。</p>
<p>在同一程序中使用相同的函数定义来生成两个函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfunc</span>(<span class="params">n</span>):</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">lambda</span> a : a * n</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义返回自乘2倍的函数</span></span><br><span class="line">mydoubler = myfunc(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义返回自乘3倍的函数</span></span><br><span class="line">mytreble = myfunc(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mydoubler(<span class="number">11</span>)) </span><br><span class="line"><span class="built_in">print</span>(mytreble(<span class="number">11</span>))</span><br></pre></td></tr></table></figure>



<h1 id="二、查缺补漏"><a href="#二、查缺补漏" class="headerlink" title="二、查缺补漏"></a>二、查缺补漏</h1><h2 id="1-闭包closure"><a href="#1-闭包closure" class="headerlink" title="1. 闭包closure"></a>1. 闭包closure</h2><p>闭包实际上是一个函数，其最显著的特征是传入一个函数，返回的也是一个函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_odds</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1024</span>):</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 闭包函数【参数为函数，返回值也是函数】</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_time</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">improve</span>():</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        func()</span><br><span class="line">        end = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;共耗时：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(end - start))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> improve</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 传入一个函数同时将该函数进行加工并返回出去供调用</span></span><br><span class="line">    count_time(print_odds)()</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="2-装饰器"><a href="#2-装饰器" class="headerlink" title="2. 装饰器"></a>2. 装饰器</h2><ul>
<li>装饰器使用<code>@</code>进行声明</li>
<li><code>@</code>符号跟着的装饰器必须为一个闭包函数</li>
<li>使用装饰器后紧跟着定义被装饰函数</li>
<li>装饰器在第一次调用被装饰函数时进行增强</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 闭包函数【参数为函数，返回值也是函数】</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_time</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">improve</span>():</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        func()</span><br><span class="line">        end = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;共耗时：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(end - start))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> improve</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@count_time</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_odds</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1024</span>):</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print_odds()</span><br></pre></td></tr></table></figure>

<p>有返回值和参数情况</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 闭包函数【参数为函数，返回值也是函数】</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_time</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="comment"># 这里考虑参数问题</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">improve</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        <span class="comment"># 将参数获取过来，同时保存返回值</span></span><br><span class="line">        res = func(*args, **kwargs)</span><br><span class="line">        end = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;共耗时：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(end - start))</span><br><span class="line">        <span class="comment"># 使得能成功返回</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> improve</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_odds</span>(<span class="params">lim=<span class="number">100</span></span>):</span></span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(lim):</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> cnt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于含有返回值的函数，调用闭包增强后，不能成功返回，但是成功增强了辅助功能</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;增强前&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(count_odds(lim=<span class="number">3003</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;*&#x27;</span> * <span class="number">20</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;增强后&#x27;</span>)</span><br><span class="line">    <span class="comment"># 这里进行传函数的时候不需要进行传参，只需在调用时才需要传参</span></span><br><span class="line">    after = count_time(count_odds)</span><br><span class="line">    <span class="comment"># 这里真正调用时进行传参</span></span><br><span class="line">    <span class="built_in">print</span>(after(lim=<span class="number">393</span>))</span><br></pre></td></tr></table></figure>



<h2 id="3-函数参数省略"><a href="#3-函数参数省略" class="headerlink" title="3. 函数参数省略"></a>3. 函数参数省略</h2><ul>
<li>arg</li>
</ul>
<p>普通参数</p>
<ul>
<li>*args</li>
</ul>
<p>*args 用来将参数打包成tuple(元组)给函数体调用</p>
<ul>
<li>**kwargs</li>
</ul>
<p>kwargs 用来将参数打包成dict(字典)给函数体调用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将参数以元组的形式进行存储</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">arg_</span>(<span class="params">*args</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(args, <span class="built_in">type</span>(args))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将参数以字典的形式进行存储</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">arg__</span>(<span class="params">**kwargs</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(kwargs, <span class="built_in">type</span>(kwargs))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果有特殊的组合，其先后顺序一定是按照此顺序进行的</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">arg___</span>(<span class="params">arg, *args, **kwargs</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(arg, <span class="built_in">type</span>(arg), args, <span class="built_in">type</span>(args), kwargs, <span class="built_in">type</span>(kwargs))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    arg_(<span class="number">2</span>, <span class="number">23</span>, <span class="number">4</span>)</span><br><span class="line">    arg__(a=<span class="number">3</span>, b=<span class="string">&#x27;jj&#x27;</span>, c=<span class="number">8</span>)</span><br><span class="line">    arg___(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, a=<span class="string">&#x27;hello&#x27;</span>, b=<span class="number">9</span>)</span><br></pre></td></tr></table></figure>



<h1 id="三、编辑器设置"><a href="#三、编辑器设置" class="headerlink" title="三、编辑器设置"></a>三、编辑器设置</h1><h2 id="1-设定代码模板"><a href="#1-设定代码模板" class="headerlink" title="1. 设定代码模板"></a>1. 设定代码模板</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">@File  : $&#123;NAME&#125;.py</span></span><br><span class="line"><span class="string">@Author: crazyzsh</span></span><br><span class="line"><span class="string">@Date  : $&#123;DATE&#125; $&#123;TIME&#125;</span></span><br><span class="line"><span class="string">@Desc  : </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202202121046214.png" alt="image-20220212104630176"></p>
<h1 id="四、常见问题解决"><a href="#四、常见问题解决" class="headerlink" title="四、常见问题解决"></a>四、常见问题解决</h1><h2 id="1-无法安装第三方包"><a href="#1-无法安装第三方包" class="headerlink" title="1. 无法安装第三方包"></a>1. 无法安装第三方包</h2><p>采取豆瓣镜像：具体安装为：<code>pip install 包名 -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com</code></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo</title>
    <url>/2021/12/31/2021/hexo/</url>
    <content><![CDATA[<h1 id="一、全流程"><a href="#一、全流程" class="headerlink" title="一、全流程"></a>一、全流程</h1><h2 id="1-hexo的安装"><a href="#1-hexo的安装" class="headerlink" title="1. hexo的安装"></a>1. hexo的安装</h2><p>1、首先全局安装一下hexo，使用命令【类似于Vue脚手架】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i hexo-cli -g</span><br></pre></td></tr></table></figure>

<p>2、创建项目【自动生成一个文件夹，如果省略项目名称的话就会默认在使用命令的根目录下进行创建项目】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init [folderName]</span><br></pre></td></tr></table></figure>

<p>3、进入项目目录下，使用命令安装相应的依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i</span><br></pre></td></tr></table></figure>

<p>4、生成静态文件【在项目目录中生成public文件】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<p>5、启动服务器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<h2 id="2-部署前的准备"><a href="#2-部署前的准备" class="headerlink" title="2. 部署前的准备"></a>2. 部署前的准备</h2><p>上述是创建一个应用的最简步骤，接下来的操作是将代码托管到github，并创建一个github域名供查看。</p>
<ol>
<li>下载hexo-deployer-git包【需要注意的是，这个包是在项目中安装的，不要全局安装】</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>创建远程仓库【命名是唯一的：用户名.github.io】：</p>
<p><img src="https://s2.loli.net/2021/12/30/yax8DK3Ifv9R5nw.png" alt="image-20211229214808378.png"></p>
</li>
<li><p>更改项目配置，将项目与远程仓库进行绑定，找到项目根目录下的【_config.yml 】文件，并在末尾进行修改相关配置如下：</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type: git</span><br><span class="line">repo: git@github.com:crazyzsh/crazyzsh.github.io.git</span><br><span class="line">branch: main</span><br></pre></td></tr></table></figure>

<p>上述配置中的repo对象修改为github远程仓库的地址，分支branch修改为main，github默认的分支为main，也可以修改为其他分支【如果修改为其他分支的话，记得在以下界面切换着查看一下】</p>
<p><img src="https://s2.loli.net/2021/12/30/DiKWs1FXAjZ7IRf.png" alt="image-20211229214925972.png"></p>
<h2 id="3-部署"><a href="#3-部署" class="headerlink" title="3. 部署"></a>3. 部署</h2><p>在先前<strong>安装好hexo-deployer-git</strong>、<strong>创建好仓库</strong>、<strong>配置好_config.yaml文件</strong>的基础上，使用<code>hexo deploy</code>命令即可进行部署，命令的简写方式为：<code>hexo d</code></p>
<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p><strong>初次使用</strong>：</p>
<ol>
<li><code>hexo g</code>生成静态页面===&gt;生成<strong>public文件夹</strong>【HTML等文件】</li>
<li>使用<code>hexo s</code>进行本地<strong>预览查看</strong></li>
<li>再使用<code>hexo d</code>进行部署到github===&gt;生成<strong>deploy_git文件夹</strong></li>
</ol>
<p>​           上述命令1会在项目目录中生成public目录【文件夹内的是编译好的html文件】，在开发时如果进行了改动，应该使用<code>hexo clean</code>进行清除【最暴力的方法是先删除public目录，再使用<code>hexo clean</code>命令来清空，如果前面没有达到这个预期效果的话，可以尝试这种方法】，然后再使用命令1来生成静态页面，再使用命令3部署到github。</p>
<p><strong>日常使用：</strong></p>
<ol>
<li>删除deploy_git文件夹</li>
<li><code>hexo clean</code>===&gt;<strong>删除public目录</strong></li>
<li><code>hexo g</code>===&gt;<strong>重新生成public文件夹</strong></li>
<li><code>hexo s</code>===&gt;<strong>预览</strong>【非必要步骤】</li>
<li><code>hexo d</code>===&gt;<strong>生成deploy_git文件夹</strong></li>
</ol>
<p>如果不进行1、2两步骤，一定会报错，<strong>需谨记！！！</strong></p>
<h1 id="二、基本操作"><a href="#二、基本操作" class="headerlink" title="二、基本操作"></a>二、基本操作</h1><h2 id="1-如何在Markdown中插入图片？"><a href="#1-如何在Markdown中插入图片？" class="headerlink" title="1. 如何在Markdown中插入图片？"></a>1. 如何在Markdown中插入图片？</h2><p>​         一般在Markdown语法中，假如直接插入本地图片，由于本地文件变更比较频繁，容易造成图片遗失，这里我们选择图床来保存图片。</p>
<p>这里选择将本地图片上传至<code>sm.ms</code>网站上，可以直接生成Markdown语法格式的地址，将地址直接复制到相应位置即可。</p>
<h2 id="2-new"><a href="#2-new" class="headerlink" title="2. new"></a>2. new</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new [layout] &lt;titleName&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>其中的layout如果不指定的话就是在_config.yml全局配置项的default_layout属性值，默认值为<code>default_layout: post</code></li>
<li>如果标题包含空格的话，要使用引号括起来。<code>hexo new &quot;your title name&quot;</code></li>
<li>新建文章时一定要加上标题名，否则将达不到想要的效果（–path只是一个强制参数，放在前或后都无所谓）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new &lt;layout&gt; &lt;titleName&gt; --path yourPath</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new &lt;layout&gt; --path yourPath &lt;titleName&gt;</span><br></pre></td></tr></table></figure>

<p>如果使用默认的post布局且要指定路径，也是按照以上命令来进行指定，值得注意的是，使用<code>--path</code>时记得写下一级路径，可作为md文件的文件名用</p>
<h2 id="3-page和post-amp-amp-draft的区别"><a href="#3-page和post-amp-amp-draft的区别" class="headerlink" title="3. page和post&amp;&amp;draft的区别"></a>3. page和post&amp;&amp;draft的区别</h2><p>只有page布局才能任意放置在根路径下，<strong>自定义布局</strong>和<strong>post布局</strong>只能放置在**_posts文件夹**中。</p>
<p><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202112311509234.png" alt="image-20211231150950197"></p>
<h1 id="三、功能完善"><a href="#三、功能完善" class="headerlink" title="三、功能完善"></a>三、功能完善</h1><h2 id="1-评论"><a href="#1-评论" class="headerlink" title="1. 评论"></a>1. 评论</h2><h2 id="2-图床使用"><a href="#2-图床使用" class="headerlink" title="2. 图床使用"></a>2. 图床使用</h2><p><strong>2.1 github、picgo进行绑定</strong></p>
<p>使用sm.ms图床容易挂掉（有时候晚上看不到），这里使用github/gitee自带的图床，使用工具为：picgo</p>
<p>这里以github为例 ：</p>
<ul>
<li><p>首先在github上新建一个仓库用来专门保存图片，同时拿到github的token</p>
</li>
<li><p>下载picgo软件【一款图床集大成软件，里面内嵌了国内外众多优秀图床】</p>
</li>
<li><p>在picgo中进行github相关配置如下图：</p>
<ul>
<li><p><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/picgo%E4%B8%ADgithub%E8%AE%BE%E7%BD%AE.png"></p>
</li>
<li><p>默认的域名为：</p>
<p><code>https://githubusercontent.com/用户名/仓库名/分支名/目录名称/图片文件名</code></p>
</li>
</ul>
</li>
</ul>
<p><strong>2.2 picgo和typora进行绑定</strong></p>
<p><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/typora%E4%B8%8Epicgo%E8%BF%9B%E8%A1%8C%E7%BB%91%E5%AE%9A.png" alt="image-20211231111504773"></p>
<p><strong>具体用法</strong>：</p>
<p>通过上述的typora与picgo进行的绑定，只要在typora中进行图片插入操作【赋值粘贴（cv，snipaste），拖拽】就可以直接进行上传操作，此时如果在picgo中<strong>关闭了</strong>【上传前重命名】且<strong>打开了</strong>【时间戳重命名】的话就不会弹出窗口来提示而是<strong>直接上传</strong>了。</p>
]]></content>
      <categories>
        <category>web</category>
        <category>野生技术</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript初级</title>
    <url>/2022/01/02/2022/TypeScript/</url>
    <content><![CDATA[<h1 id="一、基础："><a href="#一、基础：" class="headerlink" title="一、基础："></a>一、基础：</h1><h2 id="1-安装配置"><a href="#1-安装配置" class="headerlink" title="1. 安装配置"></a>1. 安装配置</h2><ul>
<li><p>安装：<br><code>npm i typescript -g</code></p>
</li>
<li><p>查看是否安装成功：<br><code>tsc -v</code></p>
</li>
<li><p>vscode直接编译ts：直接使用命令（每修改ts文件就得重新编译一次，及其不方便）</p>
<p><code>tsc foldName.ts</code></p>
</li>
<li><p>vscode开发配置【法一】：</p>
<ul>
<li>在目录中使用<code>tsc --init</code>命令生成tsconfig.json配置文件</li>
<li>在tsconfig.json文件中将outDir的属性值改成自定义目录，并将其解注释</li>
<li>依次选择【终端】==&gt;【运行任务】==&gt;【typescript】==&gt;【tsc：监视 - tsconfig.json】</li>
<li>此后每新建一个ts文件只要保存了就会在outDir中生成相应的js文件</li>
</ul>
</li>
<li><p>vscode开发配置【法二】：</p>
<ul>
<li>在3中加上<code>-w</code>参数进行监听即可</li>
<li><code>tsc foldName -w</code></li>
</ul>
</li>
</ul>
<h2 id="2-声明变量类型"><a href="#2-声明变量类型" class="headerlink" title="2. 声明变量类型"></a>2. 声明变量类型</h2><h3 id="2-1前提"><a href="#2-1前提" class="headerlink" title="2.1前提"></a>2.1前提</h3><ul>
<li>讲究先入为主，如果一开始<strong>不指定数据类型</strong><ul>
<li>那么<strong>初始值</strong>的<strong>数据类型</strong>就是该变量的类型</li>
<li>对象以及数组复杂数据类型也是如此</li>
<li>数据一经赋值，后续对数据的操作都会提示此数据的类型</li>
</ul>
</li>
</ul>
<h3 id="2-2-基本数据类型"><a href="#2-2-基本数据类型" class="headerlink" title="2.2 基本数据类型"></a>2.2 基本数据类型</h3><ul>
<li>string：<ul>
<li><code>let a:string=&quot;xxx&quot;</code>===&gt;直接声明且赋值</li>
<li><code>let b=&quot;xxx&quot;</code>===&gt;相当于是隐式声明类型且赋值</li>
<li><code>let b:string</code>===&gt;只声明类型，不进行赋值</li>
</ul>
</li>
<li>boolean：<ul>
<li><code>let isTrue:boolean=false</code></li>
<li><code>let isFalse=true</code></li>
<li><code>let a:boolean</code></li>
</ul>
</li>
<li>number……</li>
</ul>
<h3 id="2-3-复杂数据类型"><a href="#2-3-复杂数据类型" class="headerlink" title="2.3 复杂数据类型"></a>2.3 复杂数据类型</h3><ul>
<li>数组<ul>
<li><code>let a:string[]=[]</code>===&gt;全为字符串类型的数组</li>
<li><code>let aa:Array&lt;string|boolean=[]</code>===&gt;泛型表达：既有string类型又有布尔型的数组（不论先后）</li>
</ul>
</li>
<li>对象<ul>
<li><p><code>let obj1:&#123;name:string,age:number&#125;=&#123;&#125;</code>===&gt;直接将对象限定为真正形式上的对象，并将对象属性值的数据类型确定（赋值时只能有这两个属性，且必须要有这两个属性）</p>
</li>
<li><p><code>let obj2:object=[];  obj2=&#123;&#125;</code>===&gt;首先确定obj2为一个对象，先将一个数组赋值给它（数组也是对象），最后又将其改为对象{}，实际上数据类型没有改变</p>
</li>
<li><p><code>let obj1:&#123;name:string, age:number, sex?:number&#125;=&#123;&#125;</code>===&gt;直接将对象限定为真正形式上的对象，并将对象属性值的数据类型确定，其中加上<code>?</code>表示是可选类型，即该属性可写可不写，写了的属性一定要包括</p>
</li>
</ul>
</li>
</ul>
<h3 id="2-4-组合类型"><a href="#2-4-组合类型" class="headerlink" title="2.4 组合类型"></a>2.4 组合类型</h3><ul>
<li>基本数据类型<ul>
<li><code>let a:string|number|boolean=1</code></li>
</ul>
</li>
<li>复杂数据类型<ul>
<li><code>let obj:Array&lt;number|boolean|string|object&gt;</code>===&gt;泛型表达</li>
<li><code>let arr:(number|string|boolean)[]=[]</code>===&gt;如果仅限于定义一个数组的类型可以多样的话，就必须使用<code>()</code>包起来</li>
<li><code>let arr:string|number[]=&quot;hello world&quot;</code>===&gt;表示arr<strong>既可以</strong>是string类型的字符串，<strong>也可以</strong>是number类型的数组</li>
</ul>
</li>
</ul>
<h3 id="2-4-any-amp-unknow-amp-as"><a href="#2-4-any-amp-unknow-amp-as" class="headerlink" title="2.4 any &amp; unknow &amp; as"></a>2.4 any &amp; unknow &amp; as</h3><ul>
<li><p>any可以是任何类型，unknown就任何类型都不是</p>
</li>
<li><p>as：用于类型转换，具体用法见下例</p>
</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a:<span class="built_in">string</span>=<span class="string">&quot;666&quot;</span></span><br><span class="line"><span class="comment">//这里肯定不行</span></span><br><span class="line"><span class="keyword">let</span> b:<span class="built_in">number</span>=a</span><br><span class="line">但是可以通过以下方式进行转换可以进行赋值</span><br><span class="line"><span class="keyword">let</span> b:<span class="built_in">number</span>=a <span class="keyword">as</span> unknow <span class="keyword">as</span> <span class="built_in">number</span></span><br></pre></td></tr></table></figure>



<h3 id="2-5-void-amp-never"><a href="#2-5-void-amp-never" class="headerlink" title="2.5 void &amp; never"></a>2.5 void &amp; never</h3><ul>
<li><p>void一般用于函数，确定函数是否有返回值，类型只能是<strong>null</strong>和<strong>undefined</strong></p>
  <figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以下函数直接返回的是string类型，说明有具体返回类型，不符合类型void，故在编译时会报错</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>):<span class="title">void</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将函数改为以下的话就不会报错</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>):<span class="title">void</span>|<span class="title">string</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>never一般用于函数没有进行完成的情景，例如抛出异常</p>
  <figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>):<span class="title">never</span></span>&#123;</span><br><span class="line">	<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;类型错误&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>void和never的最大区别就是never一般用于没有执行到尽头的情景，而void则是用于没有返回值的完整函数中</p>
</li>
</ul>
<h3 id="2-6-undefined-amp-null"><a href="#2-6-undefined-amp-null" class="headerlink" title="2.6 undefined &amp; null"></a>2.6 undefined &amp; null</h3><p>默认情况下，undefined和null可以变成简单类型的值，如果不想出现这种情况，可以在tsconfig.json中将<code>&quot;strictNullChecks&quot;: true</code>进行解注释</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a:<span class="built_in">string</span>=<span class="string">&quot;hello&quot;</span></span><br><span class="line">a=<span class="literal">undefined</span></span><br><span class="line">a=<span class="literal">null</span></span><br></pre></td></tr></table></figure>

<h2 id="3-函数类型"><a href="#3-函数类型" class="headerlink" title="3. 函数类型"></a>3. 函数类型</h2><h3 id="3-1-函数声明"><a href="#3-1-函数声明" class="headerlink" title="3.1 函数声明"></a>3.1 函数声明</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自动推断（以下为字符型）</span></span><br><span class="line"><span class="keyword">let</span> run=<span class="function">()=&gt;</span><span class="string">&quot;hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用大写开头的Function进行声明</span></span><br><span class="line"><span class="keyword">let</span> run:<span class="built_in">Function</span>=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-参数声明"><a href="#3-2-参数声明" class="headerlink" title="3.2 参数声明"></a>3.2 参数声明</h3><ul>
<li><p>直接进行限定参数</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//直接进行限定</span></span><br><span class="line"><span class="function"><span class="title">functin</span>(<span class="params">num1:<span class="built_in">string</span>,isTrue:<span class="built_in">boolean</span></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//限定可选参数</span></span><br><span class="line"><span class="function"><span class="title">functin</span>(<span class="params"> isTrue:<span class="built_in">boolean</span>, radio?:<span class="built_in">string</span> </span>)</span>&#123;</span><br><span class="line">      可选参数：如果传入则取其值，否则为<span class="string">&quot;hello&quot;</span></span><br><span class="line">      radio=radio||<span class="string">&quot;hello&quot;</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-3-返回值声明"><a href="#3-3-返回值声明" class="headerlink" title="3.3 返回值声明"></a>3.3 返回值声明</h3><ul>
<li><p>普通函数【没有返回值的应该写上void，使得代码更规范】</p>
  <figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//没有返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>):<span class="title">void</span></span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params">num1,num2</span>):<span class="title">number</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1+num2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>箭头函数</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//没有返回值</span></span><br><span class="line"><span class="keyword">let</span> run =():<span class="function"><span class="params">void</span>=&gt;</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有返回值</span></span><br><span class="line"><span class="keyword">let</span> run =(num1,num2):<span class="function"><span class="params">number</span>=&gt;</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> num1+num2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-4-type声明函数参数"><a href="#3-4-type声明函数参数" class="headerlink" title="3.4 type声明函数参数"></a>3.4 type声明函数参数</h3><ul>
<li><p>目的：<strong>减少重复声明</strong>函数<strong>参数</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一次声明</span></span><br><span class="line"><span class="keyword">let</span> addUser: <span class="function">(<span class="params">user: &#123; name: <span class="built_in">string</span>, age: <span class="built_in">number</span> &#125;</span>) =&gt;</span> <span class="built_in">boolean</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//再次使用了相同的声明</span></span><br><span class="line">addUser = (u: &#123; <span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span> &#125;): <span class="function"><span class="params">boolean</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;添加用户&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>简化后：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注意这里是赋值的形式</span></span><br><span class="line"><span class="keyword">type</span> userType = &#123; <span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> addUser: <span class="function">(<span class="params">user: userType</span>) =&gt;</span> <span class="built_in">boolean</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接使用type定义的参数类型</span></span><br><span class="line">addUser = (u: userType): <span class="function"><span class="params">boolean</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;添加用户&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addUser(&#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="number">12</span> &#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>使用type将<strong>函数结构</strong>进行约束</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> userType = &#123; <span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> addUserFunc = <span class="function">(<span class="params">user: userType</span>) =&gt;</span> <span class="built_in">boolean</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> addUser: addUserFunc = (u: userType): <span class="function"><span class="params">boolean</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;添加用户&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addUser(&#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="number">12</span> &#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-5-剩余参数"><a href="#3-5-剩余参数" class="headerlink" title="3.5 剩余参数"></a>3.5 剩余参数</h3><ul>
<li><p>下面的求合函数接收多个参数</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">...args: <span class="built_in">any</span>[]</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> args.reduce(<span class="function">(<span class="params">s, n</span>) =&gt;</span> s + n, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>));</span><br></pre></td></tr></table></figure></li>
<li><p>下面通过第二个参数接收剩余参数，来实现数据追加的示例</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">arr: <span class="built_in">any</span>[], ...args: <span class="built_in">any</span>[]</span>): <span class="title">any</span>[] </span>&#123;</span><br><span class="line">    arr.push(...args)</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> name: <span class="built_in">any</span>[] = [<span class="string">&#x27;张三&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(push(name, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>)); <span class="comment">// [ &#x27;张三&#x27;,&#x27;李四&#x27;, &#x27;王五&#x27; ]</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-6-元组"><a href="#3-6-元组" class="headerlink" title="3.6 元组"></a>3.6 元组</h3><p>元组要为每个值进行类型声明（包括顺序问题），而数组则没有这么严格</p>
<ul>
<li><p>数组定义</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr: (<span class="built_in">number</span> | <span class="built_in">string</span> | <span class="built_in">boolean</span>)[] = [<span class="string">&#x27;张三&#x27;</span>, <span class="number">2030</span>, <span class="literal">true</span>];</span><br><span class="line"></span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">&#x27;李四&#x27;</span> <span class="comment">//不会报错，可以将原来是数值的更改为字符串，这是数组允许的类型范围</span></span><br><span class="line">arr[<span class="number">10</span>] = <span class="number">10</span>			<span class="comment">//不会报错，类型也是允许的</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure></li>
<li><p>元组定义</p>
  <figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> hd: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">&#x27;张三&#x27;</span>, <span class="number">2030</span>]</span><br><span class="line">hd[<span class="number">0</span>] = <span class="literal">true</span> <span class="comment">//报错，第一个值必须是字符串</span></span><br></pre></td></tr></table></figure></li>
<li><p>注意数组和元组的定义的区别，</p>
<ul>
<li>元组直接在<code>[]</code>中进行定义的</li>
<li>数组需要<code>()</code>进行定义且加上空的<code>[]</code></li>
</ul>
</li>
</ul>
<h1 id="二、枚举与断言"><a href="#二、枚举与断言" class="headerlink" title="二、枚举与断言"></a>二、枚举与断言</h1><h2 id="1-enum枚举"><a href="#1-enum枚举" class="headerlink" title="1. enum枚举"></a>1. enum枚举</h2><ul>
<li><p>不设置值时，值以0开始递增</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enum</span> SexType &#123;</span><br><span class="line">    BOY, GIRL</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hd = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">sex</span>: SexType.GIRL</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(hd); <span class="comment">//&#123; name: &#x27;张三&#x27;, sex: 1 &#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li><p>当某个字段设置数值类型的值后，后面的在它基础上递增</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enum</span> SexType &#123;</span><br><span class="line">    BOY = <span class="number">1</span>, GIRL</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hd = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">sex</span>: SexType.GIRL</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(hd); <span class="comment">//&#123; name: &#x27;张三&#x27;, sex: 2 &#125;</span></span><br></pre></td></tr></table></figure></li>
<li><p>将值设置为其他类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">enum SexType &#123;</span><br><span class="line">    BOY = &#x27;男&#x27;, GIRL = &#x27;女&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const hd = &#123;</span><br><span class="line">    name: &#x27;张三&#x27;,</span><br><span class="line">    sex: SexType.GIRL</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(hd); //&#123; name: &#x27;张三&#x27;, sex: &#x27;女&#x27; &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="2-as断言"><a href="#2-as断言" class="headerlink" title="2. as断言"></a>2. as断言</h2><p>as 断言的意思就是用户断定这是什么类型，不使用系统推断的类型，说白了就是『我说是什么，就是什么』</p>
<p><strong>基本用法</strong>：</p>
<ul>
<li><p>下例中TS 会根据函数推断变量 f 的类型是 string | number</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hd</span>(<span class="params">arg: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg ? <span class="string">&#x27;张三&#x27;</span> : <span class="number">2030</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> f = hd(<span class="number">1</span>) <span class="comment">//let f: string | number</span></span><br></pre></td></tr></table></figure></li>
<li><p>断言方式一：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hd</span>(<span class="params">arg: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg ? <span class="string">&#x27;张三&#x27;</span> : <span class="number">2030</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> f = hd(<span class="number">1</span>) <span class="keyword">as</span> <span class="built_in">string</span> <span class="comment">//let f: string</span></span><br></pre></td></tr></table></figure></li>
<li><p>断言方式二：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hd</span>(<span class="params">arg: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg ? <span class="string">&#x27;张三&#x27;</span> : <span class="number">2030</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> f = &lt;<span class="built_in">string</span>&gt;hd(<span class="number">1</span>) <span class="comment">//let f: stri</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-const断言"><a href="#3-const断言" class="headerlink" title="3. const断言"></a>3. const断言</h2><h3 id="3-1-基本类型断言"><a href="#3-1-基本类型断言" class="headerlink" title="3.1 基本类型断言"></a>3.1 基本类型断言</h3><ul>
<li><p>限定 user 类型为最窄类型<code>张三</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//let声明之后使用const断言之后就不可以再改了</span></span><br><span class="line"><span class="keyword">let</span> user = <span class="string">&#x27;张三&#x27;</span> <span class="keyword">as</span> <span class="keyword">const</span></span><br><span class="line">user = <span class="string">&#x27;张三&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-2-复杂数据类型"><a href="#3-2-复杂数据类型" class="headerlink" title="3.2 复杂数据类型"></a>3.2 复杂数据类型</h3><ul>
<li><p>对象转换为只读属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let user = &#123; name: &#x27;张三&#x27; &#125; as const</span><br><span class="line">user.name = &#x27;houdunren&#x27; //因为是只读属性，所以不允许设置值</span><br></pre></td></tr></table></figure></li>
<li><p>数组赋值</p>
<ul>
<li><p>没有使用const断言</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2039</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> hd = [a, b] 	<span class="comment">//let hd: (string | number)[]</span></span><br><span class="line"><span class="keyword">let</span> f = hd[<span class="number">1</span>] 	<span class="comment">//let f: string | number</span></span><br><span class="line">f = <span class="string">&#x27;李四&#x27;</span> 	<span class="comment">//不报错，因为类型是 string | number</span></span><br></pre></td></tr></table></figure></li>
<li><p>使用了const断言【方式1】</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2039</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> hd = [a, b] <span class="keyword">as</span> <span class="keyword">const</span> <span class="comment">//let hd: readonly [string, number]</span></span><br><span class="line"><span class="keyword">let</span> f = hd[<span class="number">1</span>] <span class="comment">//let f: number</span></span><br><span class="line">f = <span class="string">&#x27;hello&#x27;</span> <span class="comment">//报错，变量 b 的类型 number,不能赋值为 string</span></span><br></pre></td></tr></table></figure></li>
<li><p>使用了const【方式2】</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2039</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> hd = &lt;<span class="keyword">const</span>&gt;[a, b] <span class="comment">//let hd: readonly [string, number]</span></span><br><span class="line"><span class="keyword">let</span> f = hd[<span class="number">1</span>] <span class="comment">//let f: number</span></span><br><span class="line">f = <span class="number">199</span> </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="3-3-解构"><a href="#3-3-解构" class="headerlink" title="3.3 解构"></a>3.3 解构</h3><ul>
<li><p>js缺陷</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hd</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="string">&#x27;houdunren.com&#x27;</span></span><br><span class="line">  <span class="keyword">let</span> b = (x: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> x + y</span><br><span class="line">  <span class="keyword">return</span> [a, b]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> [n, m] = hd() <span class="comment">//变量 m 的类型为 string | ((x: number, y: number)=&gt; number)</span></span><br><span class="line"></span><br><span class="line">m(<span class="number">1</span>, <span class="number">6</span>) <span class="comment">//报错：因为类型可能是字符串，所以不允许调用</span></span><br></pre></td></tr></table></figure></li>
<li><p>【方式一】断言m为函数后再调用</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hd</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="string">&#x27;houdunren.com&#x27;</span></span><br><span class="line">  <span class="keyword">let</span> b = (x: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> x + y</span><br><span class="line">  <span class="keyword">return</span> [a, b]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> [n, m] = hd()</span><br><span class="line"><span class="built_in">console</span>.log((m <span class="keyword">as</span> <span class="built_in">Function</span>)(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"><span class="comment">//使用以下类型声明都是可以的</span></span><br><span class="line"><span class="built_in">console</span>.log((m <span class="keyword">as</span> (x: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span>) =&gt; <span class="built_in">number</span>)(<span class="number">1</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>【方式二】在调用时对返回值断言类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hd</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="string">&#x27;houdunren.com&#x27;</span></span><br><span class="line">  <span class="keyword">let</span> b = (x: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> x + y</span><br><span class="line">  <span class="keyword">return</span> [a, b]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [n, m] = hd() <span class="keyword">as</span> [<span class="built_in">string</span>, <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span>]</span><br><span class="line"><span class="built_in">console</span>.log(m(<span class="number">9</span>, <span class="number">19</span>))</span><br></pre></td></tr></table></figure></li>
<li><p>【方式三】在函数体内声明返回类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hd</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="string">&#x27;houdunren.com&#x27;</span></span><br><span class="line">  <span class="keyword">let</span> b = (x: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> x + y</span><br><span class="line">  <span class="keyword">return</span> [a, b] <span class="keyword">as</span> [<span class="keyword">typeof</span> a, <span class="keyword">typeof</span> b]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [n, m] = hd()</span><br><span class="line"><span class="built_in">console</span>.log(m(<span class="number">9</span>, <span class="number">19</span>))</span><br></pre></td></tr></table></figure></li>
<li><p>【方式四】在函数体内声明返回类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hd</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">  <span class="keyword">let</span> b = (): <span class="function"><span class="params">void</span> =&gt;</span> &#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> [a, b] <span class="keyword">as</span> <span class="keyword">const</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [x, y] = hd() <span class="comment">//变量 y 的类型为 () =&gt; void</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="4-null-undefined"><a href="#4-null-undefined" class="headerlink" title="4. null/undefined"></a>4. null/undefined</h2><ul>
<li><p>默认情况下 null 与undefined 可以赋值给其他类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> hd: <span class="built_in">string</span> = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">hd = <span class="literal">null</span></span><br><span class="line">hd = <span class="literal">undefined</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改 tsconfig.json 配置文件的<code>strictNullChecks</code> 解注释，则不能将 null、undefined 赋值给其他类型</p>
</li>
<li><p>以下才可以进行赋值为null/undefine</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> hd: <span class="built_in">string</span> |undefiend|<span class="literal">null</span> = <span class="string">&#x27;houdunren.com&#x27;</span></span><br><span class="line">hd = <span class="literal">null</span></span><br><span class="line">hd = <span class="literal">undefined</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="5-非空断言"><a href="#5-非空断言" class="headerlink" title="5. 非空断言"></a>5. 非空断言</h2><p>开启 tsconfig.json 的配置项strictNullChecks 字段为 true进行测试：</p>
<ul>
<li><p>下面的示例获取的值可能为HTMLDivElement或null，所以直接分配类型“HTMLDivElement”将报错误</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> el: HTMLDivElement = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.hd&#x27;</span>) </span><br><span class="line"><span class="built_in">console</span>.log(el.id);</span><br></pre></td></tr></table></figure></li>
<li><p>使用 as 断言类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> el: HTMLDivElement = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.hd&#x27;</span>) <span class="keyword">as</span> HTMLDivElement</span><br><span class="line"><span class="built_in">console</span>.log(el.id);</span><br></pre></td></tr></table></figure></li>
<li><p>在值后面使用 <code>!</code> 来声明值非null</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> el: HTMLDivElement = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.hd&#x27;</span>)!</span><br><span class="line"><span class="built_in">console</span>.log(el.id);</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="6-DOM"><a href="#6-DOM" class="headerlink" title="6. DOM"></a>6. DOM</h2><p>开启 tsconfig.json 的配置项strictNullChecks 字段为 true</p>
<p>创建html文件如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;1.js&quot;</span> <span class="attr">defer</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hd&quot;</span>&gt;</span>houdunren.com<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;bt&quot;</span>&gt;</span>插入元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6-1-类型推断"><a href="#6-1-类型推断" class="headerlink" title="6.1 类型推断"></a>6.1 类型推断</h3><ul>
<li><p>body等具体标签可以准确标签类型或 null</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> body = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;body&#x27;</span>) <span class="comment">//const body: HTMLBodyElement|null</span></span><br></pre></td></tr></table></figure></li>
<li><p>根据class 等获取不能准确获取标签类型，推断的类型为 Element|null</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> el = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.hd&#x27;</span>) <span class="comment">//const el: Element | null</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="6-2-null处理"><a href="#6-2-null处理" class="headerlink" title="6.2 null处理"></a>6.2 null处理</h3><ul>
<li><p>针对于其他标签元素，返回值可能为null，所以使用 <code>as</code> 断言或<code>!</code>处理</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>) <span class="keyword">as</span> HTMLDivElement<span class="comment">//const div: HTMLDivElement</span></span><br><span class="line"><span class="comment">//或使用</span></span><br><span class="line">div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>)! <span class="comment">//非空断言</span></span><br><span class="line"><span class="built_in">console</span>.log(div.id);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="6-3-断言处理"><a href="#6-3-断言处理" class="headerlink" title="6.3 断言处理"></a>6.3 断言处理</h3><ul>
<li><p>使用<code>as</code> 将类型声明为 <code>HTMLAnchorElement</code> 则 TS 会将其按 a 链接类型处理</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//现在所有的提示将是 a 链接属性或方法</span></span><br><span class="line"><span class="keyword">const</span> el = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.hd&#x27;</span>) <span class="keyword">as</span> HTMLAnchorElement <span class="comment">//const el: HTMLAnchorElement</span></span><br><span class="line"><span class="built_in">console</span>.log(el.href);</span><br></pre></td></tr></table></figure></li>
<li><p>下例中的 DOM 类型会报错，因为.hd 是Element 类型，而构建函数参数el 的类型是 <code>HTMLDivElement</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hd</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">el: HTMLDivElement</span>)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> el = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.hd&#x27;</span>); <span class="comment">//el: Element</span></span><br><span class="line"><span class="keyword">new</span> Hd(el)</span><br></pre></td></tr></table></figure></li>
<li><p>这时可以使用 as 断言处理，明确告之获取的值类型是 <code>HTMLDivElement</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hd</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">el: HTMLDivElement</span>)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> el = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.hd&#x27;</span>) <span class="keyword">as</span> HTMLDivElement;</span><br><span class="line"><span class="keyword">new</span> Hd(el)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="6-4-事件处理"><a href="#6-4-事件处理" class="headerlink" title="6.4 事件处理"></a>6.4 事件处理</h3><ul>
<li><p>下面提取按钮元素并添加事件，实现插入元素的功能</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> body = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> bt = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#bt&#x27;</span>) <span class="keyword">as</span> HTMLButtonElement</span><br><span class="line"></span><br><span class="line">bt.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">e: Event</span>) =&gt;</span> &#123;</span><br><span class="line">    e.preventDefault(); <span class="comment">//因为设置了 e 的类型，所以会有完善的提示</span></span><br><span class="line">    body.insertAdjacentHTML(<span class="string">&#x27;beforeend&#x27;</span>, <span class="string">&quot;&lt;div&gt;Hello World&lt;/div&gt;&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="三、类与接口"><a href="#三、类与接口" class="headerlink" title="三、类与接口"></a>三、类与接口</h1><h2 id="1-类的定义"><a href="#1-类的定义" class="headerlink" title="1. 类的定义"></a>1. 类的定义</h2><ul>
<li><p>以往js中类的定义是这样的：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name, age</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name</span><br><span class="line">        <span class="built_in">this</span>.age = age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>TS中就要对类进行约束</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//先进行约束</span></span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span></span><br><span class="line">    <span class="attr">age</span>:<span class="built_in">number</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//初始化(对传入的参数也要进行约束)</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name</span><br><span class="line">        <span class="built_in">this</span>.age = age</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//定义函数</span></span><br><span class="line">    info():<span class="built_in">string</span>&#123;</span><br><span class="line">        <span class="keyword">return</span><span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>的年龄是<span class="subst">$&#123;<span class="built_in">this</span>.age&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化</span></span><br><span class="line"><span class="keyword">const</span> zs=<span class="keyword">new</span> User(<span class="string">&quot;张三&quot;</span>,<span class="number">21</span>)</span><br><span class="line"><span class="keyword">const</span> ls=<span class="keyword">new</span> User(<span class="string">&quot;李四&quot;</span>,<span class="number">14</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>定义复杂类型（对象或数组）的类型为类</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> users:User[]=[]</span><br><span class="line">users.push(zs,li)</span><br><span class="line"><span class="built_in">console</span>.log(users)<span class="comment">//[User,User]</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="2-修饰符"><a href="#2-修饰符" class="headerlink" title="2. 修饰符"></a>2. 修饰符</h2><h3 id="2-1-public"><a href="#2-1-public" class="headerlink" title="2.1 public"></a>2.1 public</h3><ul>
<li>默认情况下属性是 public （公开的），即可以在类的内部与外部修改和访问</li>
<li>不明确设置修饰符即为public</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> name: <span class="built_in">string</span></span><br><span class="line">    <span class="keyword">public</span> age: <span class="built_in">number</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">n: <span class="built_in">string</span>, a: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = n</span><br><span class="line">        <span class="built_in">this</span>.age = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> info(): <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>的年龄是 <span class="subst">$&#123;<span class="built_in">this</span>.age&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象的属性能在外部进行修改</span></span><br><span class="line"><span class="keyword">const</span> hd = <span class="keyword">new</span> User(<span class="string">&#x27;张三&#x27;</span>, <span class="number">12</span>);</span><br><span class="line"><span class="keyword">const</span> xj = <span class="keyword">new</span> User(<span class="string">&#x27;李四&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">hd.name = <span class="string">&quot;王五&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> hd) &#123;</span><br><span class="line">    <span class="comment">//属性是实例对象独有的，方法在对象的原型上（所以遍历的时候能将其属性遍历出来）</span></span><br><span class="line">    <span class="keyword">if</span> (hd.hasOwnProperty(key)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-protected"><a href="#2-2-protected" class="headerlink" title="2.2 protected"></a>2.2 protected</h3><ul>
<li><p>protected 修饰符指<strong>受保护</strong>的，只允许在<strong>父类与子类</strong>使用，<strong>不允许</strong>在类的外部使用</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hd</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> name: <span class="built_in">string</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Hd</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> info(): <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`你好 <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hd = <span class="keyword">new</span> User(<span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(hd.info());</span><br><span class="line"><span class="built_in">console</span>.log(hd.name); <span class="comment">//属性是 protected 不允许访问</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-3-private"><a href="#2-3-private" class="headerlink" title="2.3 private"></a>2.3 private</h3><ul>
<li><p>protected修饰符指<strong>私有</strong>的，不允许在子类与类的外部使用</p>
</li>
<li><p>父类声明 private 属性或方法子类不允许覆盖</p>
</li>
<li><p>子类不能访问父类的 private 属性或方法</p>
</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hd</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> name: <span class="built_in">string</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Hd</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> info(): <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`你好 <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span> <span class="comment">//属性是 private 不允许子类访问</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>子类更改父类方法或属性的访问修饰符有些限制的【<strong>不能</strong>将父类的<strong>方法或属性</strong>私有化程度<strong>更高</strong>===&gt;<strong>只能</strong>是<strong>相同</strong>等级或<strong>更低</strong>等级】</p>
<ul>
<li><p>父类的 private 不允许子类修改</p>
</li>
<li><p>父类的 protected 子类可以修改为 protected 或 public</p>
</li>
<li><p>父类的 public 子类只能设置为 public</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hd</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> name: <span class="built_in">string</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> info(): <span class="built_in">void</span> &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Hd</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> info(): <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;houdunren.com&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="2-4-readonly"><a href="#2-4-readonly" class="headerlink" title="2.4 readonly"></a>2.4 readonly</h3><p>readonly 将属性定义为只读，不允许在类的内部与外部进行修改</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Axios</span> </span>&#123;</span><br><span class="line">    <span class="keyword">readonly</span> site: <span class="built_in">string</span> = <span class="string">&#x27;https://houdunren.com/api&#x27;</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">site?: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.site = site || <span class="built_in">this</span>.site</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> get(url: <span class="built_in">string</span>): <span class="built_in">any</span>[] &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`你正在请求 <span class="subst">$&#123;<span class="built_in">this</span>.site + <span class="string">&#x27;/&#x27;</span> + url&#125;</span>`</span>)</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> Axios(<span class="string">&#x27;https://www.axios.com&#x27;</span>)</span><br><span class="line">instance.get(<span class="string">&#x27;users&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="3-constructor"><a href="#3-constructor" class="headerlink" title="3. constructor"></a>3. constructor</h2><ul>
<li><p>构造函数是初始化实例参数使用的，在 TS 中有些细节与其他程序不同</p>
</li>
<li><p>可以在构造函数 constructor 中定义属性，这样就不用在类中声明属性了，可以简化代码量</p>
</li>
<li><p>必须要在属性前加上 public、private、readonly等修饰符才有效【在constructor里面或者外面】</p>
</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    	<span class="comment">//只需要在里面加上public关键字就可进行声明了，不用在constructor外面进行声明</span></span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">public</span> name: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">public</span> age: <span class="built_in">number</span></span></span></span><br><span class="line"><span class="params"><span class="function">    </span>)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> info(): <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>的年龄是 <span class="subst">$&#123;<span class="built_in">this</span>.age&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hd = <span class="keyword">new</span> User(<span class="string">&#x27;张三&#x27;</span>, <span class="number">12</span>);</span><br></pre></td></tr></table></figure>

<h2 id="4-static"><a href="#4-static" class="headerlink" title="4. static"></a>4. static</h2><ul>
<li>很多时候会将公共的、不需要分配给<strong>对象</strong>的属性或方法使用关键字static存入类中，作为静态属性或方法</li>
<li>由于静态属性只能由类本身来进行调用，不需要通过对象来调用，这样类似于<strong>缓存</strong></li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> url: <span class="built_in">string</span> = <span class="string">&#x27;houdunren.com&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">getSiteInfo</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;我们不断更新视频教程在&#x27;</span> + Site.url</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Site.getSiteInfo());</span><br></pre></td></tr></table></figure>

<h2 id="5-单例模式"><a href="#5-单例模式" class="headerlink" title="5. 单例模式"></a>5. 单例模式</h2><ul>
<li><p>有时候，比如连接数据库，我们只想连接一次之后就不在进行连接了，此时只连接一次数据库就可将数据供他处使用，优化了性能。</p>
</li>
<li><p>前提：constructor只有定义为public（即默认时）才能进行初始化</p>
</li>
<li><p>如果将constructor设置为非public（protected） 修饰符后，就不能通过这个类实例化对象了。</p>
</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hd = <span class="keyword">new</span> User();<span class="comment">//报错</span></span><br></pre></td></tr></table></figure>

<ul>
<li>可以利用这个特性再结合 static 即可实现单例模式，即只实例化一个对象</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> instance: User | <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123; &#125;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//定义为static，使得可以直接通过类来进行调用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> make(): User &#123;</span><br><span class="line">        <span class="comment">//此时constructor设置为了proteced，在类里面是可以进行实例化的</span></span><br><span class="line">        <span class="comment">//一定要先进行过滤才能保证只实例化一次</span></span><br><span class="line">        <span class="keyword">if</span> (User.instance == <span class="literal">null</span>) User.instance = <span class="keyword">new</span> User;</span><br><span class="line">        <span class="keyword">return</span> User.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hd = User.make();<span class="comment">//获得了唯一实例化的对象【如果想再次实例化就行不通了】</span></span><br><span class="line"><span class="built_in">console</span>.log(hd);</span><br></pre></td></tr></table></figure>

<h2 id="6-get-set"><a href="#6-get-set" class="headerlink" title="6. get/set"></a>6. get/set</h2><ul>
<li>使用get 与 set 访问器可以动态设置和获取属性，类似于 vue 中的计算属性</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> _name</span><br><span class="line">   	<span class="comment">//初始化</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>._name = name</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">//1、先设置（实际开发中顺序无关紧要，只要明白其中逻辑即可）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">set</span> <span class="title">name</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>._name = value</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">//2、才能拿到</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">get</span> <span class="title">name</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>._name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hd = <span class="keyword">new</span> User(<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line">hd.name = <span class="string">&#x27;李四&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(hd.name);</span><br></pre></td></tr></table></figure>

<h2 id="7-abstract"><a href="#7-abstract" class="headerlink" title="7. abstract"></a>7. abstract</h2><p>使用abstract 关键字定义抽象类，抽象类除了具有普通类的功能外，还可以定义抽象方法以及抽象属性</p>
<ul>
<li>抽象类可以不包含抽象方法，但抽象方法必须存在于抽象类中</li>
<li>抽象方法是对方法的定义，子类必须实现这个方法</li>
<li>抽象类不可以直接使用，只能被继承</li>
<li>抽象类类似于<strong>类的模板</strong>，实现规范的代码定义</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animation</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="title">getPos</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">300</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tank</span> <span class="keyword">extends</span> <span class="title">Animation</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> move(): <span class="built_in">void</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span> <span class="keyword">extends</span> <span class="title">Animation</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> move: <span class="built_in">void</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上例中的子类都有 move 方法，我们可以在抽象方法中对其进行<strong>规范定义</strong></p>
<ul>
<li>抽象方法只能定义，不能实现，即没有函数体</li>
<li>子类必须实现抽象方法</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animation</span> </span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> move(): <span class="built_in">void</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="title">getPos</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">300</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tank</span> <span class="keyword">extends</span> <span class="title">Animation</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> move(): <span class="built_in">void</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span> <span class="keyword">extends</span> <span class="title">Animation</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> move(): <span class="built_in">void</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>子类必须实现抽象类定义的抽象属性</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animation</span> </span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> move(): <span class="built_in">void</span></span><br><span class="line">    <span class="keyword">abstract</span> name: <span class="built_in">string</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="title">getPos</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">300</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tank</span> <span class="keyword">extends</span> <span class="title">Animation</span> </span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&#x27;坦克&#x27;</span></span><br><span class="line">    <span class="keyword">public</span> move(): <span class="built_in">void</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span> <span class="keyword">extends</span> <span class="title">Animation</span> </span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&#x27;玩家&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> move(): <span class="built_in">void</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>抽象类不能被直接使用，只能被继承</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animation</span> </span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> move(): <span class="built_in">void</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="title">getPos</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">300</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> hd = <span class="keyword">new</span> Animation(); <span class="comment">//报错，不能通过抽象方法创建实例</span></span><br></pre></td></tr></table></figure>

<h2 id="8-interface"><a href="#8-interface" class="headerlink" title="8. interface"></a>8. interface</h2><p>接口用于描述<strong>类</strong>和<strong>对象</strong>的结构</p>
<ul>
<li>使项目中不同文件使用的对象保持统一的规范</li>
<li>使用接口能有更好的代码提示</li>
</ul>
<h3 id="8-1-抽象类"><a href="#8-1-抽象类" class="headerlink" title="8.1 抽象类"></a>8.1 抽象类</h3><p>抽象类与接口的结合使用</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> AnimationInterface &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    move(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animation</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> getPos(): &#123; <span class="attr">x</span>: <span class="built_in">number</span>; y: <span class="built_in">number</span> &#125; &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">300</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tank</span> <span class="keyword">extends</span> <span class="title">Animation</span> <span class="title">implements</span> <span class="title">AnimationInterface</span> </span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&#x27;敌方坦克&#x27;</span></span><br><span class="line">    <span class="keyword">public</span> move(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>移动`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span> <span class="keyword">extends</span> <span class="title">Animation</span> </span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&#x27;玩家&#x27;</span></span><br><span class="line">    <span class="keyword">public</span> move(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>坦克移动`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> hd = <span class="keyword">new</span> Tank()</span><br><span class="line"><span class="keyword">const</span> play = <span class="keyword">new</span> Player()</span><br><span class="line">hd.move()</span><br><span class="line">play.move()</span><br></pre></td></tr></table></figure>

<h3 id="8-2-对象"><a href="#8-2-对象" class="headerlink" title="8.2 对象"></a>8.2 对象</h3><p>使用接口来约束对象</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> UserInterface &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">    isLock: <span class="built_in">boolean</span>;</span><br><span class="line">    info(other:<span class="built_in">string</span>): <span class="built_in">string</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hd: UserInterface = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">isLock</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="function"><span class="title">info</span>(<span class="params">o:<span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>已经<span class="subst">$&#123;<span class="built_in">this</span>.age&#125;</span>岁了,<span class="subst">$&#123;o&#125;</span>`</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(hd.info());</span><br></pre></td></tr></table></figure>

<p>如果尝试<strong>添加</strong>一个接口中不存在的函数将报错，<strong>移除</strong>一个接口中不存在的属性也将报错。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> hd: UserInterface = &#123;</span><br><span class="line">		...</span><br><span class="line">   <span class="function"><span class="title">say</span>(<span class="params"></span>)</span> &#123; &#125;  <span class="comment">//“say”不在类型“UserInterface”中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果有额外的属性，使用以下方式声明，这样就可以添加任意属性了</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> UserInterface &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">    isLock: <span class="built_in">boolean</span>;</span><br><span class="line">    [key:<span class="built_in">string</span>]:<span class="built_in">any</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-3-接口继承"><a href="#8-3-接口继承" class="headerlink" title="8.3 接口继承"></a>8.3 接口继承</h3><p><strong>下面定义游戏结束的接口 <code>PlayEndInterface</code> ，<code>AnimationInterface</code>接口可以使用 <code>extends</code> 来继承该接口</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> PlayEndInterface &#123;</span><br><span class="line">    end(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//继承接口PlayEndInterface，这样的话使得AnimationInterface接口也具有end方法</span></span><br><span class="line"><span class="keyword">interface</span> AnimationInterface <span class="keyword">extends</span> PlayEndInterface &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    move(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animation</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> getPos(): &#123; <span class="attr">x</span>: <span class="built_in">number</span>; y: <span class="built_in">number</span> &#125; &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">300</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tank</span> <span class="keyword">extends</span> <span class="title">Animation</span> <span class="title">implements</span> <span class="title">AnimationInterface</span> </span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&#x27;敌方坦克&#x27;</span></span><br><span class="line">    <span class="keyword">public</span> move(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>移动`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//必须要有end方法</span></span><br><span class="line">    <span class="function"><span class="title">end</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;游戏结束&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span> <span class="keyword">extends</span> <span class="title">Animation</span> <span class="title">implements</span> <span class="title">AnimationInterface</span> </span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&#x27;玩家&#x27;</span></span><br><span class="line">    <span class="keyword">public</span> move(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>坦克移动`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">end</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;游戏结束&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> hd = <span class="keyword">new</span> Tank()</span><br><span class="line"><span class="keyword">const</span> play = <span class="keyword">new</span> Player()</span><br><span class="line">hd.move()</span><br><span class="line">play.move()</span><br></pre></td></tr></table></figure>

<p><strong>对象可以使用实现多个接口，多个接口用逗号连接</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> PlayEndInterface &#123;</span><br><span class="line">    end(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> AnimationInterface &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    move(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animation</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> getPos(): &#123; <span class="attr">x</span>: <span class="built_in">number</span>; y: <span class="built_in">number</span> &#125; &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">300</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tank</span> <span class="keyword">extends</span> <span class="title">Animation</span> <span class="title">implements</span> <span class="title">AnimationInterface</span>, <span class="title">PlayEndInterface</span> </span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&#x27;敌方坦克&#x27;</span></span><br><span class="line">    <span class="keyword">public</span> move(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>移动`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">end</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;游戏结束&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span> <span class="keyword">extends</span> <span class="title">Animation</span> <span class="title">implements</span> <span class="title">AnimationInterface</span>, <span class="title">PlayEndInterface</span> </span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&#x27;玩家&#x27;</span></span><br><span class="line">    <span class="keyword">public</span> move(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>坦克移动`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">end</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;游戏结束&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> hd = <span class="keyword">new</span> Tank()</span><br><span class="line"><span class="keyword">const</span> play = <span class="keyword">new</span> Player()</span><br><span class="line">hd.move()</span><br><span class="line">play.move()</span><br></pre></td></tr></table></figure>

<h3 id="8-4-函数"><a href="#8-4-函数" class="headerlink" title="8.4 函数"></a>8.4 函数</h3><p>使用接口<strong>约束</strong>函数的<strong>参数</strong>与<strong>返回值</strong></p>
<ul>
<li>会根据接口规范进行代码提示</li>
<li>严格约束参数类型，维护代码安全</li>
</ul>
<p><strong>函数参数与返回值</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> UserInterface &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">    isLock: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lockUser</span>(<span class="params">user: UserInterface, state: <span class="built_in">boolean</span></span>): <span class="title">UserInterface</span> </span>&#123;</span><br><span class="line">    user.isLock = state;</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user: UserInterface = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">isLock</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lockUser(user, <span class="literal">true</span>);</span><br><span class="line"><span class="built_in">console</span>.log(user);</span><br></pre></td></tr></table></figure>

<p><strong>函数声明</strong></p>
<p>使用接口可以约束函数的定义</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Pay &#123;</span><br><span class="line">    (price: <span class="built_in">number</span>): <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> getUserInfo: Pay = <span class="function">(<span class="params">price: <span class="built_in">number</span></span>)=&gt;</span><span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="8-5-类内部使用接口"><a href="#8-5-类内部使用接口" class="headerlink" title="8.5 类内部使用接口"></a>8.5 类内部使用接口</h3><p>下面的代码我们发现需要在多个地方使用对 user 类型的定义</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="attr">info</span>: &#123; <span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span> &#125;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">user: &#123; name: <span class="built_in">string</span>, age: <span class="built_in">number</span> &#125;</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.info = user</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> hd = <span class="keyword">new</span> User(&#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;)</span><br><span class="line"><span class="built_in">console</span>.log(hd);</span><br></pre></td></tr></table></figure>

<p>使用 interface 可以优化代码，同时也具有良好的代码提示</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> UserInterface &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="attr">info</span>: UserInterface</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">user: UserInterface</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.info = user</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> hd = <span class="keyword">new</span> User(&#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;)</span><br><span class="line"><span class="built_in">console</span>.log(hd);</span><br></pre></td></tr></table></figure>

<h3 id="8-6-数组"><a href="#8-6-数组" class="headerlink" title="8.6 数组"></a>8.6 数组</h3><p>对数组类型使用接口进行约束</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> zs: UserInterface = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">isLock</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ls: UserInterface = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">16</span>,</span><br><span class="line">    <span class="attr">isLock</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> users: UserInterface[] = [];</span><br><span class="line">users.push(zs, ls)</span><br><span class="line"><span class="built_in">console</span>.log(users);</span><br></pre></td></tr></table></figure>

<h3 id="8-7-枚举"><a href="#8-7-枚举" class="headerlink" title="8.7 枚举"></a>8.7 枚举</h3><p>下面使用枚举设置性别</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enum</span> SexType &#123;</span><br><span class="line">    BOY, GIRL</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> UserInterface &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">sex</span>: SexType</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hd: UserInterface = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">sex</span>: SexType.GIRL</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(hd); <span class="comment">//&#123; name: &#x27;张三&#x27;, sex: 1 &#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="8-8-支付类型案例"><a href="#8-8-支付类型案例" class="headerlink" title="8.8 支付类型案例"></a>8.8 支付类型案例</h3><p>下面是index.ts 文件的内容，通过 interface 接口来限制支付宝与微信支付的规范</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建接口（针对类中方法的接口）</span></span><br><span class="line"><span class="keyword">interface</span> PayInterace &#123;</span><br><span class="line">    handle(price: <span class="built_in">number</span>): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建支付宝支付类【遵循接口】</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AliPay</span> <span class="title">implements</span> <span class="title">PayInterace</span> </span>&#123;</span><br><span class="line">    handle(price: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;支付宝付款&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建微信支付类【遵循接口】</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WePay</span> <span class="title">implements</span> <span class="title">PayInterace</span> </span>&#123;</span><br><span class="line">    handle(price: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;微信付款&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//支付调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">payType</span>(<span class="params"><span class="keyword">type</span>: <span class="built_in">string</span>, price: <span class="built_in">number</span></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//此时pay被定义为一个对象(由类实例化出来的对象)，它的键成员是遵循接口的</span></span><br><span class="line">    <span class="keyword">let</span> pay: PayInterace</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//根据传入的参数进行支付类型的过滤【动态的创建对象】</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">type</span> == <span class="string">&#x27;alipay&#x27;</span>) &#123;</span><br><span class="line">        pay = <span class="keyword">new</span> AliPay()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        pay = <span class="keyword">new</span> WePay()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//执行支付调用函数</span></span><br><span class="line">    pay.handle(price)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后执行编译</p>
<p><code>tsc index.ts -w </code></p>
<p>界面处理 index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../pay.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;payType(&#x27;alipay&#x27;,100)&quot;</span>&gt;</span>支付1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;payType(&#x27;wepay&#x27;,200)&quot;</span>&gt;</span>支付2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>将index.ts编译好的js文件记录如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建支付宝支付类【遵循接口】</span></span><br><span class="line"><span class="keyword">var</span> AliPay = <span class="comment">/** <span class="doctag">@class </span>*/</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">AliPay</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    AliPay.prototype.handle = <span class="function"><span class="keyword">function</span> (<span class="params">price</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;\u652F\u4ED8\u5B9D\u4ED8\u6B3E&quot;</span>.concat(price));</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> AliPay;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建微信支付类【遵循接口】</span></span><br><span class="line"><span class="keyword">var</span> WePay = <span class="comment">/** <span class="doctag">@class </span>*/</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">WePay</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    WePay.prototype.handle = <span class="function"><span class="keyword">function</span> (<span class="params">price</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;\u5FAE\u4FE1\u4ED8\u6B3E&quot;</span>.concat(price));</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> WePay;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="comment">//支付调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">payType</span>(<span class="params">type, price</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//此时pay被定义为一个对象(由类实例化出来的对象)，它的键成员是遵循接口的</span></span><br><span class="line">    <span class="keyword">var</span> pay;</span><br><span class="line">    <span class="comment">//根据传入的参数进行支付类型的过滤【动态的创建对象】</span></span><br><span class="line">    <span class="keyword">if</span> (type == <span class="string">&#x27;alipay&#x27;</span>) &#123;</span><br><span class="line">        pay = <span class="keyword">new</span> AliPay();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        pay = <span class="keyword">new</span> WePay();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//执行支付调用函数</span></span><br><span class="line">    pay.handle(price);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="9-type"><a href="#9-type" class="headerlink" title="9. type"></a>9. type</h2><p>type 与 interface 非常相似，都可以描述一个对象或者函数，使用 type 用于定义类型的别名，是非常灵活的类型定义方式。</p>
<ul>
<li>使用type时使用了<code>=</code>进行赋值</li>
<li>使用interface直接进行定义</li>
</ul>
<h3 id="9-1-基本使用"><a href="#9-1-基本使用" class="headerlink" title="9.1 基本使用"></a>9.1 基本使用</h3><p>下面是使用 type 声明<strong>对象</strong>类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用type时使用了“=”进行赋值【使用接口interface没有使用”=“赋值，】</span></span><br><span class="line"><span class="keyword">type</span> User = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> hd: User = &#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br></pre></td></tr></table></figure>

<p>使用interface和type<strong>定义函数</strong>类型的区别</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用type定义函数类型</span></span><br><span class="line"><span class="keyword">type</span> Pay = <span class="function">(<span class="params">price: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">boolean</span></span><br><span class="line"><span class="keyword">const</span> wepay: Pay = <span class="function">(<span class="params">price: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`微信支付<span class="subst">$&#123;price&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wepay(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用interface定义函数类型</span></span><br><span class="line"><span class="keyword">interface</span> PayInterace &#123;</span><br><span class="line">    handle(price: <span class="built_in">number</span>): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="9-2-类型别名"><a href="#9-2-类型别名" class="headerlink" title="9.2 类型别名"></a>9.2 类型别名</h3><p>type 可以为 number、string、boolean、object 等基本类型定义别名，比如下例的 IsAdmin。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基本类型别名</span></span><br><span class="line"><span class="keyword">type</span> IsAdmin = <span class="built_in">boolean</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义联合类型</span></span><br><span class="line"><span class="keyword">type</span> Sex = <span class="string">&#x27;boy&#x27;</span> | <span class="string">&#x27;girl&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User = &#123;</span><br><span class="line">    <span class="attr">isAdmin</span>: IsAdmin,</span><br><span class="line">    <span class="attr">sex</span>: Sex</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> hd: User = &#123;</span><br><span class="line">    <span class="attr">isAdmin</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&quot;boy&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明元组</span></span><br><span class="line"><span class="keyword">const</span> users: [User] = [hd]</span><br></pre></td></tr></table></figure>

<h3 id="9-3-索引类型"><a href="#9-3-索引类型" class="headerlink" title="9.3 索引类型"></a>9.3 索引类型</h3><p>type 与 interface 在索引类型上的声明是相同的</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> User &#123;</span><br><span class="line">    [key: <span class="built_in">string</span>]: <span class="built_in">any</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> UserTYpe = &#123;</span><br><span class="line">    [key: <span class="built_in">string</span>]: <span class="built_in">any</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="9-4-声明继承"><a href="#9-4-声明继承" class="headerlink" title="9.4 声明继承"></a>9.4 声明继承</h3><p><strong>interface</strong>：<strong>同名</strong>声明将进行<strong>合并</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> User &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> User &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> hd: User = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>interface</strong>：使用 extends进行继承<strong>interface</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Admin &#123;</span><br><span class="line">    <span class="attr">role</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> User <span class="keyword">extends</span> Admin &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> hd: User = &#123;</span><br><span class="line">    <span class="attr">role</span>: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>interface</strong>：使用extends 继承 <strong>type</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Admin = &#123;</span><br><span class="line">    <span class="attr">role</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> User <span class="keyword">extends</span> Admin &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> hd: User = &#123;</span><br><span class="line">    <span class="attr">role</span>: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>type</strong>：不允许同名</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> User &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>type</strong>：使用<code>&amp; </code> 合并interface </p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Name &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Age &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> User = Name &amp; Age</span><br></pre></td></tr></table></figure>

<p> <strong>type</strong>：使用<code>&amp; </code> 合并type</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Admin = &#123;</span><br><span class="line">    <span class="attr">role</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">isSuperAdmin</span>: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Member = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User = Admin &amp; Member;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hd: User = &#123;</span><br><span class="line">    <span class="attr">isSuperAdmin</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">role</span>: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>type</strong>：使用<code>|</code>满足任何一个 type 声明即可</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Admin = &#123;</span><br><span class="line">    <span class="attr">role</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">isSuperAdmin</span>: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Member = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User = Admin | Member;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hd: User = &#123;</span><br><span class="line">    <span class="attr">role</span>: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="9-5-implements"><a href="#9-5-implements" class="headerlink" title="9.5 implements"></a>9.5 implements</h3><p>class 可以使用 implements 来实现 type 或 interface</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Member = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="title">implements</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="四、泛型"><a href="#四、泛型" class="headerlink" title="四、泛型"></a>四、泛型</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>泛型指<strong>使用时才定义类型</strong>，即<u>类型可以像参数一样定义</u>，主要解决类、接口、函数的复用性，让它们可以处理多种类型。</p>
<p>简而言之，泛型的作用就是将类型进行参数化，减少了重复定义类型的工作</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>&lt;<span class="title">T</span>&gt;(<span class="params">args:T</span>):<span class="title">T</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> args</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//传入boolean就相当于是将T进行了替换，所有包含T的位置都将定义为布尔类型</span></span><br><span class="line"><span class="keyword">let</span> test=run&lt;<span class="built_in">boolean</span>&gt;(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure>

<h2 id="2-基本使用"><a href="#2-基本使用" class="headerlink" title="2. 基本使用"></a>2. 基本使用</h2><p>下面示例返回值类型是 any，这不是我们想要的，因为我们想要具体返回类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dump</span>(<span class="params">arg: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> hd = dump(<span class="string">&#x27;张三&#x27;</span>) <span class="comment">//类型为 any</span></span><br><span class="line"><span class="keyword">let</span> xj = dump(<span class="literal">true</span>) <span class="comment">//类型为 any</span></span><br></pre></td></tr></table></figure>

<p>使用了泛型定义后，返回值即为明确的类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dump</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> hd = dump&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;张三&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>如果<strong>调用时</strong>不指定类型系统也会自动推断类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dump</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> hd = dump(<span class="string">&#x27;张三&#x27;</span>) <span class="comment">//hd 类型为 string</span></span><br></pre></td></tr></table></figure>

<h2 id="3-类型继承"><a href="#3-类型继承" class="headerlink" title="3. 类型继承"></a>3. 类型继承</h2><p>下面的代码是不严谨的，我们不需要处理数字，因为数字没有 length 属性，同时我们希望返回类型不是 any</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>(<span class="params">arg: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg.length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getLength(<span class="string">&#x27;houdunren.com&#x27;</span>)); <span class="comment">//13</span></span><br><span class="line"><span class="built_in">console</span>.log(getLength([<span class="string">&#x27;张三&#x27;</span>])); <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(getLength(<span class="number">18</span>)); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>

<p>泛型是不确定的类型，所以下面读取 length 属性将报错</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg.length; <span class="comment">//类型“T”上不存在属性“length”</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以通过继承来解决这个问题</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">string</span>&gt;(<span class="params">arg: T</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg.length; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上例只能处理字符串，不能处理数组等包含 length 的数据，我们可以通过继承 extends 继承，让泛型定义包含 length 属性</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>&lt;<span class="title">T</span> <span class="title">extends</span> </span>&#123; length: <span class="built_in">number</span> &#125;&gt;(arg: T): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> arg.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//或使用 interface 或 type</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> LengthType = &#123; <span class="attr">length</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLengthAttribute</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">lengthType</span>&gt;(<span class="params">arg: T</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果你的类型只是字符串或数组，也可以使用联合类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">string</span> | <span class="title">any</span>[]&gt;(<span class="params">arg: T</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg.length</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getLength(<span class="string">&#x27;houdunren.com&#x27;</span>))</span><br><span class="line"><span class="built_in">console</span>.log(getLength([<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>]))</span><br></pre></td></tr></table></figure>

<p>TS也会自动推断，比如下面参数是 T[]，TS 会推断为数组类型，所以这时候是存在 length 的，不会报错</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T[]</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg.length;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>将泛型理解为<strong>动态类型</strong>，泛型最终也会是一个类型，所以使用方式与我们其他类型一样的。</p>
<p>比如下面的返回值类型，我们就返回了一个元组，包括泛型与数值类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">string</span>&gt;(<span class="params">arg: T</span>): [<span class="title">T</span>, <span class="title">number</span>] </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [arg, arg.length];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> hd = getLength&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;houdunren.com&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="4-类使用泛型"><a href="#4-类使用泛型" class="headerlink" title="4. 类使用泛型"></a>4. 类使用泛型</h2><p>下面是对数值与字符串类型的集合进行管理，因为业务是一样的，所以下面的实现是重复的</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义管理数值型类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CollectionNumber</span> </span>&#123;</span><br><span class="line">    <span class="attr">data</span>: <span class="built_in">number</span>[] = []</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="title">push</span>(<span class="params">...items: <span class="built_in">number</span>[]</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data.push(...items)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="title">shift</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.data.shift()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义管理字符型类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CollectionString</span> </span>&#123;</span><br><span class="line">    <span class="attr">data</span>: <span class="built_in">string</span>[] = []</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="title">push</span>(<span class="params">...items: <span class="built_in">string</span>[]</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data.push(...items)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="title">shift</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.data.shift()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numberCollection = <span class="keyword">new</span> CollectionNumber()</span><br><span class="line">numberCollection.push(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stringCollection = <span class="keyword">new</span> CollectionString()</span><br><span class="line">stringCollection.push(<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(stringCollection.shift());</span><br></pre></td></tr></table></figure>

<p>上例使用泛型来控制就好多了</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Collection</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="attr">data</span>: T[] = []</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="title">push</span>(<span class="params">...items: T[]</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data.push(...items)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="title">shift</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.data.shift()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> collections = <span class="keyword">new</span> Collection&lt;<span class="built_in">number</span>&gt;()</span><br><span class="line">collections.push(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User = &#123; <span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="keyword">const</span> hd: User = &#123; <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="keyword">const</span> userCollection = <span class="keyword">new</span> Collection&lt;User&gt;()</span><br><span class="line"></span><br><span class="line">userCollection.push(hd)</span><br><span class="line"><span class="built_in">console</span>.log(userCollection.shift());</span><br></pre></td></tr></table></figure>

<h2 id="5-接口结合泛型"><a href="#5-接口结合泛型" class="headerlink" title="5. 接口结合泛型"></a>5. 接口结合泛型</h2><p>下面的代码是不稳定的，我们的意图是传递用户数据，但没有类型约束情况下，可以传递任何类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">protected</span> _user</span>)</span> &#123; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>._user</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> User(&#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span> &#125;)</span><br><span class="line"><span class="built_in">console</span>.log(instance.get());</span><br></pre></td></tr></table></figure>

<p>对类使用泛型处理后，可以保证传递与返回值的类型，并具有良好的代码提示</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">protected</span> _user: T</span>)</span> &#123; &#125;</span><br><span class="line">    <span class="keyword">public</span> get(): T &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>._user</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> UserInterface &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> User&lt;UserInterface&gt;(&#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;)</span><br><span class="line"><span class="built_in">console</span>.log(instance.get().age);</span><br></pre></td></tr></table></figure>

<h2 id="6-接口"><a href="#6-接口" class="headerlink" title="6. 接口"></a>6. 接口</h2><p>下面对接口的类型使用泛型定义，比如 isLock 可以为 <code>number</code> 或<code>boolean</code>，并对文章的评论内容进行定义。</p>
<p>这样处理代码会有严格类型约束，并有良好的代码提示</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文章接口</span></span><br><span class="line"><span class="keyword">interface</span> articleInterface&lt;T, B&gt; &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">isLock</span>: B,</span><br><span class="line">    <span class="attr">comments</span>: T[],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//评论类型</span></span><br><span class="line"><span class="keyword">type</span> CommentType = &#123;</span><br><span class="line">    <span class="attr">comment</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义文章数据包含评论内容</span></span><br><span class="line"><span class="keyword">const</span> hd: articleInterface&lt;CommentType, <span class="built_in">boolean</span>&gt; = &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;TypeScript入门&#x27;</span>,</span><br><span class="line">    <span class="attr">isLock</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">comments</span>: [</span><br><span class="line">        &#123; <span class="attr">comment</span>: <span class="string">&#x27;这是一个评论&#x27;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(hd);</span><br></pre></td></tr></table></figure>

<h2 id="7-值类型"><a href="#7-值类型" class="headerlink" title="7. 值类型"></a>7. 值类型</h2><p>下面解构得到的变量类型不是具体类型，面是数组类型，比如变量 y 的类型是 <em>string</em> | (() =&gt; <em>void</em>)</p>
<p>这在写项目时是不安全的，因为可以将 y 随时修改为字符串，同时也不会有友好的代码提示</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hd</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> b = (x: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> x + y</span><br><span class="line">    <span class="keyword">return</span> [a, b]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [x, y] = hd() <span class="comment">//变量 y 的类型为 string | (() =&gt; void)</span></span><br></pre></td></tr></table></figure>

<p>使用 <code>as const</code> 就可以很高效的解决上面的问题，可以得到具体的类型，来得到更安全的代码，同时会有更好的代码提示</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hd</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">  <span class="keyword">let</span> b = (): <span class="function"><span class="params">void</span> =&gt;</span> &#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> [a, b] <span class="keyword">as</span> <span class="keyword">const</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [x, y] = hd() <span class="comment">//变量 y 的类型为 () =&gt; void</span></span><br></pre></td></tr></table></figure>

<p>也可以使用<strong>泛型</strong>来得到具体的值类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义函数逻辑：传入参数（单参数/多参数）返回其组成的数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">any</span>[]&gt;(<span class="params">...args: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> args;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hd</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> a: <span class="built_in">string</span> = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> b: <span class="built_in">number</span> = <span class="number">2090</span></span><br><span class="line">    <span class="comment">//返回组成的数组</span></span><br><span class="line">    <span class="keyword">return</span> f(a, b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//【r,e有相应的代码提示】</span></span><br><span class="line"><span class="keyword">const</span> [r, e] = hd()</span><br></pre></td></tr></table></figure>

<p>上述编译完之后的js代码以下：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> _i = <span class="number">0</span>; _i &lt; <span class="built_in">arguments</span>.length; _i++) &#123;</span><br><span class="line">        args[_i] = <span class="built_in">arguments</span>[_i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> args;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hd</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">2090</span>;</span><br><span class="line">    <span class="keyword">return</span> f(a, b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> _a = hd(),</span><br><span class="line">    r = _a[<span class="number">0</span>],</span><br><span class="line">    e = _a[<span class="number">1</span>];</span><br><span class="line"><span class="built_in">console</span>.log(r, e);</span><br></pre></td></tr></table></figure>

<h1 id="五、装饰器"><a href="#五、装饰器" class="headerlink" title="五、装饰器"></a>五、装饰器</h1><p>装饰器（Decorators）为我们在类的声明及成员上通过编程语法扩展其功能，装饰器以<strong>函数</strong>的形式声明。</p>
<h2 id="1-环境配置"><a href="#1-环境配置" class="headerlink" title="1. 环境配置"></a>1. 环境配置</h2><p>首先创建配置文件 tsconfig.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tsc --init</span><br></pre></td></tr></table></figure>

<p>解注释以下两条配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;experimentalDecorators&quot;: true,                   /* Enable experimental support for TC39 stage 2 draft decorators. */</span><br><span class="line">&quot;emitDecoratorMetadata&quot;: true,      			/* Emit design-type metadata for decorated declarations in source files. */</span><br></pre></td></tr></table></figure>

<p>运行文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tsc -w</span><br></pre></td></tr></table></figure>

<h2 id="2-类装饰器"><a href="#2-类装饰器" class="headerlink" title="2. 类装饰器"></a>2. 类装饰器</h2><h3 id="2-1-原型对象"><a href="#2-1-原型对象" class="headerlink" title="2.1 原型对象"></a>2.1 原型对象</h3><p>因为可以装饰器上得到构造函数，所以可以通过原型对象来添加方法或属性，供实例对象使用</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过ClassDecorator关键字来声明类装饰器类型，其中类装饰器参数必须是构造函数， 向构造函数的原型追加属性或方法</span></span><br><span class="line"><span class="keyword">const</span> MoveDecorator: ClassDecorator = <span class="function">(<span class="params">constructor: <span class="built_in">Function</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title">constructor</span>.<span class="title">prototype</span>.<span class="title">hd</span> = &#x27;张三&#x27;</span><br><span class="line">    <span class="title">constructor</span>.<span class="title">prototype</span>.<span class="title">getPosition</span> = (<span class="params"></span>): &#123; x: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span> &#125; =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">100</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用@符号直接使用类装饰器</span></span><br><span class="line"><span class="meta">@MoveDecorator</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tank</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;tank 构造函数&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> tank = <span class="keyword">new</span> Tank()</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过类装饰器装饰后且实例化后即可使用构造函数原型上的属性或方法</span></span><br><span class="line"><span class="built_in">console</span>.log(tank.getPosition());</span><br></pre></td></tr></table></figure>

<p>不过在编译阶段会提示错误，但这不影响编译生成 js 文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Property &#x27;getPosition&#x27; does not exist on type &#x27;Tank&#x27;</span><br></pre></td></tr></table></figure>

<p>通过为类添加默认属性来解决这个错误</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tank</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> hd: <span class="built_in">string</span> | <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="title">getPosition</span>(<span class="params"></span>)</span> &#123; &#125;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;tank 构造函数&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者在调用时使用断言处理</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> tank = <span class="keyword">new</span> Tank()</span><br><span class="line"><span class="built_in">console</span>.log((tank <span class="keyword">as</span> <span class="built_in">any</span>).getPosition());</span><br><span class="line"><span class="comment">//或使用以下方式断言</span></span><br><span class="line"><span class="built_in">console</span>.log((&lt;<span class="built_in">any</span>&gt;tank).getPosition());</span><br></pre></td></tr></table></figure>

<h3 id="2-2-语法糖"><a href="#2-2-语法糖" class="headerlink" title="2.2 语法糖"></a>2.2 语法糖</h3><p>不需要把装饰器想的很复杂，下面是同样实现了装饰器的功能。只不过是我们人为调用函数，所以可以把装饰器理解为这种调用的语法糖，这样理解就简单些。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> MoveDecorator: ClassDecorator = <span class="function">(<span class="params">constructor: <span class="built_in">Function</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title">constructor</span>.<span class="title">prototype</span>.<span class="title">hd</span> = &#x27;后盾人&#x27;</span><br><span class="line">    <span class="title">constructor</span>.<span class="title">prototype</span>.<span class="title">getPosition</span> = (<span class="params"></span>): &#123; x: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span> &#125; =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">100</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//原本这里是使用@符号来使用装饰器的（可以在后面直接人为进行使用装饰器）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tank</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;tank 构造函数&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MoveDecorator(Tank);</span><br><span class="line"><span class="keyword">const</span> tank = <span class="keyword">new</span> Tank()</span><br><span class="line"><span class="built_in">console</span>.log(tank.getPosition());</span><br></pre></td></tr></table></figure>

<h3 id="2-3-装饰器叠加"><a href="#2-3-装饰器叠加" class="headerlink" title="2.3 装饰器叠加"></a>2.3 装饰器叠加</h3><p>装饰器可以叠加使用，下面是定义了位置管理与音乐播放装饰器</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//位置控制</span></span><br><span class="line"><span class="keyword">const</span> MoveDecorator: ClassDecorator = (<span class="title">constructor</span>: <span class="title">Function</span>): <span class="title">void</span> =&gt; &#123;</span><br><span class="line">    <span class="title">constructor</span>.<span class="title">prototype</span>.<span class="title">hd</span> = &#x27;后盾人&#x27;</span><br><span class="line">    <span class="title">constructor</span>.<span class="title">prototype</span>.<span class="title">getPosition</span> = (<span class="params"></span>): <span class="title">void</span> =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;获取坐标&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//音乐播放</span></span><br><span class="line"><span class="keyword">const</span> MusicDecorator: ClassDecorator = (<span class="title">constructor</span>: <span class="title">Function</span>): <span class="title">void</span> =&gt; &#123;</span><br><span class="line">    <span class="title">constructor</span>.<span class="title">prototype</span>.<span class="title">playMusic</span> = (<span class="params"></span>): <span class="title">void</span> =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;播放音乐&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MoveDecorator</span></span><br><span class="line"><span class="meta">@MusicDecorator</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tank</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> tank = <span class="keyword">new</span> Tank();</span><br><span class="line">(&lt;<span class="built_in">any</span>&gt;tank).playMusic();</span><br><span class="line">(&lt;<span class="built_in">any</span>&gt;tank).getPosition();</span><br></pre></td></tr></table></figure>

<h3 id="2-4-多类复用"><a href="#2-4-多类复用" class="headerlink" title="2.4 多类复用"></a>2.4 多类复用</h3><p>定义好装饰器后，可以为多个类复用，比如下面的玩家与坦克</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//位置控制</span></span><br><span class="line"><span class="keyword">const</span> MoveDecorator: ClassDecorator = (<span class="title">constructor</span>: <span class="title">Function</span>): <span class="title">void</span> =&gt; &#123;</span><br><span class="line">    <span class="title">constructor</span>.<span class="title">prototype</span>.<span class="title">hd</span> = &#x27;后盾人&#x27;</span><br><span class="line">    <span class="title">constructor</span>.<span class="title">prototype</span>.<span class="title">getPosition</span> = (<span class="params"></span>): <span class="title">void</span> =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;获取坐标&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//音乐播放</span></span><br><span class="line"><span class="keyword">const</span> MusicDecorator: ClassDecorator = (<span class="title">constructor</span>: <span class="title">Function</span>): <span class="title">void</span> =&gt; &#123;</span><br><span class="line">    <span class="title">constructor</span>.<span class="title">prototype</span>.<span class="title">playMusic</span> = (<span class="params"></span>): <span class="title">void</span> =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;播放音乐&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MoveDecorator</span></span><br><span class="line"><span class="meta">@MusicDecorator</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tank</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> tank = <span class="keyword">new</span> Tank();</span><br><span class="line">(&lt;<span class="built_in">any</span>&gt;tank).playMusic();</span><br><span class="line">(&lt;<span class="built_in">any</span>&gt;tank).getPosition();</span><br><span class="line"></span><br><span class="line"><span class="meta">@MoveDecorator</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> xj: Player = <span class="keyword">new</span> Player();</span><br><span class="line">(xj <span class="keyword">as</span> <span class="built_in">any</span>).getPosition()</span><br></pre></td></tr></table></figure>

<h3 id="2-5-响应消息"><a href="#2-5-响应消息" class="headerlink" title="2.5 响应消息"></a>2.5 响应消息</h3><p>下面是将网站中的响应消息工作，使用装饰器进行复用。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//消息响应</span></span><br><span class="line"><span class="keyword">const</span> MessageDecorator: ClassDecorator = (<span class="title">constructor</span>: <span class="title">Function</span>): <span class="title">void</span> =&gt; &#123;</span><br><span class="line">    <span class="title">constructor</span>.<span class="title">prototype</span>.<span class="title">message</span> = (<span class="params">message: <span class="built_in">string</span></span>): <span class="title">void</span> =&gt; &#123;</span><br><span class="line">        <span class="built_in">document</span>.body.insertAdjacentHTML(<span class="string">&#x27;afterbegin&#x27;</span>, <span class="string">`&lt;h2&gt;<span class="subst">$&#123;message&#125;</span>&lt;/h2&gt;`</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MessageDecorator</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">login</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;登录逻辑&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.message(<span class="string">&#x27;登录成功&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> controller = <span class="keyword">new</span> LoginController();</span><br><span class="line"></span><br><span class="line">controller.login()</span><br></pre></td></tr></table></figure>

<h2 id="3-装饰器工厂"><a href="#3-装饰器工厂" class="headerlink" title="3. 装饰器工厂"></a>3. 装饰器工厂</h2><p>有时有需要根据条件返回不同的装饰器，这时可以使用装饰器工厂来解决。可以在类、属性、参数等装饰器中使用装饰器工厂。</p>
<p>下例根据 MusicDecorator 工厂函数传递的不同参数，返回不同装饰器函数。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个工厂函数，返回一个装饰器</span></span><br><span class="line"><span class="keyword">const</span> MusicDecorator = (<span class="keyword">type</span>: <span class="built_in">string</span>): <span class="function"><span class="params">ClassDecorator</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="keyword">type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;player&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="function">(<span class="params">constructor: <span class="built_in">Function</span></span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="title">constructor</span>.<span class="title">prototype</span>.<span class="title">playMusic</span> = (<span class="params"></span>): <span class="title">void</span> =&gt; &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">`播放【海阔天空】音乐`</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="function">(<span class="params">constructor: <span class="built_in">Function</span></span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="title">constructor</span>.<span class="title">prototype</span>.<span class="title">playMusic</span> = (<span class="params"></span>): <span class="title">void</span> =&gt; &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">`播放【喜洋洋】音乐`</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MusicDecorator</span>(<span class="string">&#x27;tank&#x27;</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tank</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> tank = <span class="keyword">new</span> Tank();</span><br><span class="line">(&lt;<span class="built_in">any</span>&gt;tank).playMusic();</span><br><span class="line"></span><br><span class="line"><span class="meta">@MusicDecorator</span>(<span class="string">&#x27;player&#x27;</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> xj: Player = <span class="keyword">new</span> Player();</span><br><span class="line">(xj <span class="keyword">as</span> <span class="built_in">any</span>).playMusic()</span><br></pre></td></tr></table></figure>

<h2 id="4-方法装饰器"><a href="#4-方法装饰器" class="headerlink" title="4. 方法装饰器"></a>4. 方法装饰器</h2><p>装饰器也可以修改方法，<strong>方法装饰器函数</strong>参数说明如下：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>参数一</td>
<td>【普通方法】===&gt;构造函数的原型对象 Prototype，【静态方法】===&gt;构造函数</td>
</tr>
<tr>
<td>参数二</td>
<td>方法名称</td>
</tr>
<tr>
<td>参数三</td>
<td>属性描述</td>
</tr>
</tbody></table>
<p><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/%E6%96%B9%E6%B3%95%E8%A3%85%E9%A5%B0%E5%99%A8%E5%8F%82%E6%95%B0.png" alt="image-20220105205011082"></p>
<h3 id="4-1-基本使用"><a href="#4-1-基本使用" class="headerlink" title="4.1 基本使用"></a>4.1 基本使用</h3><p>下面使用 <code>ShowDecorator</code> 装饰来修改 show 方法</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用MethodDecorator进行声明方法装饰器，其中第三个参数使用PropertyDescriptor进行声明</span></span><br><span class="line"><span class="keyword">const</span> ShowDecorator: MethodDecorator = (target: <span class="built_in">Object</span>, <span class="attr">propertyKey</span>: <span class="built_in">string</span> | <span class="built_in">Symbol</span>, <span class="attr">descriptor</span>: PropertyDescriptor): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//第一个参数可以使用原型追加属性（例如这里target.name=&quot;张三&quot;），那么此时凡是使用了该方法装饰器的类实例化出来的对象都将拥有此属性</span></span><br><span class="line">    <span class="comment">//第三个参数的value值就是要定义的方法【如果重新赋值为一个函数的话就会将原来的方法取代，如果用一个变量来接收的话则可直调用】</span></span><br><span class="line">    descriptor.value = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Hello World&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hd</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ShowDecorator</span></span><br><span class="line">    <span class="function"><span class="title">show</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;show method&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> Hd;</span><br><span class="line">instance.show()<span class="comment">//Hello World</span></span><br></pre></td></tr></table></figure>

<p>下面是修改方法的属性描述writable为 false，这时将不允许修改方法。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ShowDecorator: MethodDecorator = (target: <span class="built_in">Object</span>, <span class="attr">propertyKey</span>: <span class="built_in">string</span> | <span class="built_in">Symbol</span>, <span class="attr">descriptor</span>: PropertyDescriptor): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">    descriptor.writable = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hd</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ShowDecorator</span></span><br><span class="line">    <span class="function"><span class="title">show</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">33</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> Hd;</span><br><span class="line">instance.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">//装饰器修改了 writable 描述，所以不能重写函数</span></span><br><span class="line">instance.show = <span class="function">() =&gt;</span> &#123; &#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-静态方法"><a href="#4-2-静态方法" class="headerlink" title="4.2 静态方法"></a>4.2 静态方法</h3><p>静态方法使用装饰器与原型方法相似，在处理静态方法时装饰器的第一个参数是<strong>构造函数</strong>。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ShowDecorator: MethodDecorator = (target: <span class="built_in">Object</span>, <span class="attr">propertyKey</span>: <span class="built_in">string</span> | <span class="built_in">Symbol</span>, <span class="attr">descriptor</span>: PropertyDescriptor): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">    descriptor.value = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;houdunren.com&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hd</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ShowDecorator</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">show</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;show method&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Hd.show()</span><br></pre></td></tr></table></figure>

<h3 id="4-3-代码高亮"><a href="#4-3-代码高亮" class="headerlink" title="4.3 代码高亮"></a>4.3 代码高亮</h3><p>下面使用装饰器模拟代码高亮</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> highlightDecorator: MethodDecorator = (target: <span class="built_in">object</span>, <span class="attr">propertyKey</span>: <span class="built_in">any</span>, <span class="attr">descriptor</span>: PropertyDescriptor): <span class="function"><span class="params">any</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="comment">//保存原来的方法</span></span><br><span class="line">    <span class="keyword">const</span> method = descriptor.value;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//重新定义原型方法</span></span><br><span class="line">    descriptor.value = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`&lt;div style=&quot;color:red&quot;&gt;<span class="subst">$&#123;method()&#125;</span>&lt;/div&gt;`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@highlightDecorator</span></span><br><span class="line">    <span class="function"><span class="title">response</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Hello World&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> User().response());</span><br></pre></td></tr></table></figure>

<h3 id="4-4-延迟执行"><a href="#4-4-延迟执行" class="headerlink" title="4.4 延迟执行"></a>4.4 延迟执行</h3><p>下面是延迟执行方法的装饰器，装饰器参数是延迟的时间，达到时间后才执行方法。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> SleepDecorator: MethodDecorator = <span class="function">(<span class="params">target: <span class="built_in">Object</span>, propertyKey: <span class="built_in">string</span> | symbol, descriptor: PropertyDescriptor</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> method = descriptor.value</span><br><span class="line">  descriptor.value = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      method()</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="meta">@SleepDecorator</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="title">response</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;houdunren.com&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> User().response()</span><br></pre></td></tr></table></figure>

<p>下面使用装饰器工厂定义延迟时间</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回一个装饰器函数</span></span><br><span class="line"><span class="keyword">const</span> SleepDecorator =</span><br><span class="line">  (times: <span class="built_in">number</span>): <span class="function"><span class="params">MethodDecorator</span> =&gt;</span></span><br><span class="line">  <span class="function">(<span class="params">...args: <span class="built_in">any</span>[]</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [, , descriptor] = args</span><br><span class="line">    <span class="keyword">const</span> method = descriptor.value</span><br><span class="line">    descriptor.value = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        method()</span><br><span class="line">      &#125;, times)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="meta">@SleepDecorator</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="title">response</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;houdunren.com&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> User().response()</span><br></pre></td></tr></table></figure>

<h3 id="4-5-自定义错误"><a href="#4-5-自定义错误" class="headerlink" title="4.5 自定义错误"></a>4.5 自定义错误</h3><p>下面是使用方法装饰器实现自定义错误</p>
<ul>
<li>任何方法使用 @ErrorDecorator 装饰器都可以实现自定义错误输出</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ErrorDecorator: MethodDecorator = (target: <span class="built_in">Object</span>, <span class="attr">propertyKey</span>: <span class="built_in">string</span> | <span class="built_in">Symbol</span>, <span class="attr">descriptor</span>: PropertyDescriptor): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> method = descriptor.value;</span><br><span class="line">    descriptor.value = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            method()</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error: <span class="built_in">any</span>) &#123;</span><br><span class="line">            <span class="comment">//console.log()函数第一个参数%c后面跟文字， 第二个参数表示 css 样式</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`%c这是一次尝试`</span>, <span class="string">&quot;color:green; font-size:20px;&quot;</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`%c<span class="subst">$&#123;error.message&#125;</span>`</span>, <span class="string">&quot;color:red;font-size:16px;&quot;</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`%c<span class="subst">$&#123;error.stack&#125;</span>`</span>, <span class="string">`color:blue;font-size:12px;`</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hd</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ErrorDecorator</span></span><br><span class="line">    <span class="function"><span class="title">show</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;运行失败&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> Hd;</span><br><span class="line">instance.show()</span><br></pre></td></tr></table></figure>

<p>对上面的例子使用装饰器工厂来自定义消息内容</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ErrorDecorator = <span class="function">(<span class="params">message: <span class="built_in">string</span>, title: <span class="built_in">string</span> = <span class="string">&#x27;Hi&#x27;</span></span>) =&gt;</span> &lt;MethodDecorator&gt;(target: <span class="built_in">Object</span>, <span class="attr">propertyKey</span>: <span class="built_in">string</span> | <span class="built_in">Symbol</span>, <span class="attr">descriptor</span>: PropertyDescriptor): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> method = descriptor.value;</span><br><span class="line">    descriptor.value = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            method()</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error: <span class="built_in">any</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`%c，<span class="subst">$&#123;title || <span class="string">`Hello World`</span>&#125;</span>`</span>, <span class="string">&quot;color:green; font-size:20px;&quot;</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`%c<span class="subst">$&#123;message || error.message&#125;</span>`</span>, <span class="string">&quot;color:red;font-size:16px;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hd</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ErrorDecorator</span>(<span class="string">&#x27;Oh! 出错了&#x27;</span>, <span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="title">show</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;运行失败&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> Hd;</span><br><span class="line">instance.show()</span><br></pre></td></tr></table></figure>

<h3 id="4-6-登入验证"><a href="#4-6-登入验证" class="headerlink" title="4.6 登入验证"></a>4.6 登入验证</h3><p>本例体验装饰器模拟用户登录判断，如果用户的 isLogin 为 false，则跳转到登录页面 <code>1.login.html</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用户资料与登录状态</span></span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;向军&#x27;</span>,</span><br><span class="line">    <span class="attr">isLogin</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> AccessDecorator: MethodDecorator = (target: <span class="built_in">Object</span>, <span class="attr">propertyKey</span>: <span class="built_in">string</span> | symbol, <span class="attr">descriptor</span>: PropertyDescriptor): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> method = descriptor.value;</span><br><span class="line">    descriptor.value = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//登录的用户执行方法</span></span><br><span class="line">        <span class="keyword">if</span> (user.isLogin === <span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">//书写return直接退出函数</span></span><br><span class="line">            <span class="keyword">return</span> method()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//未登录用户跳转到登录页面</span></span><br><span class="line">        alert(<span class="string">&#x27;你没有访问权限&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> location.href = <span class="string">&#x27;1.login.html&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span> </span>&#123;</span><br><span class="line">    <span class="meta">@AccessDecorator</span></span><br><span class="line">    <span class="function"><span class="title">show</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;播放视频&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AccessDecorator</span></span><br><span class="line">    <span class="function"><span class="title">store</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;保存视频&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Article().store();</span><br></pre></td></tr></table></figure>

<h3 id="4-7-权限验证"><a href="#4-7-权限验证" class="headerlink" title="4.7 权限验证"></a>4.7 权限验证</h3><p>下面是使用装饰器对用户访问权限的验证</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用户类型</span></span><br><span class="line"><span class="keyword">type</span> userType = &#123; <span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">isLogin</span>: <span class="built_in">boolean</span>, <span class="attr">permissions</span>: <span class="built_in">string</span>[] &#125;</span><br><span class="line"><span class="comment">//用户数据 </span></span><br><span class="line"><span class="keyword">const</span> user: userType = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">isLogin</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">permissions</span>: [<span class="string">&#x27;store&#x27;</span>, <span class="string">&#x27;manage&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//权限验证装饰器工厂</span></span><br><span class="line"><span class="keyword">const</span> AccessDecorator = (keys: <span class="built_in">string</span>[]): <span class="function"><span class="params">MethodDecorator</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">target: <span class="built_in">Object</span>, propertyKey: <span class="built_in">string</span> | symbol, descriptor: PropertyDescriptor</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//先保存一下原来的方法</span></span><br><span class="line">        <span class="keyword">const</span> method = descriptor.value</span><br><span class="line">        <span class="comment">//定义校验是否有效函数，返回值为布尔值</span></span><br><span class="line">        <span class="keyword">const</span> validate = <span class="function">() =&gt;</span> keys.every(<span class="function"><span class="params">k</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> user.permissions.includes(k)</span><br><span class="line">        &#125;)</span><br><span class="line">        descriptor.value = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (user.isLogin === <span class="literal">true</span> &amp;&amp; validate()) &#123;</span><br><span class="line">                alert(<span class="string">&#x27;验证通过&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> method()</span><br><span class="line">            &#125;</span><br><span class="line">            alert(<span class="string">&#x27;验证失败&#x27;</span>)</span><br><span class="line">            <span class="comment">// location.href = &#x27;login.html&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">show</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;显示文章&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AccessDecorator</span>([<span class="string">&#x27;store&#x27;</span>, <span class="string">&#x27;manage&#x27;</span>])</span><br><span class="line">    <span class="function"><span class="title">store</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;保存文章&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Article().store()</span><br></pre></td></tr></table></figure>

<h3 id="4-8-网络异步请求"><a href="#4-8-网络异步请求" class="headerlink" title="4.8 网络异步请求"></a>4.8 网络异步请求</h3><p>下面是模拟异步请求的示例</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> RequestDecorator = (url: <span class="built_in">string</span>): <span class="function"><span class="params">MethodDecorator</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">target: <span class="built_in">Object</span>, propertyKey: <span class="built_in">string</span> | symbol, descriptor: PropertyDescriptor</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> method = descriptor.value</span><br><span class="line">    <span class="comment">// axios.get(url).then()</span></span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>&lt;<span class="built_in">any</span>[]&gt;(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        resolve([&#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span> &#125;])</span><br><span class="line">      &#125;, <span class="number">2000</span>)</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">users</span> =&gt;</span> &#123;</span><br><span class="line">      method(users)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="meta">@RequestDecorator</span>(<span class="string">&#x27;https://www.houdunren.com/api/user&#x27;</span>)</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="title">all</span>(<span class="params">users: <span class="built_in">any</span>[]</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(users)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-属性装饰器"><a href="#5-属性装饰器" class="headerlink" title="5. 属性装饰器"></a>5. 属性装饰器</h2><p>装饰器函数参数说明</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>参数一</td>
<td>普通方法是构造函数的原型对象 Prototype，静态方法是构造函数</td>
</tr>
<tr>
<td>参数二</td>
<td>属性名称</td>
</tr>
</tbody></table>
<h3 id="5-1-基本使用"><a href="#5-1-基本使用" class="headerlink" title="5.1  基本使用"></a>5.1  基本使用</h3><p>属性装饰器的定义方式</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用PropertyDecorator关键字进行声明属性装饰器【只接收两个参数】</span></span><br><span class="line"><span class="keyword">const</span> PropDecorator: PropertyDecorator = (target: <span class="built_in">Object</span>, <span class="attr">propertyKey</span>: <span class="built_in">string</span> | symbol): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(target, propertyKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hd</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PropDecorator</span></span><br><span class="line">    <span class="keyword">public</span> name: <span class="built_in">string</span> | <span class="literal">undefined</span> = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-2-访问器"><a href="#5-2-访问器" class="headerlink" title="5.2 访问器"></a>5.2 访问器</h3><p>下面是定义将属性name 的值转为小写的装饰器</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PropDecorator: PropertyDecorator = (target: <span class="built_in">Object</span>, <span class="attr">propertyKey</span>: <span class="built_in">string</span> | symbol): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//存储</span></span><br><span class="line">    <span class="keyword">let</span> value: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(target, propertyKey, &#123;</span><br><span class="line">        <span class="attr">set</span>: <span class="function">(<span class="params">v: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">        		value = v</span><br><span class="line">    		&#125;,</span><br><span class="line">        <span class="attr">get</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        		<span class="keyword">return</span> value.toLowerCase()</span><br><span class="line">    		&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hd</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PropDecorator</span></span><br><span class="line">    <span class="keyword">public</span> name: <span class="built_in">string</span> | <span class="literal">undefined</span></span><br><span class="line">    <span class="function"><span class="title">show</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">33</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> Hd;</span><br><span class="line">instance.name = <span class="string">&#x27;HouDunRen&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(instance.name);</span><br></pre></td></tr></table></figure>

<h3 id="5-3-随机色块"><a href="#5-3-随机色块" class="headerlink" title="5.3 随机色块"></a>5.3 随机色块</h3><p>使用属性访问器定义随机颜色，并绘制色块，下面是 hd.ts 的内容</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> RandomColorDecorator: PropertyDecorator = (target: <span class="built_in">Object</span>, <span class="attr">propertyKey</span>: <span class="built_in">string</span> | symbol): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> colors: <span class="built_in">string</span>[] = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;#333333&#x27;</span>];</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(target, propertyKey, &#123;</span><br><span class="line">        <span class="attr">get</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> colors[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * colors.length)]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hd</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RandomColorDecorator</span></span><br><span class="line">    <span class="keyword">public</span> color: <span class="built_in">string</span> | <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="title">draw</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">document</span>.body.insertAdjacentHTML(<span class="string">&#x27;beforeend&#x27;</span>, <span class="string">`&lt;div style=&quot;width:200px;height:200px;background-color:<span class="subst">$&#123;<span class="built_in">this</span>.color&#125;</span>&quot;&gt;houdunren.com 向军&lt;/div&gt;`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Hd().draw()</span><br></pre></td></tr></table></figure>

<p>下面是 hd.html 的模板内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-参数装饰器"><a href="#6-参数装饰器" class="headerlink" title="6. 参数装饰器"></a>6. 参数装饰器</h2><p>可以对方法的参数设置装饰器，参数装饰器的返回值被忽略。</p>
<p><strong>装饰器函数参数说明</strong></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>参数一</td>
<td>普通方法是构造函数的原型对象 Prototype，静态方法是构造函数</td>
</tr>
<tr>
<td>参数二</td>
<td>方法名称</td>
</tr>
<tr>
<td>参数三</td>
<td>参数所在索引位置</td>
</tr>
</tbody></table>
<h3 id="6-1-基本使用"><a href="#6-1-基本使用" class="headerlink" title="6.1 基本使用"></a>6.1 基本使用</h3><p>下面是定义参数装饰器</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ParameterDecorator: ParameterDecorator = (target: <span class="built_in">any</span>, <span class="attr">propertyKey</span>: <span class="built_in">string</span> | <span class="built_in">Symbol</span>, <span class="attr">parameterIndex</span>: <span class="built_in">number</span>): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(target, propertyKey, parameterIndex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hd</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">show</span>(<span class="params">name: <span class="built_in">string</span>, <span class="meta">@ParameterDecorator</span> url: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-2-元数据"><a href="#6-2-元数据" class="headerlink" title="6.2 元数据"></a>6.2 元数据</h3><p>元数据指对数据的描述，首先需要安装扩展包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add reflect-metadata</span><br></pre></td></tr></table></figure>

<p>下面是使用元数据的示例</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入支持元数据的扩展名</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;reflect-metadata&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hd = &#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">city</span>: <span class="string">&#x27;南京&#x27;</span> &#125;</span><br><span class="line"><span class="comment">//在对象 hd 的属性 name 上定义元数据 (元数据指对数据的描述)</span></span><br><span class="line"><span class="built_in">Reflect</span>.defineMetadata(<span class="string">&#x27;xj&#x27;</span>, <span class="string">&#x27;houdunren.com&#x27;</span>, hd, <span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> value = <span class="built_in">Reflect</span>.getMetadata(<span class="string">&#x27;xj&#x27;</span>, hd, <span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(value);</span><br></pre></td></tr></table></figure>

<h3 id="6-3-参数验证"><a href="#6-3-参数验证" class="headerlink" title="6.3 参数验证"></a>6.3 参数验证</h3><p>下面是对方法参数的验证，当参数不存在或为 Undefined时抛出异常。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入支持元数据的扩展名</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;reflect-metadata&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> requiredMetadataKey = <span class="built_in">Symbol</span>(<span class="string">&quot;required&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">required</span>(<span class="params">target: <span class="built_in">Object</span>, propertyKey: <span class="built_in">string</span> | symbol, parameterIndex: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//哪些参数需要验证</span></span><br><span class="line">    <span class="keyword">let</span> requiredParameters: <span class="built_in">number</span>[] = []</span><br><span class="line">    <span class="comment">//将需要验证的参数索引存入</span></span><br><span class="line">    requiredParameters.push(parameterIndex);</span><br><span class="line">    <span class="comment">//在 target 对象的 propertyKey属性上定义元素数据 </span></span><br><span class="line">    <span class="built_in">Reflect</span>.defineMetadata(requiredMetadataKey, requiredParameters, target, propertyKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> validate: MethodDecorator = <span class="function">(<span class="params">target: <span class="built_in">object</span>, propertyKey: <span class="built_in">string</span> | symbol, descriptor: PropertyDescriptor</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> method = descriptor.value;</span><br><span class="line">    descriptor.value = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//读取 @required 装饰器定义的元数据 </span></span><br><span class="line">        <span class="keyword">let</span> requiredParameters: <span class="built_in">number</span>[] = <span class="built_in">Reflect</span>.getOwnMetadata(requiredMetadataKey, target, propertyKey);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果有值，表示有需要验证的参数 </span></span><br><span class="line">        <span class="keyword">if</span> (requiredParameters) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> parameterIndex <span class="keyword">of</span> requiredParameters) &#123;</span><br><span class="line">                <span class="comment">//如果参数不存在或参数值为 undefined 报出错误</span></span><br><span class="line">                <span class="keyword">if</span> (parameterIndex &gt;= <span class="built_in">arguments</span>.length || <span class="built_in">arguments</span>[parameterIndex] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;参数不能为空.&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//验证通过后执行类方法</span></span><br><span class="line">        <span class="keyword">return</span> method.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hd</span> </span>&#123;</span><br><span class="line">    <span class="meta">@validate</span></span><br><span class="line">    <span class="function"><span class="title">show</span>(<span class="params">name: <span class="built_in">string</span>, <span class="meta">@required</span> id: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;show method&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f = <span class="keyword">new</span> Hd()</span><br><span class="line">f.show(<span class="string">&#x27;a&#x27;</span>, <span class="literal">undefined</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>web</category>
        <category>ts</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>ts</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS常见问题</title>
    <url>/2022/05/02/2022/CSS/</url>
    <content><![CDATA[<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="SEO"><a href="#SEO" class="headerlink" title="SEO"></a>SEO</h2><p><strong>搜索引擎优化</strong>（英语：<strong>search engine optimization</strong>，<a href="https://zh.wikipedia.org/wiki/%E7%BC%A9%E5%86%99">缩写</a>为<strong>SEO</strong>）是透过了解<a href="https://zh.wikipedia.org/wiki/%E6%90%9C%E5%B0%8B%E5%BC%95%E6%93%8E">搜索引擎</a>的运作规则来调整<a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E7%AB%99">网站</a>，以及提高目的<a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E7%AB%99">网站</a>在有关搜索引擎内排名的方式。由于不少研究发现，搜索引擎的用户往往只会留意搜索结果最前面的几个条目，所以不少<a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E7%AB%99">网站</a>都希望透过各种形式来影响搜索引擎的排序，让自己的<a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E7%AB%99">网站</a>可以有优秀的搜索排名。当中尤以各种依靠广告维生的网站为甚。</p>
<p>所谓“针对搜索引擎作优化的处理”，是指为了要让网站更容易被搜索引擎接受。搜索引擎会将网站彼此间的内容做一些相关性的资料比对，然后再由<a href="https://zh.wikipedia.org/wiki/%E7%80%8F%E8%A6%BD%E5%99%A8">浏览器</a>将这些内容以最快速且接近最完整的方式，呈现给搜索者。搜索引擎优化就是通过搜索引擎的规则进行优化，为用户打造更好的用户体验，最终的目的就是做好用户体验。</p>
<p>对于任何一个网站来说，要想在网站推广中获取成功，搜索引擎优化都是至为关键的一项任务。同时，随着搜索引擎不断变换它们的搜索排名算法规则，每次算法上的改变都会让一些排名很好的网站在一夜之间名落孙山，而失去排名的直接后果就是失去了网站固有的可观访问流量。所以每次搜索引擎算演法的改变都会在网站之中引起不小的骚动和焦虑。可以说，搜索引擎优化是一个愈来愈复杂的任务。</p>
<p>经过许多专业的SEO研究机构调查后发现，当用户利用搜索引擎查找资料、产品或服务时，大部分人通常只会点击搜索结果当中，最前面出现的几个链接，因此，大部分的网站都希望能透过各种方式或手法来试图影响网站页面在搜索引击的排名。不过，搜索引擎的算法会不断的更新，网站的排名也会因此会有动荡，所以如果没有持续做好SEO，很快地排名就很有可能会掉下来。</p>
<h2 id="html语义化"><a href="#html语义化" class="headerlink" title="html语义化"></a>html语义化</h2><p>让爬虫程序更容易理解代码，即SEO（搜索引擎优化）</p>
<h2 id="块级元素-内联元素"><a href="#块级元素-内联元素" class="headerlink" title="块级元素/内联元素"></a>块级元素/内联元素</h2><h3 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h3><p>定义：块级元素占据其<strong>父元素</strong>（容器）的整个<strong>水平空间</strong>，<strong>垂直空间</strong>等于其<strong>内容高度</strong>，因此创建了一个“块”。</p>
<p>表现形式：display:block/table</p>
<p>特点：独占一行，不管内容的长度</p>
<p>div /  h1 / p / ul / li / table / form</p>
<h3 id="内联元素（行内元素）："><a href="#内联元素（行内元素）：" class="headerlink" title="内联元素（行内元素）："></a>内联元素（行内元素）：</h3><p>定义：一个行内元素只占据它对应标签的<strong>边框</strong>所包含的空间</p>
<p>表现形式：display:inline</p>
<p>特点：不会独占一行，回紧跟着排列，直到没有足够的空间才会换行</p>
<p>span / strong / label / a / img / input / select / textarea / iframe</p>
<h3 id="行内块元素"><a href="#行内块元素" class="headerlink" title="行内块元素"></a>行内块元素</h3><p>定义：在一行上显示，但是可以设置宽高。既有块元素一部分特征，又有行内元素的一部分特征。<br>常见的行内块元素有：Img、input…</p>
<h3 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h3><ol>
<li><p>当行内元素在一行内<strong>排不下的时候才会换行</strong>，而且其宽度随着元素的内容而变化。块级元素的则宽度自动填满其父元素宽度。</p>
</li>
<li><p>块级元素可以设置 width, height属性，注意：块级元素即使设置了宽度，仍然是独占一行的。而<strong>行内元素</strong>设置width, height<strong>无效</strong>。</p>
</li>
<li><p>行内元素的<strong>水平方向</strong>的padding-left，padding-right，margin-left，margin-right 都产生<strong>边距效果</strong>，但是<strong>垂直方向</strong>的padding-top,padding-bottom,margin-top,margin-bottom都不会产生边距效果。（也就是水平方向有效，竖直方向无效）</p>
</li>
<li><p>块级元素可以包含行内元素和块级元素。行内元素不能包含块级元素。</p>
<p><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202205011423911.png" alt="image-20220501142352884"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.block</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;block&quot;</span>&gt;</span>块级<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        行内元素</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li><p>行内元素设定水平居中</p>
<p>在<strong>外层的块级元素</strong>设置<code>text-align:center</code>，这样可以使得其<strong>内部的行内元素</strong>水平居中。【因为行内元素设置宽高是无效的，且行内元素的的大小就是内容的大小，就没有所谓的text-align属性而言了，所以只需在其<strong>父级块元素</strong>中设定<code>text-align:center</code>即可实现水平居中】</p>
</li>
</ol>
</li>
</ol>
<h2 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h2><p>content-box</p>
<p>默认box-sizing属性值为content-box，此时的盒子大小是针对内容而言的。且此时border，padding值都会撑大盒子大小</p>
<p>border-box</p>
<p>如果将box-sizing属性值设定为border-box，那么border和padding值不会撑大盒子大小，相应的是此时内容区域的大小会被缩小</p>
<h2 id="外边距合并"><a href="#外边距合并" class="headerlink" title="外边距合并"></a>外边距合并</h2><p>整体规则为以下：</p>
<p><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202205011615436.png" alt="image-20220501161529384"></p>
<h3 id="兄弟元素"><a href="#兄弟元素" class="headerlink" title="兄弟元素"></a>兄弟元素</h3><p>发生状况：*<u>前一个</u><em>元素的<strong>下边距</strong>与</em><u>后一个</u>*元素的<strong>上边距</strong>会取两个元素外边距的最大值。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.box1 &#123;</span><br><span class="line">     width: 200px;</span><br><span class="line">     height: 200px;</span><br><span class="line">     background-color: aqua;</span><br><span class="line">     margin-bottom: 50px;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> .box2 &#123;</span><br><span class="line">     width: 200px;</span><br><span class="line">     height: 200px;</span><br><span class="line">     background-color: rgb(237, 15, 141);</span><br><span class="line">     margin-top: 30px;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>



<p><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202205011611809.png" alt="image-20220501161151777"></p>
<h3 id="父元素和子元素"><a href="#父元素和子元素" class="headerlink" title="父元素和子元素"></a>父元素和子元素</h3><p>父子之间的定位使用margin是实现不了的</p>
<p>这种情况又可以分为以下两种：</p>
<ul>
<li>父元素的上外边距和第一个子元素的上外边距</li>
<li>父元素的下外边距和最后一个子元素的下外边距</li>
</ul>
<p>这两种情况，最终显示出来的结果都是取二者中的最大值。</p>
<h2 id="高度塌陷"><a href="#高度塌陷" class="headerlink" title="高度塌陷"></a>高度塌陷</h2><p>一般不会给父元素设定高度，我们希望子元素的内容将其撑开，通过浮动可以使一个元素向其父元素的左侧或右侧移动。当我们设定了浮动的时候，此时父元素并没有被内容撑开，高度变成0，这就是高度塌陷。</p>
<p>解决高度塌陷的方法：为父元素开启BFC</p>
<h2 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h2><p>BFC（Block Formatting Context）即<strong>块格式化上下文</strong>，BFC是一个CSS中的一个隐含的属性，可以为一个元素开启BFC，开启BFC该元素会变成一个独立的布局区域，元素开启BFC后的特点：</p>
<ol>
<li><p>开启BFC的元素<strong>不会被浮动元素所覆盖</strong></p>
</li>
<li><p>开启BFC的元素子元素和父元素<strong>外边距</strong>不会重叠</p>
</li>
<li><p>开启BFC的元素可以<strong>包含浮动的子元素</strong></p>
</li>
</ol>
<p>可以通过一些特殊方式来开启元素的BFC：</p>
<p>   1、设置元素的浮动（不推荐）<br>   2、将元素设置为行内块元素（不推荐）<br>   3、将元素的<strong>overflow</strong>设置为一个非visible的值<br>   4、给父元素增加一个<strong>伪类元素</strong>，同时清除浮动、将伪元素设定为块级元素，内容为空即可。</p>
<p>   常用的方式为元素设置<code>overflow:hidden</code>开启其BFC 以使其可以包含浮动元素</p>
<p>常用方法：</p>
<h3 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h3><p>给父元素设定overflow为hidden/auto</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    * &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="css">        <span class="attribute">border</span>: solid <span class="number">10px</span> yellow;</span></span><br><span class="line"><span class="css">        <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202205021650436.png" alt="image-20220502165021411"></p>
<h3 id="after"><a href="#after" class="headerlink" title="::after"></a>::after</h3><p>给父元素增加一个伪类元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="css">        <span class="attribute">border</span>: solid <span class="number">10px</span> yellow;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.father</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">        <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202205021648522.png" alt="image-20220502164834485"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>给最外层元素开启BFC，使其可以包含浮动的子元素，同时也可以避免父子元素外边距重叠。</p>
<h2 id="清除外边距重叠"><a href="#清除外边距重叠" class="headerlink" title="清除外边距重叠"></a>清除外边距重叠</h2><p>当给父元素设定外边距时，父元素就有正常的外边距，此时由于父子元素外边距重叠了，所以相当于父子元素<strong>共享外边距</strong>，不过此时的子元素的外边距不是相对于父元素而言的。</p>
<p>当给子元素设定外边距时，此时并不是我们想象中的那样（子元素可以偏离父元素），此时作用和上述的一致，此时父子元素共享了外边距。为了达到我们想要的效果，此时可以<strong>给父元素开启BFC</strong>，就可以使得子元素偏离父元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    * &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="css">        <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202205021608751.png" alt="image-20220502160833712"></p>
<h2 id="clearfix"><a href="#clearfix" class="headerlink" title="clearfix"></a>clearfix</h2><p>自定义一个类，使得其<strong>既</strong>可以<u>清除浮动带来的影响</u>，<strong>也</strong>可以<u>解决外边距重叠</u>问题。【其实给父元素设定<code>overflow:hidden</code>也是可以实现的】</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        * &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: table;</span></span><br><span class="line"><span class="css">            <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father clearfix&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202205021735473.png" alt="image-20220502173519439"></p>
<p>直接给父元素开启BFC，设定<code>overflow:hidden</code>也能实现同样的效果</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    * &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="css">        <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h2><p>常见设定垂直居中的几种方法</p>
<h3 id="line-height-height"><a href="#line-height-height" class="headerlink" title="line-height=height"></a>line-height=height</h3><ol>
<li><p>如果子元素为<strong>行内元素</strong>，此时将父元素设定<code>text-align:center</code>只会使得行内元素在父元素中<strong>水平居中</strong>【此时设定text-align可以直接给父元素设定即可，子元素会继承父元素设定的此值】，此时再给父元素添加样式<code>line-height:height</code>，即给父元素添加样式<code>line-height</code>使得其值等于<code>height</code>的高度值即可实现其子元素在父元素中显示为垂直居中。【子元素<strong>多个行内元素</strong>也可以达到垂直居中的效果】</p>
</li>
<li><p>如果子元素为块级元素【<strong>只能有一个块级元素</strong>，如果有两个块级元素，排在后的块级元素将会被挤出父元素之外】，按照上述设定也能达到垂直居中的效果。</p>
</li>
<li><p>如果子元素<strong>既有行内元素也有块级元素</strong>，则<strong>达不到垂直居中</strong>的效果。此时要看<strong>排列的先后顺序</strong></p>
<p>排在前的可以实现垂直居中的效果，排在后的则会被挤到父元素之外。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">        <span class="attribute">line-height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;son1&quot;</span>&gt;</span>son1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;son2&quot;</span>&gt;</span>son2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202205031001428.png" alt="image-20220503100141395"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">        <span class="attribute">line-height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>子元素为块级元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;son1&quot;</span>&gt;</span>son1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;son2&quot;</span>&gt;</span>son2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<pre><code>&lt;div class=&quot;father&quot;&gt;
</code></pre>
<p><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202205031008901.png" alt="image-20220503100837874"></p>
</li>
</ol>
<h3 id="定位-margin-宽高"><a href="#定位-margin-宽高" class="headerlink" title="定位+margin+宽高"></a>定位+margin+宽高</h3><p>利用<strong>子绝父相</strong>定位，<strong>计算宽高</strong>，将<code>top:50% ; margin-top:-height/2</code>===&gt;垂直居中；<code>left:50% ; margin-left:-width/2</code>===&gt;水平居中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css">        <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin-top</span>: -<span class="number">50px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin-left</span>: -<span class="number">50px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>块级元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202205031023174.png" alt="image-20220503102301144"></p>
<h3 id="定位-transform-translate"><a href="#定位-transform-translate" class="headerlink" title="定位+transform:translate"></a>定位+transform:translate</h3><p>利用<strong>子绝父相</strong>定位，<strong>不需要计算</strong>垂直居中元素的<strong>宽高</strong>，只需使用css3的<code>transform: translate(-50%, -50%)</code>即可达到效果</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css">        <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>块级元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="定位-margin"><a href="#定位-margin" class="headerlink" title="定位+margin"></a>定位+margin</h3><p>利用<strong>子绝父相</strong>定位，将left/right/top/bottom统统设置为0，margin设置为auto即可实现水平垂直居中。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css">        <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>块级元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="css">        <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css">        <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="comment">/* display: flex;</span></span></span><br><span class="line"><span class="comment"><span class="css">        align-items: center;</span></span></span><br><span class="line"><span class="comment"><span class="css">        justify-content: center; */</span></span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>块级元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><p>起初的目的是为了实现<strong>文字环绕</strong>效果，后来演变成了实现<strong>水平布局</strong>的解决方案。</p>
<h3 id="文字环绕效果"><a href="#文字环绕效果" class="headerlink" title="文字环绕效果"></a><strong>文字环绕效果</strong></h3><p>一般的话，如果前边的元素设定了浮动，此时浮动元素完全脱离文档流，后边的元素会自动上移，由于层级提升，所以浮动元素会压盖住上移的元素，但是此时并不会压盖住上移元素的文字，上移元素中的文字会环绕着浮动元素进行布局。此时即达到了文字环绕的效果。</p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol>
<li>浮动元素会完全脱离文档流，不再占据文档流中的位置</li>
<li>设置浮动以后元素会向父元素的左侧或右侧移动</li>
<li>浮动元素默认不会从父元素中移出</li>
<li>浮动元素向左或向右移动时，不会超过它前边的其他浮动元素</li>
<li>如果<strong>浮动元素</strong>的<strong>上边</strong>是一个<strong>没有浮动</strong>的块元素，则<strong>浮动元素无法上移</strong></li>
<li>浮动元素<strong>不会超过</strong>它<strong>上边的浮动</strong>的<strong>兄弟元素</strong>，最多最多就是和它一样高</li>
</ol>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>元素设置浮动以后，水平布局的等式便不需要强制成立元素设置浮动以后，会完全从文档流中脱离，不再占用文档流的位置，所以元素下边的还在文档流中的元素会自动向上移动</p>
<h3 id="脱离文档流元素特征"><a href="#脱离文档流元素特征" class="headerlink" title="脱离文档流元素特征"></a>脱离文档流元素特征</h3><ul>
<li>块元素：<ul>
<li>块元素不在独占页面的一行</li>
<li>脱离文档流以后，如果没有指定宽高，块元素的宽度和高度默认都被内容撑开行内元素：</li>
</ul>
</li>
<li>行内元素<ul>
<li>脱离文档流以后会<strong>变成块元素</strong>，所以此时的<strong>行内元素</strong>是可以设定宽高的</li>
<li>特点和块元素脱离文档流以后一样，所以<strong>不需要再区分</strong>块和行内了</li>
</ul>
</li>
</ul>
<h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><p>如果前面有浮动元素，由于浮动元素脱离了文档流，所以会对后边的元素造成影响，后边元素<strong>表现为</strong><u>跟在浮动元素后边</u>，实际上是浮动元素将后边元素<strong>压盖</strong>住了，如果后边元素想要正常显示，必须清除浮动元素的影响.</p>
<p>此时由于<code>.son1</code>没有设定宽度，元素继承了父元素的宽度，浮动元素压盖住了<code>.son1</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.son1</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">54</span>, <span class="number">15</span>, <span class="number">212</span>);</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>块级元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>块级元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son1&quot;</span>&gt;</span>块级元素?<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202205031111714.png" alt="image-20220503111152679"></p>
<p>给<code>.son1</code>清除浮动，其中<code>both</code>属性是指清除左右浮动元素对其较大的影响</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.son1</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">54</span>, <span class="number">15</span>, <span class="number">212</span>);</span></span><br><span class="line"><span class="css">        <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>块级元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>块级元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son1&quot;</span>&gt;</span>块级元素?<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202205031114621.png" alt="image-20220503111425588"></p>
<h2 id="margin为负"><a href="#margin为负" class="headerlink" title="margin为负"></a>margin为负</h2><p>margin为负情况如下：</p>
<ul>
<li><p>left和top为负时，元素自身分别向左移和上移【挤自己，为正也挤自己】</p>
<p>如果以%而不是px来进行影响，则其移动的大小参照的就是其<strong>前面的元素</strong></p>
</li>
<li><p>right和bottom为负时，元素不动，右边的元素左移和下边上移【挤别人，为正也挤别人】，实际上相当于压缩自己的空间。</p>
</li>
</ul>
<h2 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h2><p>分为上中下布局，中间又分为三列，其中左右两列列宽固定，中间列随屏幕宽自适应。<strong>重点是</strong>要将中间部分放置于左右布局的前面，然后通过<strong>float+padding+margin+定位</strong>实现布局。精髓是将<code>.center</code>宽设定为100%，且将其<strong>内边距</strong>固定为左右两列的宽度。</p>
<p>使用<strong>float+padding+margin+定位</strong>来进行实现。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  * &#123;</span><br><span class="line">        padding: 0;</span><br><span class="line">        margin: 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .content &#123;</span><br><span class="line">        min-width: 800px;</span><br><span class="line">        padding-left: 300px;</span><br><span class="line">        padding-right: 200px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    div &#123;</span><br><span class="line">        text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .header &#123;</span><br><span class="line">        background-color: red;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .center &#123;</span><br><span class="line">        background-color: orange;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .left &#123;</span><br><span class="line">        background-color: green;</span><br><span class="line">        width: 300px;</span><br><span class="line">        margin-left: -100%;</span><br><span class="line">        position: relative;</span><br><span class="line">        left: -300px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .center &#123;</span><br><span class="line">        background-color: yellow;</span><br><span class="line">        width: 100%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .right &#123;</span><br><span class="line">        background-color: gray;</span><br><span class="line">        width: 200px;</span><br><span class="line">        margin-right: -200px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .column &#123;</span><br><span class="line">        float: left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .footer &#123;</span><br><span class="line">        background-color: blue;</span><br><span class="line">        clear: left;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span>头部<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center column&quot;</span>&gt;</span>中<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left column&quot;</span>&gt;</span>左<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right column&quot;</span>&gt;</span>右<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">        底部</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h2><p>双飞翼布局也是将实现左中右三列布局，只是DOM结构和圣杯布局不太一样罢了。双飞翼是通过margin给两侧元素预留位置，而圣杯布局是使用padding来给两侧预留位置来进行布局</p>
<p>使用<strong>float+padding+margin+定位</strong>来进行实现。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    * &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.header</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.center</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.inner</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin-left</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin-right</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: gray;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin-left</span>: -<span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.column</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.footer</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="css">        <span class="attribute">clear</span>: left;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span>头部<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center column&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span>中<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left column&quot;</span>&gt;</span>左<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right column&quot;</span>&gt;</span>右<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>底部<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="圣杯布局和双飞翼布局对比"><a href="#圣杯布局和双飞翼布局对比" class="headerlink" title="圣杯布局和双飞翼布局对比"></a>圣杯布局和双飞翼布局对比</h2><p>相同点：</p>
<ul>
<li>都是通过DOM结构来使得<strong>先渲染中间部分内容</strong>再渲染左右部分，使得网页主要内容先进行渲染，不会由于两侧加载过久造成用户体验不佳。</li>
</ul>
<p>不同点：</p>
<ul>
<li><p>两者布局不一样，圣杯是中左右布局同级，<code>.center</code>通过padding来给两侧预留空间；双飞翼布局给<code>.center</code>包裹了一个父元素盒子，通过margin来给两侧预留空间。</p>
</li>
<li><p>圣杯布局需要通过定位来实现布局，而双飞翼布局不需要定位即可实现</p>
</li>
</ul>
<h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><p>相对于margin更为高级的定位方式，因为如果仅仅靠margin来进行布局的话，会影响其他元素，常常要变动很多其他元素，并不是很方便。所以就有了定位。</p>
<ul>
<li><p>相对定位</p>
<ul>
<li>相对于自身来进行定位</li>
<li>不会脱离文档流</li>
<li>层级会提升</li>
</ul>
</li>
<li><p>绝对定位</p>
<ul>
<li>相对于<strong>最近一层的定位元素</strong>来进行定位</li>
<li>会脱离文档流，从而<strong>会影响其他元素</strong>，由此常常和<strong>相对定位配合</strong>使用</li>
<li>层级会提升</li>
</ul>
</li>
<li><p>总结：</p>
</li>
</ul>
<p>由于相对定位和绝对定位的特点，所以一般采用<strong>子绝父相</strong>的定位策略。即<strong>父元素</strong>使用<strong>相对定位</strong>不会脱离文档流，不会影响其他元素布局；而子元素在父元素内部，<strong>子元素</strong>使用<strong>绝对定位</strong>就可以相对于父元素来进行定位，所以是最佳策略。</p>
<h2 id="flex实现骰子布局"><a href="#flex实现骰子布局" class="headerlink" title="flex实现骰子布局"></a>flex实现骰子布局</h2><p>使用<code>align-self</code>单独给子元素设定侧轴排列方式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">        <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">        <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">span</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">align-self</span>: center;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">span</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">align-self</span>: flex-end;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="行高继承困惑"><a href="#行高继承困惑" class="headerlink" title="行高继承困惑"></a>行高继承困惑</h2><ul>
<li><p>如果父元素为具体px数值，则直接继承过来</p>
</li>
<li><p>如果父元素行高为%，那么子元素行高为：<code>父元素font-size*%</code>，子元素直接继承</p>
</li>
<li><p>如果父元素行高为小数，则子元素继承该小数，子元素行高为<code>font-size*该小数</code></p>
</li>
</ul>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ol>
<li><p>background-image 设置背景图片：<code>background-image: url(&quot;./img/1.png&quot;);</code></p>
<ul>
<li><p>可以同时设置背景图片和背景颜色，这样背景颜色将会成为图片的背景色</p>
</li>
<li><p>如果背景的图片小于元素，则背景图片会自动在元素中平铺将元素铺满</p>
</li>
<li><p>如果背景的图片大于元素，将会一个部分背景无法完全显示</p>
</li>
<li><p>如果背景图片和元素一样大，则会直接正常显示</p>
</li>
</ul>
</li>
<li><p>background-repeat ：用来设置背景的重复方式可选值：</p>
<ul>
<li><p>repeat黑默认值，背景会沿着x轴y轴双方向重复</p>
</li>
<li><p>repeat-x沿着轴方向重复</p>
</li>
<li><p>repeat-y 沿着y轴方向重复</p>
</li>
<li><p>no-repeat 背景图片不重复</p>
</li>
</ul>
</li>
<li><p>background-position ：用来设置背景图片的位置设置方式</p>
</li>
</ol>
<ul>
<li>通过top left right bottom center几个表示方位的词来设置背景图片的位置</li>
</ul>
<ul>
<li>使用方位词时必须要<strong>同时指定</strong>两个值，如果只写一个则第二个默认就是center</li>
</ul>
<ul>
<li>通过偏移量来指定背景图片的位置：水平方向的偏移量和垂直方向偏移量</li>
</ul>
<ol start="4">
<li><p>background-clip：设置背景的范围</p>
<ul>
<li><p>border-box 黑默认值，背景会出现在边框的下边</p>
</li>
<li><p>padding-box 背景不会出现在边框，只出现在内容区和内边距</p>
</li>
<li><p>content-box背景只会出现在内容区</p>
</li>
</ul>
</li>
<li><p>background-origin 背景图片的偏移量计算的原点</p>
<ul>
<li><p>padding-box 黑默认值，</p>
</li>
<li><p>background-position从内边距处开始计算</p>
</li>
<li><p>content-box 背景图片的偏移量从内容区处计算</p>
</li>
<li><p>border-box 背景图片的变量从边框处开始计算</p>
</li>
</ul>
</li>
<li><p>background-size：设置背景图片的大小</p>
<ul>
<li>第一个值表示宽度第二个值表示高度</li>
<li>如果只写一个，则第二个值默认是auto </li>
<li>cover图片的比例不变，将元素铺满</li>
<li>contain 图片比例不变，将图片在元素中完整显示</li>
</ul>
</li>
<li><p>backgound 背景相关的简写</p>
<ul>
<li>所有背景相关的样式都可以通过该样式来设置并且该样式没有顺序要求，也没有哪个属性是必须写的</li>
<li>background-size必须写在background-position的后边，并且使用/隔开，<code>background-position/background-size</code></li>
<li> background-origin background-clip两个样式，orgin要在clip的前边</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3初级</title>
    <url>/2021/12/31/2021/vue3/</url>
    <content><![CDATA[<h1 id="Vue3快速上手"><a href="#Vue3快速上手" class="headerlink" title="Vue3快速上手"></a>Vue3快速上手</h1><img src="https://user-images.githubusercontent.com/499550/93624428-53932780-f9ae-11ea-8d16-af949e16a09f.png" style="width:200px" />



<h2 id="1-Vue3简介"><a href="#1-Vue3简介" class="headerlink" title="1.Vue3简介"></a>1.Vue3简介</h2><ul>
<li>2020年9月18日，Vue.js发布3.0版本，代号：One Piece（海贼王）</li>
<li>耗时2年多、<a href="https://github.com/vuejs/vue-next/graphs/commit-activity">2600+次提交</a>、<a href="https://github.com/vuejs/rfcs/tree/master/active-rfcs">30+个RFC</a>、<a href="https://github.com/vuejs/vue-next/pulls?q=is:pr+is:merged+-author:app/dependabot-preview+">600+次PR</a>、<a href="https://github.com/vuejs/vue-next/graphs/contributors">99位贡献者</a> </li>
<li>github上的tags地址：<a href="https://github.com/vuejs/vue-next/releases/tag/v3.0.0">https://github.com/vuejs/vue-next/releases/tag/v3.0.0</a></li>
</ul>
<h2 id="2-Vue3带来了什么"><a href="#2-Vue3带来了什么" class="headerlink" title="2.Vue3带来了什么"></a>2.Vue3带来了什么</h2><h3 id="1-性能的提升"><a href="#1-性能的提升" class="headerlink" title="1.性能的提升"></a>1.性能的提升</h3><ul>
<li><p>打包大小减少41%</p>
</li>
<li><p>初次渲染快55%, 更新渲染快133%</p>
</li>
<li><p>内存减少54%</p>
<p>……</p>
</li>
</ul>
<h3 id="2-源码的升级"><a href="#2-源码的升级" class="headerlink" title="2.源码的升级"></a>2.源码的升级</h3><ul>
<li><p>使用Proxy代替defineProperty实现响应式</p>
</li>
<li><p>重写虚拟DOM的实现和Tree-Shaking</p>
<p>……</p>
</li>
</ul>
<h3 id="3-拥抱TypeScript"><a href="#3-拥抱TypeScript" class="headerlink" title="3.拥抱TypeScript"></a>3.拥抱TypeScript</h3><ul>
<li>Vue3可以更好的支持TypeScript</li>
</ul>
<h3 id="4-新的特性"><a href="#4-新的特性" class="headerlink" title="4.新的特性"></a>4.新的特性</h3><ol>
<li><p>Composition API（组合API）</p>
<ul>
<li>setup配置</li>
<li>ref与reactive</li>
<li>watch与watchEffect</li>
<li>provide与inject</li>
<li>……</li>
</ul>
</li>
<li><p>新的内置组件</p>
<ul>
<li>Fragment </li>
<li>Teleport</li>
<li>Suspense</li>
</ul>
</li>
<li><p>其他改变</p>
<ul>
<li>新的生命周期钩子</li>
<li>data 选项应始终被声明为一个函数</li>
<li>移除keyCode支持作为 v-on 的修饰符</li>
<li>……</li>
</ul>
</li>
</ol>
<h1 id="一、创建Vue3-0工程"><a href="#一、创建Vue3-0工程" class="headerlink" title="一、创建Vue3.0工程"></a>一、创建Vue3.0工程</h1><h2 id="1-使用-vue-cli-创建"><a href="#1-使用-vue-cli-创建" class="headerlink" title="1.使用 vue-cli 创建"></a>1.使用 vue-cli 创建</h2><p>官方文档：<a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create">https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span></span><br><span class="line">vue --version</span><br><span class="line"><span class="comment">## 安装或者升级你的@vue/cli</span></span><br><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="comment">## 创建</span></span><br><span class="line">vue create vue_test</span><br><span class="line"><span class="comment">## 启动</span></span><br><span class="line"><span class="built_in">cd</span> vue_test</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure>

<h2 id="2-使用-vite-创建"><a href="#2-使用-vite-创建" class="headerlink" title="2.使用 vite 创建"></a>2.使用 vite 创建</h2><p>官方文档：<a href="https://v3.cn.vuejs.org/guide/installation.html#vite">https://v3.cn.vuejs.org/guide/installation.html#vite</a></p>
<p>vite官网：<a href="https://vitejs.cn/">https://vitejs.cn</a></p>
<ul>
<li>什么是vite？—— 新一代前端构建工具。</li>
<li>优势如下：<ul>
<li>开发环境中，无需打包操作，可快速的冷启动。</li>
<li>轻量快速的热重载（HMR）。</li>
<li>真正的按需编译，不再等待整个应用编译完成。</li>
</ul>
</li>
<li>传统构建 与 vite构建对比图</li>
</ul>
<p><img src="https://cn.vitejs.dev/assets/bundler.37740380.png" style="width:500px;height:280px;float:left" /><img src="https://cn.vitejs.dev/assets/esm.3070012d.png" style="width:480px;height:280px" /></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 创建工程</span></span><br><span class="line">npm init vite-app &lt;project-name&gt;</span><br><span class="line"><span class="comment">## 进入工程目录</span></span><br><span class="line"><span class="built_in">cd</span> &lt;project-name&gt;</span><br><span class="line"><span class="comment">## 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment">## 运行</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<h1 id="二、常用-Composition-API"><a href="#二、常用-Composition-API" class="headerlink" title="二、常用 Composition API"></a>二、常用 Composition API</h1><p>官方文档: <a href="https://v3.cn.vuejs.org/guide/composition-api-introduction.html">https://v3.cn.vuejs.org/guide/composition-api-introduction.html</a></p>
<h2 id="1-拉开序幕的setup"><a href="#1-拉开序幕的setup" class="headerlink" title="1.拉开序幕的setup"></a>1.拉开序幕的setup</h2><ol>
<li>理解：Vue3.0中一个新的配置项，值为一个函数。</li>
<li>setup是所有<strong style="color:#DD5145">Composition API（组合API）</strong><i style="color:gray;font-weight:bold">“ 表演的舞台 ”</i>。</li>
<li>组件中所用到的：数据、方法等等，均要配置在setup中。</li>
<li>setup函数的两种返回值：<ol>
<li>若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）</li>
<li><span style="color:#aad">若返回一个渲染函数：则可以自定义渲染内容。（了解）</span></li>
</ol>
</li>
<li>注意点：<ol>
<li>尽量不要与Vue2.x配置混用<ul>
<li>Vue2.x配置（data、methos、computed…）中<strong style="color:#DD5145">可以访问到</strong>setup中的属性、方法。</li>
<li>但在setup中<strong style="color:#DD5145">不能访问到</strong>Vue2.x配置（data、methos、computed…）。</li>
<li>如果有重名, setup优先。</li>
</ul>
</li>
<li>setup不能是一个async函数，因为返回值不再是return的对象, 而是promise, 模板看不到return对象中的属性。（后期也可以返回一个Promise实例，但需要Suspense和异步组件的配合）</li>
</ol>
</li>
</ol>
<h2 id="2-ref函数"><a href="#2-ref函数" class="headerlink" title="2.ref函数"></a>2.ref函数</h2><ul>
<li>作用: 定义一个响应式的数据</li>
<li>语法: <code>const xxx = ref(initValue)</code> <ul>
<li>创建一个包含响应式数据的<strong style="color:#DD5145">引用对象（reference对象，简称ref对象）</strong>。</li>
<li>JS中操作数据： <code>xxx.value</code></li>
<li>模板中读取数据: 不需要.value，直接：<code>&lt;div&gt;&#123;&#123;xxx&#125;&#125;&lt;/div&gt;</code></li>
</ul>
</li>
<li>备注：<ul>
<li>接收的数据可以是：基本类型、也可以是对象类型。</li>
<li>基本类型的数据：响应式依然是靠<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>完成的。</li>
<li>对象类型的数据：内部 <i style="color:gray;font-weight:bold">“ 求助 ”</i> 了Vue3.0中的一个新函数—— <code>reactive</code>函数。</li>
</ul>
</li>
</ul>
<h2 id="3-reactive函数"><a href="#3-reactive函数" class="headerlink" title="3.reactive函数"></a>3.reactive函数</h2><ul>
<li>作用: 定义一个<strong style="color:#DD5145">对象类型</strong>的响应式数据（基本类型不要用它，要用<code>ref</code>函数）</li>
<li>语法：<code>const 代理对象= reactive(源对象)</code>接收一个对象（或数组），返回一个<strong style="color:#DD5145">代理对象（Proxy的实例对象，简称proxy对象）</strong></li>
<li>reactive定义的响应式数据是“深层次的”。</li>
<li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。</li>
</ul>
<h2 id="4-Vue3-0中的响应式原理"><a href="#4-Vue3-0中的响应式原理" class="headerlink" title="4.Vue3.0中的响应式原理"></a>4.Vue3.0中的响应式原理</h2><h3 id="vue2-x的响应式"><a href="#vue2-x的响应式" class="headerlink" title="vue2.x的响应式"></a>vue2.x的响应式</h3><ul>
<li><p>实现原理：</p>
<ul>
<li><p>对象类型：通过<code>Object.defineProperty()</code>对属性的读取、修改进行拦截（数据劫持）。</p>
</li>
<li><p>数组类型：通过重写更新数组的一系列方法来实现拦截。（对数组的变更方法进行了包裹）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(data, <span class="string">&#x27;count&#x27;</span>, &#123;</span><br><span class="line">    get () &#123;&#125;, </span><br><span class="line">    set () &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>存在问题：</p>
<ul>
<li>新增属性、删除属性, 界面不会更新。</li>
<li>直接通过下标修改数组, 界面不会自动更新。</li>
</ul>
</li>
</ul>
<h3 id="Vue3-0的响应式"><a href="#Vue3-0的响应式" class="headerlink" title="Vue3.0的响应式"></a>Vue3.0的响应式</h3><ul>
<li>实现原理: <ul>
<li>通过Proxy（代理）:  拦截对象中任意属性的变化, 包括：属性值的读写、属性的添加、属性的删除等。</li>
<li>通过Reflect（反射）:  对源对象的属性进行操作。</li>
<li>MDN文档中描述的Proxy与Reflect：<ul>
<li><p>Proxy：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a></p>
</li>
<li><p>Reflect：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Proxy</span>(data, &#123;</span><br><span class="line">	<span class="comment">// 拦截读取属性值</span></span><br><span class="line">    get (target, prop) &#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target, prop)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 拦截设置属性值或添加新属性</span></span><br><span class="line">    set (target, prop, value) &#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target, prop, value)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 拦截删除属性</span></span><br><span class="line">    deleteProperty (target, prop) &#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="built_in">Reflect</span>.deleteProperty(target, prop)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">proxy.name = <span class="string">&#x27;tom&#x27;</span>   </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="5-reactive对比ref"><a href="#5-reactive对比ref" class="headerlink" title="5.reactive对比ref"></a>5.reactive对比ref</h2><ul>
<li>从定义数据角度对比：<ul>
<li> ref用来定义：<strong style="color:#DD5145">基本类型数据</strong>。</li>
<li> reactive用来定义：<strong style="color:#DD5145">对象（或数组）类型数据</strong>。</li>
<li> 备注：ref也可以用来定义<strong style="color:#DD5145">对象（或数组）类型数据</strong>, 它内部会自动通过<code>reactive</code>转为<strong style="color:#DD5145">代理对象</strong>。</li>
</ul>
</li>
<li>从原理角度对比：<ul>
<li> ref通过<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>来实现响应式（数据劫持）。</li>
<li> reactive通过使用<strong style="color:#DD5145">Proxy</strong>来实现响应式（数据劫持）, 并通过<strong style="color:#DD5145">Reflect</strong>操作<strong style="color:orange">源对象</strong>内部的数据。</li>
</ul>
</li>
<li>从使用角度对比：<ul>
<li> ref定义的数据：操作数据<strong style="color:#DD5145">需要</strong><code>.value</code>，读取数据时模板中直接读取<strong style="color:#DD5145">不需要</strong><code>.value</code>。</li>
<li> reactive定义的数据：操作数据与读取数据：<strong style="color:#DD5145">均不需要</strong><code>.value</code>。</li>
</ul>
</li>
</ul>
<h2 id="6-setup的两个注意点"><a href="#6-setup的两个注意点" class="headerlink" title="6.setup的两个注意点"></a>6.setup的两个注意点</h2><ul>
<li>setup执行的时机<ul>
<li>在beforeCreate之前执行一次，this是undefined。</li>
</ul>
</li>
<li>setup的参数<ul>
<li>props：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性。</li>
<li>context：上下文对象<ul>
<li>attrs: 值为对象，包含：组件外部传递过来，但没有在props配置中声明的属性, 相当于 <code>this.$attrs</code>。</li>
<li>slots: 收到的插槽内容, 相当于 <code>this.$slots</code>。</li>
<li>emit: 分发自定义事件的函数, 相当于 <code>this.$emit</code>。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="7-计算属性与监视"><a href="#7-计算属性与监视" class="headerlink" title="7.计算属性与监视"></a>7.计算属性与监视</h2><h3 id="1-computed函数"><a href="#1-computed函数" class="headerlink" title="1.computed函数"></a>1.computed函数</h3><ul>
<li><p>与Vue2.x中computed配置功能一致</p>
</li>
<li><p>写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;computed&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">	<span class="comment">//计算属性——简写</span></span><br><span class="line">    <span class="keyword">let</span> fullName = computed(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> person.firstName + <span class="string">&#x27;-&#x27;</span> + person.lastName</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//计算属性——完整</span></span><br><span class="line">    <span class="keyword">let</span> fullName = computed(&#123;</span><br><span class="line">        <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> person.firstName + <span class="string">&#x27;-&#x27;</span> + person.lastName</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">set</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">const</span> nameArr = value.split(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            person.firstName = nameArr[<span class="number">0</span>]</span><br><span class="line">            person.lastName = nameArr[<span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-watch函数"><a href="#2-watch函数" class="headerlink" title="2.watch函数"></a>2.watch函数</h3><ul>
<li><p>与Vue2.x中watch配置功能一致</p>
</li>
<li><p>两个小“坑”：</p>
<ul>
<li>监视reactive定义的响应式数据时：oldValue无法正确获取、强制开启了深度监视（deep配置失效）。</li>
<li>监视reactive定义的响应式数据中某个属性时：deep配置有效。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//情况一：监视ref定义的响应式数据</span></span><br><span class="line">watch(sum,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&#x27;sum变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//情况二：监视多个ref定义的响应式数据</span></span><br><span class="line">watch([sum,msg],<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&#x27;sum或msg变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">/* 情况三：监视reactive定义的响应式数据</span></span><br><span class="line"><span class="comment">			若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue！！</span></span><br><span class="line"><span class="comment">			若watch监视的是reactive定义的响应式数据，则强制开启了深度监视 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">watch(person,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&#x27;person变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">false</span>&#125;) <span class="comment">//此处的deep配置不再奏效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//情况四：监视reactive定义的响应式数据中的某个属性</span></span><br><span class="line">watch(<span class="function">()=&gt;</span>person.job,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">true</span>&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">//情况五：监视reactive定义的响应式数据中的某些属性</span></span><br><span class="line">watch([<span class="function">()=&gt;</span>person.job,<span class="function">()=&gt;</span>person.name],<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//特殊情况</span></span><br><span class="line">watch(<span class="function">()=&gt;</span>person.job,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">deep</span>:<span class="literal">true</span>&#125;) <span class="comment">//此处由于监视的是reactive素定义的对象中的某个属性，所以deep配置有效</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-watchEffect函数"><a href="#3-watchEffect函数" class="headerlink" title="3.watchEffect函数"></a>3.watchEffect函数</h3><ul>
<li><p>watch的套路是：既要指明监视的属性，也要指明监视的回调。</p>
</li>
<li><p>watchEffect的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。</p>
</li>
<li><p>watchEffect有点像computed：</p>
<ul>
<li>但computed注重的计算出来的值（回调函数的返回值），所以必须要写返回值。</li>
<li>而watchEffect更注重的是过程（回调函数的函数体），所以不用写返回值。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。</span></span><br><span class="line">watchEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> x1 = sum.value</span><br><span class="line">    <span class="keyword">const</span> x2 = person.age</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;watchEffect配置的回调执行了&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="8-生命周期"><a href="#8-生命周期" class="headerlink" title="8.生命周期"></a>8.生命周期</h2><div style="border:1px solid black;width:380px;float:left;margin-right:20px;"><strong>vue2.x的生命周期</strong><img src="https://cn.vuejs.org/images/lifecycle.png" alt="lifecycle_2" style="zoom:33%;width:1200px" /></div><div style="border:1px solid black;width:510px;height:985px;float:left"><strong>vue3.0的生命周期</strong><img src="https://v3.cn.vuejs.org/images/lifecycle.svg" alt="lifecycle_2" style="zoom:33%;width:2500px" /></div>





































<p>1</p>
<ul>
<li>Vue3.0中可以继续使用Vue2.x中的生命周期钩子，但有有两个被更名：<ul>
<li><code>beforeDestroy</code>改名为 <code>beforeUnmount</code></li>
<li><code>destroyed</code>改名为 <code>unmounted</code></li>
</ul>
</li>
<li>Vue3.0也提供了 Composition API 形式的生命周期钩子，与Vue2.x中钩子对应关系如下：<ul>
<li><code>beforeCreate</code>===&gt;<code>setup()</code></li>
<li><code>created</code>=======&gt;<code>setup()</code></li>
<li><code>beforeMount</code> ===&gt;<code>onBeforeMount</code></li>
<li><code>mounted</code>=======&gt;<code>onMounted</code></li>
<li><code>beforeUpdate</code>===&gt;<code>onBeforeUpdate</code></li>
<li><code>updated</code> =======&gt;<code>onUpdated</code></li>
<li><code>beforeUnmount</code> ==&gt;<code>onBeforeUnmount</code></li>
<li><code>unmounted</code> =====&gt;<code>onUnmounted</code></li>
</ul>
</li>
</ul>
<h2 id="9-自定义hook函数"><a href="#9-自定义hook函数" class="headerlink" title="9.自定义hook函数"></a>9.自定义hook函数</h2><ul>
<li><p>什么是hook？—— 本质是一个函数，把setup函数中使用的Composition API进行了封装。</p>
</li>
<li><p>类似于vue2.x中的mixin。</p>
</li>
<li><p>自定义hook的优势: 复用代码, 让setup中的逻辑更清楚易懂。</p>
</li>
</ul>
<h2 id="10-toRef"><a href="#10-toRef" class="headerlink" title="10.toRef"></a>10.toRef</h2><ul>
<li>作用：创建一个 ref 对象，其value值指向另一个对象中的某个属性。</li>
<li>语法：<code>const name = toRef(person,&#39;name&#39;)</code></li>
<li>应用:   要将响应式对象中的某个属性单独提供给外部使用时。</li>
</ul>
<ul>
<li>扩展：<code>toRefs</code> 与<code>toRef</code>功能一致，但可以批量创建多个 ref 对象，语法：<code>toRefs(person)</code></li>
</ul>
<h1 id="三、其它-Composition-API"><a href="#三、其它-Composition-API" class="headerlink" title="三、其它 Composition API"></a>三、其它 Composition API</h1><h2 id="1-shallowReactive-与-shallowRef"><a href="#1-shallowReactive-与-shallowRef" class="headerlink" title="1.shallowReactive 与 shallowRef"></a>1.shallowReactive 与 shallowRef</h2><ul>
<li><p>shallowReactive：只处理对象最外层属性的响应式（浅响应式）。</p>
</li>
<li><p>shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。</p>
</li>
<li><p>什么时候使用?</p>
<ul>
<li> 如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 ===&gt; shallowReactive。</li>
<li> 如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 ===&gt; shallowRef。</li>
</ul>
</li>
</ul>
<h2 id="2-readonly-与-shallowReadonly"><a href="#2-readonly-与-shallowReadonly" class="headerlink" title="2.readonly 与 shallowReadonly"></a>2.readonly 与 shallowReadonly</h2><ul>
<li>readonly: 让一个响应式数据变为只读的（深只读）。</li>
<li>shallowReadonly：让一个响应式数据变为只读的（浅只读）。</li>
<li>应用场景: 不希望数据被修改时。</li>
</ul>
<h2 id="3-toRaw-与-markRaw"><a href="#3-toRaw-与-markRaw" class="headerlink" title="3.toRaw 与 markRaw"></a>3.toRaw 与 markRaw</h2><ul>
<li>toRaw：<ul>
<li>作用：将一个由<code>reactive</code>生成的<strong style="color:orange">响应式对象</strong>转为<strong style="color:orange">普通对象</strong>。</li>
<li>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。</li>
</ul>
</li>
<li>markRaw：<ul>
<li>作用：标记一个对象，使其永远不会再成为响应式对象。</li>
<li>应用场景:<ol>
<li>有些值不应被设置为响应式的，例如复杂的第三方类库等。</li>
<li>当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。</li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="4-customRef"><a href="#4-customRef" class="headerlink" title="4.customRef"></a>4.customRef</h2><ul>
<li><p>作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。</p>
</li>
<li><p>实现防抖效果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;input type=&quot;text&quot; v-model=&quot;keyword&quot;&gt;</span><br><span class="line">	&lt;h3&gt;&#123;&#123;keyword&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	import &#123;ref,customRef&#125; from &#x27;vue&#x27;</span><br><span class="line">	export default &#123;</span><br><span class="line">		name:&#x27;Demo&#x27;,</span><br><span class="line">		setup()&#123;</span><br><span class="line">			// let keyword = ref(&#x27;hello&#x27;) //使用Vue准备好的内置ref</span><br><span class="line">			//自定义一个myRef</span><br><span class="line">			function myRef(value,delay)&#123;</span><br><span class="line">				let timer</span><br><span class="line">				//通过customRef去实现自定义</span><br><span class="line">				return customRef((track,trigger)=&gt;&#123;</span><br><span class="line">					return&#123;</span><br><span class="line">						get()&#123;</span><br><span class="line">							track() //告诉Vue这个value值是需要被“追踪”的</span><br><span class="line">							return value</span><br><span class="line">						&#125;,</span><br><span class="line">						set(newValue)&#123;</span><br><span class="line">							clearTimeout(timer)</span><br><span class="line">							timer = setTimeout(()=&gt;&#123;</span><br><span class="line">								value = newValue</span><br><span class="line">								trigger() //告诉Vue去更新界面</span><br><span class="line">							&#125;,delay)</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;)</span><br><span class="line">			&#125;</span><br><span class="line">			let keyword = myRef(&#x27;hello&#x27;,500) //使用程序员自定义的ref</span><br><span class="line">			return &#123;</span><br><span class="line">				keyword</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="5-provide-与-inject"><a href="#5-provide-与-inject" class="headerlink" title="5.provide 与 inject"></a>5.provide 与 inject</h2><img src="https://v3.cn.vuejs.org/images/components_provide.png" style="width:300px" />

<ul>
<li><p>作用：实现<strong style="color:#DD5145">祖与后代组件间</strong>通信</p>
</li>
<li><p>套路：父组件有一个 <code>provide</code> 选项来提供数据，后代组件有一个 <code>inject</code> 选项来开始使用这些数据</p>
</li>
<li><p>具体写法：</p>
<ol>
<li><p>祖组件中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	......</span><br><span class="line">    <span class="keyword">let</span> car = reactive(&#123;<span class="attr">name</span>:<span class="string">&#x27;奔驰&#x27;</span>,<span class="attr">price</span>:<span class="string">&#x27;40万&#x27;</span>&#125;)</span><br><span class="line">    provide(<span class="string">&#x27;car&#x27;</span>,car)</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>后代组件中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params">props,context</span>)</span>&#123;</span><br><span class="line">	......</span><br><span class="line">    <span class="keyword">const</span> car = inject(<span class="string">&#x27;car&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;car&#125;</span><br><span class="line">	......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h2 id="6-响应式数据的判断"><a href="#6-响应式数据的判断" class="headerlink" title="6.响应式数据的判断"></a>6.响应式数据的判断</h2><ul>
<li>isRef: 检查一个值是否为一个 ref 对象</li>
<li>isReactive: 检查一个对象是否是由 <code>reactive</code> 创建的响应式代理</li>
<li>isReadonly: 检查一个对象是否是由 <code>readonly</code> 创建的只读代理</li>
<li>isProxy: 检查一个对象是否是由 <code>reactive</code> 或者 <code>readonly</code> 方法创建的代理</li>
</ul>
<h1 id="四、Composition-API-的优势"><a href="#四、Composition-API-的优势" class="headerlink" title="四、Composition API 的优势"></a>四、Composition API 的优势</h1><h2 id="1-Options-API-存在的问题"><a href="#1-Options-API-存在的问题" class="headerlink" title="1.Options API 存在的问题"></a>1.Options API 存在的问题</h2><p>使用传统OptionsAPI中，新增或者修改一个需求，就需要分别在data，methods，computed里修改 。</p>
<div style="width:600px;height:370px;overflow:hidden;float:left">
    <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f84e4e2c02424d9a99862ade0a2e4114~tplv-k3u1fbpfcp-watermark.image" style="width:600px;float:left" />
</div>
<div style="width:300px;height:370px;overflow:hidden;float:left">
    <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5ac7e20d1784887a826f6360768a368~tplv-k3u1fbpfcp-watermark.image" style="zoom:50%;width:560px;left" /> 
</div>















<h2 id="2-Composition-API-的优势"><a href="#2-Composition-API-的优势" class="headerlink" title="2.Composition API 的优势"></a>2.Composition API 的优势</h2><p>我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。</p>
<div style="width:500px;height:340px;overflow:hidden;float:left">
    <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc0be8211fc54b6c941c036791ba4efe~tplv-k3u1fbpfcp-watermark.image"style="height:360px"/>
</div>
<div style="width:430px;height:340px;overflow:hidden;float:left">
    <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6cc55165c0e34069a75fe36f8712eb80~tplv-k3u1fbpfcp-watermark.image"style="height:360px"/>
</div>













<h1 id="五、新的组件"><a href="#五、新的组件" class="headerlink" title="五、新的组件"></a>五、新的组件</h1><h2 id="1-Fragment"><a href="#1-Fragment" class="headerlink" title="1.Fragment"></a>1.Fragment</h2><ul>
<li>在Vue2中: 组件必须有一个根标签</li>
<li>在Vue3中: 组件可以没有根标签, 内部会将多个标签包含在一个Fragment虚拟元素中</li>
<li>好处: 减少标签层级, 减小内存占用</li>
</ul>
<h2 id="2-Teleport"><a href="#2-Teleport" class="headerlink" title="2.Teleport"></a>2.Teleport</h2><ul>
<li><p>什么是Teleport？—— <code>Teleport</code> 是一种能够将我们的<strong style="color:#DD5145">组件html结构</strong>移动到指定位置的技术。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;teleport to=&quot;移动位置&quot;&gt;</span><br><span class="line">	&lt;div v-if=&quot;isShow&quot; class=&quot;mask&quot;&gt;</span><br><span class="line">		&lt;div class=&quot;dialog&quot;&gt;</span><br><span class="line">			&lt;h3&gt;我是一个弹窗&lt;/h3&gt;</span><br><span class="line">			&lt;button @click=&quot;isShow = false&quot;&gt;关闭弹窗&lt;/button&gt;</span><br><span class="line">		&lt;/div&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/teleport&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-Suspense"><a href="#3-Suspense" class="headerlink" title="3.Suspense"></a>3.Suspense</h2><ul>
<li><p>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</p>
</li>
<li><p>使用步骤：</p>
<ul>
<li><p>异步引入组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineAsyncComponent&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> Child = defineAsyncComponent(<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;./components/Child.vue&#x27;</span>))</span><br></pre></td></tr></table></figure></li>
<li><p>使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div class=&quot;app&quot;&gt;</span><br><span class="line">		&lt;h3&gt;我是App组件&lt;/h3&gt;</span><br><span class="line">		&lt;Suspense&gt;</span><br><span class="line">			&lt;template v-slot:default&gt;</span><br><span class="line">				&lt;Child/&gt;</span><br><span class="line">			&lt;/template&gt;</span><br><span class="line">			&lt;template v-slot:fallback&gt;</span><br><span class="line">				&lt;h3&gt;加载中.....&lt;/h3&gt;</span><br><span class="line">			&lt;/template&gt;</span><br><span class="line">		&lt;/Suspense&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h1 id="六、其他"><a href="#六、其他" class="headerlink" title="六、其他"></a>六、其他</h1><h2 id="1-全局API的转移"><a href="#1-全局API的转移" class="headerlink" title="1.全局API的转移"></a>1.全局API的转移</h2><ul>
<li><p>Vue 2.x 有许多全局 API 和配置。</p>
<ul>
<li><p>例如：注册全局组件、注册全局指令等。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注册全局组件</span></span><br><span class="line">Vue.component(<span class="string">&#x27;MyButton&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;button @click=&quot;count++&quot;&gt;Clicked &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册全局指令</span></span><br><span class="line">Vue.directive(<span class="string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">inserted</span>: <span class="function"><span class="params">el</span> =&gt;</span> el.focus()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Vue3.0中对这些API做出了调整：</p>
<ul>
<li><p>将全局的API，即：<code>Vue.xxx</code>调整到应用实例（<code>app</code>）上</p>
<table>
<thead>
<tr>
<th>2.x 全局 API（<code>Vue</code>）</th>
<th>3.x 实例 API (<code>app</code>)</th>
</tr>
</thead>
<tbody><tr>
<td>Vue.config.xxxx</td>
<td>app.config.xxxx</td>
</tr>
<tr>
<td>Vue.config.productionTip</td>
<td><strong style="color:#DD5145">移除</strong></td>
</tr>
<tr>
<td>Vue.component</td>
<td>app.component</td>
</tr>
<tr>
<td>Vue.directive</td>
<td>app.directive</td>
</tr>
<tr>
<td>Vue.mixin</td>
<td>app.mixin</td>
</tr>
<tr>
<td>Vue.use</td>
<td>app.use</td>
</tr>
<tr>
<td>Vue.prototype</td>
<td>app.config.globalProperties</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
</ul>
<h2 id="2-其他改变"><a href="#2-其他改变" class="headerlink" title="2.其他改变"></a>2.其他改变</h2><ul>
<li><p>data选项应始终被声明为一个函数。</p>
</li>
<li><p>过度类名的更改：</p>
<ul>
<li><p>Vue2.x写法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.v-enter</span>,</span><br><span class="line"><span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.v-leave</span>,</span><br><span class="line"><span class="selector-class">.v-enter-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Vue3.x写法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.v-enter-from</span>,</span><br><span class="line"><span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.v-leave-from</span>,</span><br><span class="line"><span class="selector-class">.v-enter-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong style="color:#DD5145">移除</strong>keyCode作为 v-on 的修饰符，同时也不再支持<code>config.keyCodes</code></p>
</li>
<li><p><strong style="color:#DD5145">移除</strong><code>v-on.native</code>修饰符</p>
<ul>
<li><p>父组件中绑定事件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;my-component</span><br><span class="line">  v-on:close=&quot;handleComponentEvent&quot;</span><br><span class="line">  v-on:click=&quot;handleNativeClickEvent&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>子组件中声明自定义事件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    emits: [&#x27;close&#x27;]</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong style="color:#DD5145">移除</strong>过滤器（filter）</p>
<blockquote>
<p>过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。</p>
</blockquote>
</li>
<li><p>……</p>
</li>
</ul>
]]></content>
      <categories>
        <category>web</category>
        <category>vue3</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux</title>
    <url>/2022/01/06/2022/Linux/</url>
    <content><![CDATA[<h1 id="一、环境配置使用"><a href="#一、环境配置使用" class="headerlink" title="一、环境配置使用"></a>一、环境配置使用</h1><h2 id="1-VMware下载安装"><a href="#1-VMware下载安装" class="headerlink" title="1. VMware下载安装"></a>1. VMware下载安装</h2><p>登入：<a href="https://customerconnect.vmware.com/en/downloads/details?downloadGroup=WKST-1621-WIN&productId=1038&rPId=77282">官网</a>，【Resources→Tools &amp; Training→Product Downloads→Desktop &amp; End-User Computing→VMware Workstation Pro】傻瓜式安装，需要秘钥（百度一下即可得到），这里收集到的16.2.1 Pro版本的VMware的秘钥为：<code>ZF3R0-FHED2-M80TY-8QYGC-NPKYF</code>，即可激活使用。</p>
<h2 id="2-ubantu下载安装"><a href="#2-ubantu下载安装" class="headerlink" title="2. ubantu下载安装"></a>2. ubantu下载安装</h2><p>登入：<a href="https://ubuntu.com/">官网</a>，下载结果为一个后缀为<code>.iso</code>的镜像文件</p>
<h2 id="3-VMware中安装ubantu"><a href="#3-VMware中安装ubantu" class="headerlink" title="3. VMware中安装ubantu"></a>3. VMware中安装ubantu</h2><ul>
<li><p>【文件→新建虚拟机→新建虚拟机向导】</p>
<p><img src="https://gitee.com/crazy_zsh/Images/raw/master/myImages/image-20220111111446781.png" alt="image-20220111111446781"></p>
<p><img src="https://gitee.com/crazy_zsh/Images/raw/master/myImages/image-20220111111623852.png" alt="image-20220111111623852"></p>
<p><img src="https://gitee.com/crazy_zsh/Images/raw/master/myImages/image-20220111111711933.png" alt="image-20220111111711933"></p>
<p><img src="https://gitee.com/crazy_zsh/Images/raw/master/myImages/image-20220111111805293.png" alt="image-20220111111805293"></p>
</li>
<li><p>加载镜像文件</p>
</li>
<li><p>安装ubantu【需要耗费一定时间】</p>
</li>
</ul>
<h2 id="4-常见问题"><a href="#4-常见问题" class="headerlink" title="4. 常见问题"></a>4. 常见问题</h2><ul>
<li><p>安装ubantu时安装界面显示不全解决方案：</p>
<p>Alt+F7+鼠标左键</p>
</li>
<li><p>安装VMware Tools</p>
</li>
<li><h1 id="二、常见命令"><a href="#二、常见命令" class="headerlink" title="二、常见命令"></a>二、常见命令</h1></li>
</ul>
<h2 id="1-文件列表"><a href="#1-文件列表" class="headerlink" title="1. 文件列表"></a>1. 文件列表</h2><ul>
<li><p><code>ls</code>：查看<strong>当前目录</strong>下的文件列表（包括文件夹/文件）</p>
</li>
<li><p><code>ls /</code>：查看<strong>根目录</strong>下的文件夹/文件</p>
</li>
<li><p><code>ls /xxx</code>：查看<strong>任意目录下</strong>的文件夹/文件【须以<code>/</code>开头，xxx为具体路径名称】</p>
</li>
<li><p><code>ls -l</code>：以<strong>详细的方式</strong>列出文件夹/文件</p>
</li>
</ul>
<h2 id="2-切换目录"><a href="#2-切换目录" class="headerlink" title="2. 切换目录"></a>2. 切换目录</h2><ul>
<li><code>pwd</code>  (print work directory)：查看当前所在文件夹（包括当前文件夹下的文件和文件夹）</li>
<li><code>~</code>：当前用户主目录</li>
<li><code>cd</code> （change directory)：切换文件夹</li>
<li><code>.</code>：当前目录</li>
<li><code>..</code>：上一级目录</li>
<li>示例：<code>cd ~/solftware</code>=<code>cd /home/crazyzsh/solftware</code> </li>
</ul>
<h2 id="3-目录操作"><a href="#3-目录操作" class="headerlink" title="3. 目录操作"></a>3. 目录操作</h2><ul>
<li><code>mkdir</code> ( make directory)：创建目录</li>
<li><code>mkdir -p</code>：创建深层目录（如果创建深层目录不加<code>-p</code>的话会报错）</li>
<li><code>rmdir</code>：删除一个空目录（如果目录非空，则删除不成功，不常用）</li>
<li><code>rm -rf xxx</code> (r→recursive：递归的，f→force)：彻底删除一个目录xxx（包括目录中所有的目录或文件）</li>
<li><code>rm -rf /*</code>：删库跑路（只有root用户才能使用）</li>
<li><code>cp -rf a b</code>：将a（文件或文件夹）复制一份为b（如果b存在，则将a复制到b文件夹下面）</li>
<li><code>mv a b</code>：将a（文件或文件夹）重命名（也称移动）为b</li>
</ul>
<h2 id="4-压缩-解压"><a href="#4-压缩-解压" class="headerlink" title="4. 压缩/解压"></a>4. 压缩/解压</h2><p>tar：tape archive</p>
<p><strong>归档</strong>：</p>
<ul>
<li><code>tar -cvf 【要被打包成的问价名.tar】【要打包的文件名】 </code>→可以有多个文件夹或文件一同被压缩（只需以空格隔开即可）</li>
</ul>
<p><strong>还原</strong>档案包：</p>
<ul>
<li><code>tar -xvf 压缩文件名.tar</code></li>
<li><code>tar -xvf压缩文件名.tar-C 目标文件夹 </code> →还原档案到指定文件夹，<code>C</code>为大写</li>
</ul>
<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>c</td>
<td>生成档案文件，创建打包文件</td>
</tr>
<tr>
<td>x</td>
<td>解开档案文件</td>
</tr>
<tr>
<td>v</td>
<td>列出归档解档的详细过程，显示进度</td>
</tr>
<tr>
<td>f</td>
<td>指定档案文件名称，f 后面一定是 .tar 文件，所以必须放选项最后</td>
</tr>
</tbody></table>
<p><strong>归档并压缩</strong>：</p>
<p><code>tar -zcvf 【要被打包成的问价名.tar.gz】【要打包的文件名】 </code></p>
<p><strong>解压缩</strong></p>
<ul>
<li><code>tar -zxvf 压缩文件名.tar.gz</code></li>
<li><code>tar -zxvf压缩文件名.tar.gz-C 目标文件夹 </code> →解压到指定文件夹，<code>C</code>为大写</li>
</ul>
<h2 id="5-软链接"><a href="#5-软链接" class="headerlink" title="5. 软链接"></a>5. 软链接</h2><p>软链接即快捷方式（link)，<code>-s</code>：soft，默认为硬</p>
<ul>
<li><p><code>ln -s 文件夹/文件 链接名称</code></p>
</li>
<li><p>使用<code>ls -l</code>显示出具体文件详情：</p>
<p><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202201132241121.png" alt="image-20220113224119054"></p>
<p>带有<code>l</code>的即为link</p>
<p>带有<code>-</code>的即为文件</p>
<p>带有<code>d</code>的即为目录</p>
</li>
</ul>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络</title>
    <url>/2022/05/02/2022/computer_security/</url>
    <content><![CDATA[<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><p><strong>Secure Shell</strong>（安全外壳协议，简称<strong>SSH</strong>）是一种加密的<a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE">网络传输协议</a>，可在不安全的网络中为网络服务提供安全的传输环境。SSH通过在网络中创建<a href="https://zh.wikipedia.org/w/index.php?title=%E5%AE%89%E5%85%A8%E9%9A%A7%E9%81%93&action=edit&redlink=1">安全隧道</a>来实现SSH客户端与服务器之间的连接)。SSH最常见的用途是远程登录系统，人们通常利用SSH来传输<a href="https://zh.wikipedia.org/wiki/%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%95%8C%E9%9D%A2">命令行界面</a>和远程执行命令。SSH使用频率最高的场合是<a href="https://zh.wikipedia.org/wiki/%E7%B1%BBUnix%E7%B3%BB%E7%BB%9F">类Unix系统</a>，但是<a href="https://zh.wikipedia.org/wiki/Windows">Windows</a>操作系统也能有限度地使用SSH。2015年，微软宣布将在未来的操作系统中提供原生SSH协议支持，<a href="https://zh.wikipedia.org/wiki/Windows">Windows</a> 10 1803版本已提供<a href="https://zh.wikipedia.org/wiki/OpenSSH">OpenSSH</a>工具)。</p>
<p>SSH以<a href="https://zh.wikipedia.org/wiki/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86">非对称加密</a>实现<a href="https://zh.wikipedia.org/wiki/%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81">身份验证</a>[<a href="https://zh.wikipedia.org/wiki/Secure_Shell#cite_note-rfc4252-2">2]</a>。身份验证有多种途径，例如其中一种方法是使用自动生成的公钥-私钥对来简单地加密网络连接，随后使用密码认证进行登录；另一种方法是人工生成一对公钥和私钥，通过生成的密钥进行认证，这样就可以在不输入密码的情况下登录。任何人都可以自行生成密钥。公钥需要放在待访问的电脑之中，而对应的私钥需要由用户自行保管。认证过程基于生成出来的私钥，但整个认证过程中私钥本身不会传输到网络中。</p>
<p>SSH协议有两个主要版本，分别是SSH-1和SSH-2。无论是哪个版本，核实未知密钥来源都是重要的事情，因为SSH只验证提供用户是否拥有与公钥相匹配的私钥，只要接受公钥而且密钥匹配服务器就会授予许可。这样的话，一旦接受了恶意攻击者的公钥，那么系统也会把攻击者视为合法用户。</p>
<p>在<a href="https://zh.wikipedia.org/wiki/%E7%B1%BBUnix%E7%B3%BB%E7%BB%9F">类Unix系统</a>中，已许可登录的公钥通常保存在用户 /home 目录的 ~/.ssh/authorized_keys 文件中[<a href="https://zh.wikipedia.org/wiki/Secure_Shell#cite_note-10">10]</a>，该文件只由SSH使用。当远程机器持有公钥，而本地持有对应私钥时，登录过程不再需要手动输入密码。另外为了额外的安全性，私钥本身也能用密码保护。</p>
<p>私钥会保存在固定位置，也可以通过命令行参数指定（例如ssh命令的“-i”选项）。<a href="https://zh.wikipedia.org/wiki/Ssh-keygen">ssh-keygen</a>是生成密钥的工具之一。</p>
<p>SSH也支持基于密码的身份验证，此时密钥是自动生成的。若客户端和服务端从未进行过身份验证，SSH未记录服务器端所使用的密钥，那么攻击者可以模仿服务器端请求并获取密码，即<a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB">中间人攻击</a>。但是密码认证可以禁用，而且SSH客户端在发现新密钥或未知服务器时会向用户发出警告。</p>
<p>SSH协议框架中最主要的部分是三个协议：</p>
<ol>
<li><strong>传输层协议</strong>（The Transport Layer Protocol）：传输层协议提供<a href="https://zh.wikipedia.org/wiki/%E6%9C%8D%E5%8A%A1%E5%99%A8">服务器</a>认证，数据机密性，信息完整性等的支持。</li>
<li><strong>用户认证协议</strong>（The User Authentication Protocol）：用户认证协议为服务器提供客户端的身份鉴别。</li>
<li><strong>连接协议</strong>（The Connection Protocol）：连接协议将加密的信息隧道复用成若干个逻辑通道，提供给更高层的应用协议使用。</li>
</ol>
<p>SSH的安全验证</p>
<p>在客户端来看，SSH提供两种级别的安全验证。</p>
<ul>
<li>第一种级别（基于密码的安全验证），知道帐号和密码，就可以登录到远程主机，并且所有传输的数据都会被SSH传输层协议加密。但是，可能会有别的服务器在冒充真正的服务器，但只要客户端校验主机公钥，在服务器私钥不泄露的前提下就能避免被“中间人”攻击。</li>
<li>第二种级别（基于<a href="https://zh.wikipedia.org/wiki/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86">密钥</a>的安全验证），需要依靠密钥，也就是你必须为自己创建一对密钥，并把公钥放在需要访问的服务器上。客户端软件会向服务器发出请求，请求用你的私钥进行安全验证并发送使用私钥对会话ID等信息的签名。服务器收到请求之后，先在你在该服务器的用户根目录下寻找你的公钥，然后把它和你发送过来的公钥进行比较，并用公钥检验签名是否正确。如果两个密钥一致，且签名正确，服务器就认为用户登录成功。</li>
</ul>
<p>在服务器端来看，SSH也提供安全验证。</p>
<ul>
<li>服务器将自己的公钥分发给相关的客户端，并将密钥交换过程中的公开信息与协商密钥的哈希值的签名发送给客户端，客户端将获取的服务器公钥计算指纹并与其他安全信道获得的公钥指纹相比对并验证主机签名。</li>
<li>存在一个密钥认证中心，所有提供服务的主机都将自己的公钥提交给认证中心，公钥认证中心给服务端颁发证书，而任何作为客户端的主机则只要保存一份认证中心的公钥就可以了。在这种模式下，服务器会发送认证中心提供给主机的证书与主机对密钥交换过程中公开信息的签名。客户端只需要验证证书的有效性并验证签名。</li>
</ul>
<h2 id="TLS-SSL"><a href="#TLS-SSL" class="headerlink" title="TLS/SSL"></a>TLS/SSL</h2><p><strong>传输层安全性协议</strong>（英语：<strong>T</strong>ransport <strong>L</strong>ayer <strong>S</strong>ecurity，缩写：<strong>TLS</strong>）及其前身<strong>安全套接层</strong>（英语：<strong>S</strong>ecure <strong>S</strong>ockets <strong>L</strong>ayer，缩写：<strong>SSL</strong>）是一种<a href="https://zh.wikipedia.org/wiki/%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE">安全协议</a>，目的是为<a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E9%9A%9B%E7%B6%B2%E8%B7%AF">互联网</a>通信提供安全及数据<a href="https://zh.wikipedia.org/wiki/%E5%AE%8C%E6%95%B4%E6%80%A7">完整性</a>保障。<a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E6%99%AF">网景</a>公司（Netscape）在1994年推出首版<a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E9%A0%81%E7%80%8F%E8%A6%BD%E5%99%A8">网页浏览器</a>－<a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E6%99%AF%E9%A0%98%E8%88%AA%E5%93%A1">网景导航者</a>时，<strong>推出<a href="https://zh.wikipedia.org/wiki/HTTPS">HTTPS</a>协议，以SSL进行加密，这是SSL的起源。</strong><a href="https://zh.wikipedia.org/wiki/IETF">IETF</a>将SSL进行标准化，1999年公布TLS 1.0标准文件（<a href="https://tools.ietf.org/html/rfc2246">RFC 2246</a>）。随后又公布TLS 1.1（<a href="https://tools.ietf.org/html/rfc4346">RFC 4346</a>，2006年）、TLS 1.2（<a href="https://tools.ietf.org/html/rfc5246">RFC 5246</a>，2008年）和TLS 1.3（<a href="https://tools.ietf.org/html/rfc8446">RFC 8446</a>，2018年）。在<a href="https://zh.wikipedia.org/wiki/%E7%80%8F%E8%A6%BD%E5%99%A8">浏览器</a>、<a href="https://zh.wikipedia.org/wiki/%E9%9B%BB%E5%AD%90%E9%83%B5%E4%BB%B6">电子邮件</a>、<a href="https://zh.wikipedia.org/wiki/%E5%8D%B3%E6%99%82%E9%80%9A%E8%A8%8A">即时通信</a>、<a href="https://zh.wikipedia.org/wiki/VoIP">VoIP</a>、<a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E7%B5%A1%E5%82%B3%E7%9C%9F">网络传真</a>等应用程序中，广泛使用这个协议。许多网站，如<a href="https://zh.wikipedia.org/wiki/Google">Google</a>、<a href="https://zh.wikipedia.org/wiki/Facebook">Facebook</a>、<a href="https://zh.wikipedia.org/wiki/Wikipedia">Wikipedia</a>等也以这个协议来创建安全连线，发送资料。目前已成为<a href="https://zh.wikipedia.org/wiki/%E4%BA%92%E8%81%94%E7%BD%91">互联网</a>上保密通信的工业标准。</p>
<p>SSL包含记录层（Record Layer）和<a href="https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E5%B1%82">传输层</a>，记录层协议确定传输层数据的封装格式。传输层安全协议使用<a href="https://zh.wikipedia.org/wiki/X.509">X.509</a>认证，之后利用非对称加密演算来对通信方做身份认证，之后交换对称密钥作为会谈密钥（<a href="https://zh.wikipedia.org/wiki/Session_key">Session key</a>）。这个会谈密钥是用来将通信两方交换的资料做加密，保证两个应用间通信的保密性和可靠性，使客户与服务器应用之间的通信不被攻击者窃听。</p>
<h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><p>2xx：成功</p>
<p>3xx：重定向</p>
<p>4xx：客户端错误</p>
<p>5xx：服务端错误</p>
<p><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202204301246734.png" alt="image-20220430124638634"></p>
<h2 id="http缓存"><a href="#http缓存" class="headerlink" title="http缓存"></a>http缓存</h2><p>不同网站的反应头的大小写规则不一致，有的以大写开头，中间以-进行连接，有的以小写开头，中间以-进行连接</p>
<ul>
<li><p>cache-control：</p>
<ul>
<li><p>cache-control:max-age=31536000，这里单位为秒，即一年（b站为例）</p>
</li>
<li><p>cache-control:no-cache，例如html资源，并不意味着不进行缓存，而是每次使用缓存时都和服务器进行确认，同时代理服务器也不能进行缓存，一般网页框架不会经常变动就可以这样设置。</p>
</li>
<li><p>cache-control:no-store，不进行缓存</p>
</li>
<li><p>Cache-Control:private：表示所有代理服务器都不能进行资源缓存，只有浏览器可以进行缓存</p>
</li>
<li><p>Cache-Control:public：表示浏览器和代理服务器都可以进行缓存</p>
</li>
</ul>
</li>
<li><p>etag：标识资源（例如图片等资源会有此），一般来说，每次资源更新后，新的etag值也会被服务器更新</p>
</li>
<li><p>expires：缓存过期时间，在过期时间之前，不会向服务器要求更新资源</p>
</li>
<li><p>last-modified：如果服务器在上次被请求后进行了资源更新，那么下一次请求时所请求到的资源就会不一样，即上次的缓存（这里的上次指的是某一次有效缓存）就不可以使用了。所以此字段可以判断资源最新修改时间是否与上次缓存时最新修改时间一致，如果一致，表示资源没有别修改，如果不一致，就得让服务器重新返回新的资源了。</p>
</li>
</ul>
<h2 id="浏览器中输入URL之后发生的事"><a href="#浏览器中输入URL之后发生的事" class="headerlink" title="浏览器中输入URL之后发生的事"></a>浏览器中输入URL之后发生的事</h2><p>输入url之后就会通过DNS进行解析，解析到某个固定的ip地址</p>
<p><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202204301406294.png" alt="image-20220430140648255"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202204301406999.png" alt="image-20220430140658971"></p>
<h2 id="http-https"><a href="#http-https" class="headerlink" title="http/https"></a>http/https</h2><p>http协议的请求报文和响应报文都是明文的，这就使得传输不安全，于是就有了https，https在http的基础上用TLS/SSL进行加密，这样通信就不容易收到拦截和攻击。SSL是TLS的前身</p>
<h2 id="TCP三次握手和四次挥手"><a href="#TCP三次握手和四次挥手" class="headerlink" title="TCP三次握手和四次挥手"></a>TCP三次握手和四次挥手</h2><p>例如edge浏览器和谷歌浏览器分别同时登入B站，此时本机的ip是一致的，不同的是端口号，即Edge浏览器和Chrome浏览器被分配的端口不一样，所以才能同时进行登入，互不干扰。</p>
<p>ip地址+端口号被称为套接字（socket）</p>
<p>TCP报文中有SYN，ACK（acknowledgment：确认），FIN等标识，</p>
<p>三次握手</p>
<p>TCP/IP 协议是传输层的一个面向连接的安全可靠的一个传输协议，三次握手的机制是为了保证能建立一个安全可靠的连接，那么第一次握手是由客户端发起，客户端会向服务端发送一个报文，在报文里面：SYN标志位置为1，表示发起新的连接。当服务端收到这个报文之后就知道客户端要和我建立一个新的连接，于是服务端就向客户端发送一个确认消息包，在这个消息包里面：ack标志位置为1，表示确认客户端发起的第一次连接请求。以上两次握手之后，对于客户端而言：已经明确了我既能给服务端成功发消息，也能成功收到服务端的响应。但是对于服务端而言：两次握手是不够的，因为到目前为止，服务端只知道一件事，客户端发给我的消息我能收到，但是我响应给客户端的消息，客户端能不能收到我是不知道的。所以，还需要进行第三次握手，第三次握手就是当客户端收到服务端发送的确认响应报文之后，还要继续去给服务端进行回应，也是一个ack标志位置1的确认消息。通过以上三次连接，不管是客户端还是服务端，都知道我既能给对方发送消息，也能收到对方的响应。那么，这个连接就被安全的建了。</p>
<p><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202204301603585.png" alt="image-20220430160348523"></p>
<p>四次挥手</p>
<p>四次挥手：由客户端首先发起的，第一次挥手客户端会发送一个报文，在报文里面FIN标志位置1，当服务端收到这个报文就知道了客户端想要和我断开连接，但是此时服务端不一定能做好准备，因为当客户端发起断开连接的请求后，对于服务端而言还极有可能有未发送完的消息，还需继续发送，所以此时对于服务端而言只能进行一个消息确认（第二次挥手），即告诉客户端我知道你要和我断开连接，但是我这边还可能没有做好准备，你需要等我一下，等会儿我会告诉你（第三次挥手），于是，发完这个消息确认包过后，可能稍过片刻，服务端会继续发送一个断开连接的报文（第三次挥手），FIN位置1的报文，表示服务端已经做好断开连接的准备，当这个报文发给客户端的时候，客户端同样要给服务端发送一个消息确认的报文（第四次挥手），经过这四次的相互沟通和连接，我就知道了不管是客户端还是服务端都已经做好了断开连接的准备，于是连接断开了，这是我对……</p>
<p><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202204301603241.png" alt="image-20220430160305171"></p>
<h2 id="公钥和私钥"><a href="#公钥和私钥" class="headerlink" title="公钥和私钥"></a>公钥和私钥</h2><blockquote>
<p>对称秘钥系统</p>
</blockquote>
<p>理想情况：加密算法只对接收者公开，他人无法得知加密算法，相当于发送者和接收者各持一把钥匙，此时数据是绝对安全的。但是现实是几乎所有的加密算法都是公开的。</p>
<blockquote>
<p>公开秘钥系统（效率比较低）</p>
</blockquote>
<p>实际情况1：公钥即公开的，公钥能解密私钥加密的数据，私钥也能解密公钥加密的数据。<strong>发送者</strong>使用<strong>接收者</strong>的<u>公钥</u>进行加密，<strong>接收者</strong>使用自己的<strong>秘钥</strong>进行解密，但是中间过程容易被劫持篡改，接收者不能确定中间过程是否被劫持篡改，此时就需要<strong>数字签名</strong>来确定发送者传输过来的数据是否被篡改，以确保数据绝对的安全。</p>
<blockquote>
<p>数字签名(与上述的公开秘钥系统配合使用)</p>
</blockquote>
<p>数字签名的原理是：<strong>发送者</strong>使用自己的私钥对报文进行加密，形成数字签名，然后将签名连同文件一同发送给接收者，<strong>接收者</strong>使用发送者的公钥对签名进行解密，与收到的明文（公开秘钥系统中解密出来的）进行<strong>对比</strong>，如果相同，则未被篡改，一定能验证报文来自发送方，因为既然能用<strong>发送者</strong>的<strong>公钥</strong>解密出原始数据，那就证明这段数据一定是用发送方的私钥进行加密的。数字签名不仅能用来识别数据发送方，同时还保证了数据的完整性，因为如果报文被篡改，接收方收到数据后用签名计算出的报文一定与接收数据不相同</p>
<blockquote>
<p>密码散列函数（一对一，即输入是什么，输出唯一，如果输入被修改则输出也被修改），被称为“数据指纹”</p>
</blockquote>
<p>仅仅是为了签名而对完整的报文进行私钥加密计算，代价比较昂贵，可以用到密码散列函数，先得到原始报文的摘要，再对摘要进行签名</p>
]]></content>
      <categories>
        <category>computer</category>
      </categories>
      <tags>
        <tag>computer</tag>
      </tags>
  </entry>
  <entry>
    <title>js算法</title>
    <url>/2022/03/04/2022/algorithm/</url>
    <content><![CDATA[<h1 id="零、基础"><a href="#零、基础" class="headerlink" title="零、基础"></a>零、基础</h1><h2 id="1-二进制与十进制的转换"><a href="#1-二进制与十进制的转换" class="headerlink" title="1. 二进制与十进制的转换"></a>1. 二进制与十进制的转换</h2><ul>
<li><p>十进制转二进制</p>
<ul>
<li>将数字不断除以2并取其余数，每次取余之后得到整数部分继续求余，直到不能取余为止（不出现负数）</li>
<li>将求到的余数从后往前拼起来就是二进制</li>
</ul>
</li>
<li><p>十进制转二进制</p>
<ul>
<li>从后往前从0开始进行编号，遇到1就进行以2为底进行幂计算，比如第4位为1，此时就加上2的4次方</li>
</ul>
</li>
</ul>
<h2 id="2-复习类"><a href="#2-复习类" class="headerlink" title="2. 复习类"></a>2. 复习类</h2><ul>
<li><p><a href="https://blog.csdn.net/jiaojsun/article/details/99831112?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164603406116780255223092%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=164603406116780255223092&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-29-99831112.pc_search_result_positive&utm_term=js+class&spm=1018.2226.3001.4187">关于类的一些实用写法</a></p>
</li>
<li><p>类中方法中可以直接实例化类</p>
</li>
</ul>
<h2 id="3-复习对象"><a href="#3-复习对象" class="headerlink" title="3. 复习对象"></a>3. 复习对象</h2><ul>
<li><p>删除键：</p>
<p><code>delete obj[键名]</code></p>
<p><code>delete obj.键名</code></p>
</li>
<li><p>查看是否有属性</p>
<p><code>obj.hasOwnProperty(键名)</code></p>
</li>
<li><p>查看对象中所有的键==&gt;以数组的形式返回</p>
<p><code>Object.keys(obj)</code></p>
</li>
</ul>
<p>​    </p>
<h1 id="一、数组"><a href="#一、数组" class="headerlink" title="一、数组"></a>一、数组</h1><p>几乎所有的编程语言都原生支持数组类型，因为数组是最简单的内存数据结构。 数组通常情况下用于存储一系列同一种数据类型的值。 但在 JavaScript 里，数组中可以保存不同类型的值。但我们还是要遵守最佳实践，别这么做（大多数语言都没这个能力）。</p>
<h2 id="1-创建和初始化数组"><a href="#1-创建和初始化数组" class="headerlink" title="1. 创建和初始化数组"></a>1. 创建和初始化数组</h2><ul>
<li><p><code>new Array()</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> daysOfWeek = <span class="keyword">new</span> <span class="built_in">Array</span>(</span><br><span class="line">  <span class="string">&quot;Sunday&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Monday&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Tuesday&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Wednesday&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Thursday&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Friday&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Saturday&quot;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li>
<li><p><code>[]</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> daysOfWeek = [</span><br><span class="line">  <span class="string">&quot;Sunday&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Monday&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Tuesday&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Wednesday&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Thursday&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Friday&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Saturday&quot;</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="2-数组常见操作"><a href="#2-数组常见操作" class="headerlink" title="2. 数组常见操作"></a>2. 数组常见操作</h2><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><ul>
<li><p>添加一个元素到数组的最后位置 <code>array.push(item)</code></p>
</li>
<li><p>在数组首位插入一个元素 <code>array.unshift(item)</code></p>
</li>
<li><p>在指定索引位置插入元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">array.splice(index, <span class="number">0</span>, item)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>splice() 第二个参数为 0 时，表示插入数据。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// 在 索引 0 的位置，插入 A</span></span><br><span class="line">myArray.splice(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;A&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(myArray); <span class="comment">//--&gt; [&#x27;A&#x27;, 1, 2, 3]</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><ul>
<li><p>删除数组最后的元素 <code>array.pop(item)</code></p>
</li>
<li><p>删除数组首位的元素 <code>array.shift(item)</code></p>
</li>
<li><p>删除指定索引位置的元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">array.splice(start, number)</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myArray2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">// 删除索引 4 位置起，2 个元素</span></span><br><span class="line">myArray2.splice(<span class="number">4</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(myArray2); <span class="comment">//--&gt; [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myArray5 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="comment">// 删除索引 4 位置起后 所有 元素</span></span><br><span class="line">myArray5.splice(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(myArray5); <span class="comment">//--&gt; [0, 1, 2, 3]</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="修改元素（替换）"><a href="#修改元素（替换）" class="headerlink" title="修改元素（替换）"></a>修改元素（替换）</h3><ul>
<li><p>修改指定索引位置的元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">array.splice(index, <span class="number">1</span>, item)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myArray3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="comment">// 修改 索引 1 的位置的元素为 AA</span></span><br><span class="line">myArray2.splice(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;AA&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(myArray3); <span class="comment">//--&gt; [1, &quot;AA&quot;, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改指定索引位置的几个元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">array.splice(index, number, item)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myArray4 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="comment">// 在 索引 2 的位置起，修改两个元素为 AA BB</span></span><br><span class="line">myArray4.splice(<span class="number">2</span>, <span class="number">2</span>, <span class="string">&quot;AA&quot;</span>, <span class="string">&quot;BB&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(myArray4); <span class="comment">//--&gt; [0, 1, &quot;AA&quot;, &quot;BB&quot;, 4, 5, 6]</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// 在 索引 0 的位置，插入 A</span></span><br><span class="line">myArray.splice(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;A&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(myArray); <span class="comment">//--&gt; [&#x27;A&#x27;, 1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myArray2 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="comment">// 删除索引 4 位置起，2 个元素</span></span><br><span class="line">myArray2.splice(<span class="number">4</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(myArray2); <span class="comment">//--&gt; [0, 1, 2, 3, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myArray3 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="comment">// 修改 索引 1 的位置的元素为 AA</span></span><br><span class="line">myArray3.splice(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;AA&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(myArray3); <span class="comment">//--&gt; [0, &quot;AA&quot;, 2, 3, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myArray4 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="comment">// 在 索引 2 的位置起，修改两个元素为 AA BB</span></span><br><span class="line">myArray4.splice(<span class="number">2</span>, <span class="number">2</span>, <span class="string">&quot;AA&quot;</span>, <span class="string">&quot;BB&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(myArray4); <span class="comment">//--&gt; [0, 1, &quot;AA&quot;, &quot;BB&quot;, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myArray5 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="comment">// 删除索引 4 位置起后所有元素</span></span><br><span class="line">myArray5.splice(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(myArray5); <span class="comment">//--&gt; [0, 1, 2, 3]</span></span><br></pre></td></tr></table></figure>

<h1 id="二、栈"><a href="#二、栈" class="headerlink" title="二、栈"></a>二、栈</h1><p>数组是一个线性结构，并且可以在数组的任意位置插入和删除元素。 但是有时候，我们为了实现某些功能，必须对这种任意性加以限制。 栈和队列就是比较常见的受限的线性结构。</p>
<h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>栈（stack）是一种运算受限的线性表：</p>
<ul>
<li><code>LIFO（last in first out）</code>表示就是后进入的元素，第一个弹出栈空间。类似于自动餐托盘，最后放上的托盘，往往先把拿出去使用。</li>
<li>其限制是仅允许在表的一端进行插入和删除运算。这一端被称为栈顶，相对地，把另一端称为栈底。</li>
<li>向一个栈插入新元素又称作进栈、入栈或压栈，它是把新元素放到栈顶元素的上面，使之成为新的栈顶元素；</li>
<li>从一个栈删除元素又称作出栈或退栈，它是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素。</li>
</ul>
<p>如下图所示： <a href="https://camo.githubusercontent.com/1909eae6772b598e2440da539f01cae2f548f6682eb0380ce1c055e5527ba407/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e3731787433326f6b72336b302e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202202271515789.png" alt="image"></a></p>
<p>栈的特点：<strong>先进后出，后进先出</strong>。</p>
<h2 id="2-程序中的栈结构"><a href="#2-程序中的栈结构" class="headerlink" title="2. 程序中的栈结构"></a>2. 程序中的栈结构</h2><ul>
<li>函数调用栈：A(B(C(D())))： 即 A 函数中调用 B，B 调用 C，C 调用 D；在 A 执行的过程中会将 A 压入栈，随后 B 执行时 B 也被压入栈，函数 C 和 D 执行时也会被压入栈。所以当前栈的顺序为：A-&gt;B-&gt;C-&gt;D（栈顶）；函数 D 执行完之后，会弹出栈被释放，弹出栈的顺序为 D-&gt;C-&gt;B-&gt;A;</li>
<li>递归： 为什么没有停止条件的递归会造成栈溢出？比如函数 A 为递归函数，不断地调用自己（<strong>因为函数还没有执行完，不会把函数弹出栈</strong>），不停地把相同的函数 A 压入栈，最后造成栈溢出（Queue Overfloat）。</li>
</ul>
<h2 id="3-练习"><a href="#3-练习" class="headerlink" title="3. 练习"></a>3. 练习</h2><p>题目：有 6 个元素 6，5，4，3，2，1 按顺序进栈，问下列哪一个不是合法的出栈顺序？</p>
<ul>
<li>A：5 4 3 6 1 2 （√）</li>
<li>B：4 5 3 2 1 6 （√）</li>
<li>C：3 4 6 5 2 1 （×）</li>
<li>D：2 3 4 1 5 6 （√）</li>
</ul>
<p>题目所说的按顺序进栈指的不是一次性全部进栈，而是有进有出，进栈顺序为 6 -&gt; 5 -&gt; 4 -&gt; 3 -&gt; 2 -&gt; 1。</p>
<p>解析：</p>
<ul>
<li>A 答案：65 进栈，5 出栈，4 进栈出栈，3 进栈出栈，6 出栈，21 进栈，1 出栈，2 出栈（整体入栈顺序符合 654321）。</li>
<li>B 答案：654 进栈，4 出栈，5 出栈，3 进栈出栈，2 进栈出栈，1 进栈出栈，6 出栈（整体的入栈顺序符合 654321）。</li>
<li>C 答案：6543 进栈，3 出栈，4 出栈，之后应该 5 出栈而不是 6，所以错误。</li>
<li>D 答案：65432 进栈，2 出栈，3 出栈，4 出栈，1 进栈出栈，5 出栈，6 出栈。符合入栈顺序。</li>
</ul>
<h2 id="4-栈结构实现"><a href="#4-栈结构实现" class="headerlink" title="4. 栈结构实现"></a>4. 栈结构实现</h2><h3 id="栈常见的操作"><a href="#栈常见的操作" class="headerlink" title="栈常见的操作"></a>栈常见的操作</h3><ul>
<li><code>push()</code> 添加一个新元素到栈顶位置。</li>
<li><code>pop()</code> 移除栈顶的元素，同时返回被移除的元素。</li>
<li><code>peek()</code> 返回栈顶的元素，不对栈做任何修改（该方法不会移除栈顶的元素，仅仅返回它）。</li>
<li><code>isEmpty()</code> 如果栈里没有任何元素就返回 <code>true</code>，否则返回 <code>false</code>。</li>
<li><code>size()</code> 返回栈里的元素个数。这个方法和数组的 <code>length</code> 属性类似。</li>
<li><code>toString()</code> 将栈结构的内容以字符串的形式返回。</li>
</ul>
<h3 id="JavaScript-代码实现栈结构"><a href="#JavaScript-代码实现栈结构" class="headerlink" title="JavaScript 代码实现栈结构"></a>JavaScript 代码实现栈结构</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 栈结构的封装</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items = [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// push(item) 压栈操作，往栈里面添加元素</span></span><br><span class="line">  <span class="function"><span class="title">push</span>(<span class="params">item</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items.push(item);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// pop() 出栈操作，从栈中取出元素，并返回取出的那个元素</span></span><br><span class="line">  <span class="function"><span class="title">pop</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.pop();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// peek() 查看栈顶元素</span></span><br><span class="line">  <span class="function"><span class="title">peek</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items[<span class="built_in">this</span>.items.length - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// isEmpty() 判断栈是否为空</span></span><br><span class="line">  <span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.length === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// size() 获取栈中元素个数</span></span><br><span class="line">  <span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.length;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// toString() 返回以字符串形式的栈内元素数据</span></span><br><span class="line">  <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> <span class="built_in">this</span>.items) &#123;</span><br><span class="line">      result += item + <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试封装的栈结构"><a href="#测试封装的栈结构" class="headerlink" title="测试封装的栈结构"></a>测试封装的栈结构</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">stack=<span class="keyword">new</span> Stack()</span><br><span class="line"><span class="comment">// push() 测试</span></span><br><span class="line">stack.push(<span class="number">1</span>);</span><br><span class="line">stack.push(<span class="number">2</span>);</span><br><span class="line">stack.push(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(stack.items); <span class="comment">//--&gt; [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// pop() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(stack.pop()); <span class="comment">//--&gt; 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// peek() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(stack.peek()); <span class="comment">//--&gt; 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// isEmpty() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(stack.isEmpty()); <span class="comment">//--&gt; false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// size() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(stack.size()); <span class="comment">//--&gt; 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// toString() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(stack.toString()); <span class="comment">//--&gt; 1 2</span></span><br></pre></td></tr></table></figure>

<h2 id="5-栈结构的简单应用"><a href="#5-栈结构的简单应用" class="headerlink" title="5. 栈结构的简单应用"></a>5. 栈结构的简单应用</h2><p>利用栈结构的特点封装实现十进制转换为二进制（<strong>除二取余法</strong>）的方法。</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dec2bin</span>(<span class="params">dec</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// new 一个 Stack，保存余数</span></span><br><span class="line">  <span class="keyword">const</span> stack = <span class="keyword">new</span> Stack();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当不确定循环次数时，使用 while 循环</span></span><br><span class="line">  <span class="keyword">while</span> (dec &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 除二取余法</span></span><br><span class="line">    stack.push(dec % <span class="number">2</span>); <span class="comment">// 获取余数，放入栈中</span></span><br><span class="line">    dec = <span class="built_in">Math</span>.floor(dec / <span class="number">2</span>); <span class="comment">// 除数除以二，向下取整</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> binaryString = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="comment">// 不断地从栈中取出元素（0 或 1），并拼接到一起。</span></span><br><span class="line">  <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">    binaryString += stack.pop();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> binaryString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dec2bin() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(dec2bin(<span class="number">100</span>)); <span class="comment">//--&gt; 1100100</span></span><br><span class="line"><span class="built_in">console</span>.log(dec2bin(<span class="number">88</span>)); <span class="comment">//--&gt; 1011000</span></span><br></pre></td></tr></table></figure>

<h1 id="三-1-、队列"><a href="#三-1-、队列" class="headerlink" title="三(1)、队列"></a>三(1)、队列</h1><h2 id="1-定义-1"><a href="#1-定义-1" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>队列（Queue）是一种运算受限的线性表，特点：先进先出。(FIFO：First In First Out)</p>
<p><strong>受限之处：</strong></p>
<ul>
<li>只允许在表的前端（front）进行删除操作。</li>
<li>只允许在表的后端（rear）进行插入操作。</li>
</ul>
<p>生活中类似队列结构的场景：</p>
<ul>
<li>排队，比如在电影院，商场，甚至是厕所排队。</li>
<li>优先排队的人，优先处理。 (买票、结账、WC)。</li>
</ul>
<p><a href="https://camo.githubusercontent.com/6ae86653e11853bfb631bc388cd26928c9bb882008f40a62abba286011cd8f40/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e356d6d6977326b64776273302e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202202271534563.png" alt="image"></a></p>
<h3 id="队列图解"><a href="#队列图解" class="headerlink" title="队列图解"></a>队列图解</h3><p><a href="https://camo.githubusercontent.com/7e544d0ab712a2bca592d77a3439825833bb2b5dbc7597cdcb99d260b09d9642/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e6d713932627733616d30672e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202202271534714.png" alt="image"></a></p>
<h3 id="队列在程序中的应用"><a href="#队列在程序中的应用" class="headerlink" title="队列在程序中的应用"></a>队列在程序中的应用</h3><ul>
<li>打印队列：计算机打印多个文件的时候，需要排队打印。</li>
<li>线程队列：当开启多线程时，当新开启的线程所需的资源不足时就先放入线程队列，等待 CPU 处理。</li>
</ul>
<h2 id="2-队列的实现"><a href="#2-队列的实现" class="headerlink" title="2. 队列的实现"></a>2. 队列的实现</h2><p>队列的实现和栈一样，有两种方案：</p>
<ul>
<li>基于数组实现。</li>
<li>基于链表实现。</li>
</ul>
<h3 id="队列常见的操作"><a href="#队列常见的操作" class="headerlink" title="队列常见的操作"></a>队列常见的操作</h3><ul>
<li><code>enqueue(element)</code> 向队列尾部添加一个（或多个）新的项。</li>
<li><code>dequeue()</code> 移除队列的第一（即排在队列最前面的）项，并返回被移除的元素。</li>
<li><code>front()</code> 返回队列中的第一个元素——最先被添加，也将是最先被移除的元素。队列不做任何变动（不移除元素，只返回元素信息与 Map 类的 peek 方法非常类似）。</li>
<li><code>isEmpty()</code> 如果队列中不包含任何元素，返回 true，否则返回 false。</li>
<li><code>size()</code> 返回队列包含的元素个数，与数组的 length 属性类似。</li>
<li><code>toString()</code> 将队列中的内容，转成字符串形式。</li>
</ul>
<h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items = [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// enqueue(item) 入队，将元素加入到队列中</span></span><br><span class="line">  <span class="function"><span class="title">enqueue</span>(<span class="params">item</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items.push(item);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// dequeue() 出队，从队列中删除队头元素，返回删除的那个元素</span></span><br><span class="line">  <span class="function"><span class="title">dequeue</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.shift();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// front() 查看队列的队头元素</span></span><br><span class="line">  <span class="function"><span class="title">front</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// isEmpty() 查看队列是否为空</span></span><br><span class="line">  <span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.length === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// size() 查看队列中元素的个数</span></span><br><span class="line">  <span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.length;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// toString() 将队列中的元素以字符串形式返回</span></span><br><span class="line">  <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> <span class="built_in">this</span>.items) &#123;</span><br><span class="line">      result += item + <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> queue = <span class="keyword">new</span> Queue();</span><br><span class="line"></span><br><span class="line"><span class="comment">// enqueue() 测试</span></span><br><span class="line">queue.enqueue(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">queue.enqueue(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">queue.enqueue(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">queue.enqueue(<span class="string">&quot;d&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(queue.items); <span class="comment">//--&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// dequeue() 测试</span></span><br><span class="line">queue.dequeue();</span><br><span class="line">queue.dequeue();</span><br><span class="line"><span class="built_in">console</span>.log(queue.items); <span class="comment">//--&gt; [&quot;c&quot;, &quot;d&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// front() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(queue.front()); <span class="comment">//--&gt; c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// isEmpty() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(queue.isEmpty()); <span class="comment">//--&gt; false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// size() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(queue.size()); <span class="comment">//--&gt; 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// toString() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(queue.toString()); <span class="comment">//--&gt; c d</span></span><br></pre></td></tr></table></figure>

<h2 id="3-队列的应用"><a href="#3-队列的应用" class="headerlink" title="3. 队列的应用"></a>3. 队列的应用</h2><p>使用队列实现小游戏：<strong>击鼓传花</strong>。</p>
<p>分析：传入一组数据集合和设定的数字 number，循环遍历数组内元素，遍历到的元素为指定数字 number 时将该元素删除，直至数组剩下一个元素。</p>
<h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 利用队列结构的特点实现击鼓传花游戏求解方法的封装</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">passGame</span>(<span class="params">nameList, number</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1、new 一个 Queue 对象</span></span><br><span class="line">  <span class="keyword">const</span> queue = <span class="keyword">new</span> Queue();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2、将 nameList 里面的每一个元素入队</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> name <span class="keyword">of</span> nameList) &#123;</span><br><span class="line">    queue.enqueue(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3、开始数数</span></span><br><span class="line">  <span class="comment">// 队列中只剩下 1 个元素时就停止数数</span></span><br><span class="line">  <span class="keyword">while</span> (queue.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 不是 number 时，重新加入到队尾</span></span><br><span class="line">    <span class="comment">// 是 number 时，将其删除</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; number - <span class="number">1</span>; i++) &#123;</span><br><span class="line">      <span class="comment">// number 数字之前的人重新放入到队尾（即把队头删除的元素，重新加入到队列中）</span></span><br><span class="line">      queue.enqueue(queue.dequeue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// number 对应这个人，直接从队列中删除</span></span><br><span class="line">    <span class="comment">// 由于队列没有像数组一样的下标值不能直接取到某一元素，</span></span><br><span class="line">    <span class="comment">// 所以采用，把 number 前面的 number - 1 个元素先删除后添加到队列末尾，</span></span><br><span class="line">    <span class="comment">// 这样第 number 个元素就排到了队列的最前面，可以直接使用 dequeue 方法进行删除</span></span><br><span class="line">    queue.dequeue();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4、获取最后剩下的那个人</span></span><br><span class="line">  <span class="keyword">const</span> endName = queue.front();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 5、返回这个人在原数组中对应的索引</span></span><br><span class="line">  <span class="keyword">return</span> nameList.indexOf(endName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试代码-1"><a href="#测试代码-1" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// passGame() 测试</span></span><br><span class="line"><span class="keyword">const</span> names = [<span class="string">&quot;lily&quot;</span>, <span class="string">&quot;lucy&quot;</span>, <span class="string">&quot;tom&quot;</span>, <span class="string">&quot;tony&quot;</span>, <span class="string">&quot;jack&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> targetIndex = passGame(names, <span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;击鼓传花&quot;</span>, names[targetIndex]); <span class="comment">//--&gt; lily</span></span><br></pre></td></tr></table></figure>

<h1 id="三-2-、优先队列"><a href="#三-2-、优先队列" class="headerlink" title="三(2)、优先队列"></a>三(2)、优先队列</h1><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>生活中类似<strong>优先队列</strong>的场景：</p>
<ul>
<li>优先排队的人，优先处理。 (买票、结账、WC)。</li>
<li>排队中，有紧急情况（特殊情况）的人可优先处理。</li>
</ul>
<h2 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h2><p>优先级队列主要考虑的问题：</p>
<ul>
<li>每个元素不再只是一个数据，还<strong>包含优先级</strong>。</li>
<li>在添加元素过程中，根据优先级放入到正确位置。</li>
</ul>
<h2 id="优先队列的实现"><a href="#优先队列的实现" class="headerlink" title="优先队列的实现"></a>优先队列的实现</h2><h3 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 优先队列内部的元素类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueueElement</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">element, priority</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.element = element;</span><br><span class="line">    <span class="built_in">this</span>.priority = priority;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优先队列类（继承 Queue 类）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PriorityQueue</span> <span class="keyword">extends</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// enqueue(element, priority) 入队，将元素按优先级加入到队列中</span></span><br><span class="line">  <span class="comment">// 重写 enqueue()</span></span><br><span class="line">  <span class="function"><span class="title">enqueue</span>(<span class="params">element, priority</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 根据传入的元素，创建 QueueElement 对象</span></span><br><span class="line">    <span class="keyword">const</span> queueElement = <span class="keyword">new</span> QueueElement(element, priority);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断队列是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="comment">// 如果为空，不用判断优先级，直接添加</span></span><br><span class="line">      <span class="built_in">this</span>.items.push(queueElement);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 定义一个变量记录是否成功添加了新元素===&gt;优化性能，防止已经比较成功还继续进行查找</span></span><br><span class="line">      <span class="keyword">let</span> added = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.items.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 让新插入的元素进行优先级比较，priority 值越小，优先级越大</span></span><br><span class="line">        <span class="keyword">if</span> (queueElement.priority &lt; <span class="built_in">this</span>.items[i].priority) &#123;</span><br><span class="line">          <span class="comment">// 在指定的位置插入元素</span></span><br><span class="line">          <span class="built_in">this</span>.items.splice(i, <span class="number">0</span>, queueElement);</span><br><span class="line">          added = <span class="literal">true</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果遍历完所有元素，优先级都大于新插入的元素，就将新插入的元素插入到最后</span></span><br><span class="line">      <span class="keyword">if</span> (!added) &#123;</span><br><span class="line">        <span class="built_in">this</span>.items.push(queueElement);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// dequeue() 出队，从队列中删除前端元素，返回删除的元素</span></span><br><span class="line">  <span class="comment">// 继承 Queue 类的 dequeue()</span></span><br><span class="line">  <span class="function"><span class="title">dequeue</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.dequeue();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// front() 查看队列的前端元素</span></span><br><span class="line">  <span class="comment">// 继承 Queue 类的 front()</span></span><br><span class="line">  <span class="function"><span class="title">front</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.front();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// isEmpty() 查看队列是否为空</span></span><br><span class="line">  <span class="comment">// 继承 Queue 类的 isEmpty()</span></span><br><span class="line">  <span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.isEmpty();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// size() 查看队列中元素的个数</span></span><br><span class="line">  <span class="comment">// 继承 Queue 类的 size()</span></span><br><span class="line">  <span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.size();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// toString() 将队列中元素以字符串形式返回</span></span><br><span class="line">  <span class="comment">// 重写 toString()</span></span><br><span class="line">  <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> <span class="built_in">this</span>.items) &#123;</span><br><span class="line">      result += item.element + <span class="string">&quot;-&quot;</span> + item.priority + <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试代码-2"><a href="#测试代码-2" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> priorityQueue = <span class="keyword">new</span> PriorityQueue();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入队 enqueue() 测试</span></span><br><span class="line">priorityQueue.enqueue(<span class="string">&quot;A&quot;</span>, <span class="number">10</span>);</span><br><span class="line">priorityQueue.enqueue(<span class="string">&quot;B&quot;</span>, <span class="number">15</span>);</span><br><span class="line">priorityQueue.enqueue(<span class="string">&quot;C&quot;</span>, <span class="number">11</span>);</span><br><span class="line">priorityQueue.enqueue(<span class="string">&quot;D&quot;</span>, <span class="number">20</span>);</span><br><span class="line">priorityQueue.enqueue(<span class="string">&quot;E&quot;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="built_in">console</span>.log(priorityQueue.items);</span><br><span class="line"><span class="comment">//--&gt; output:</span></span><br><span class="line"><span class="comment">// QueueElement &#123;element: &quot;A&quot;, priority: 10&#125;</span></span><br><span class="line"><span class="comment">// QueueElement &#123;element: &quot;C&quot;, priority: 11&#125;</span></span><br><span class="line"><span class="comment">// QueueElement &#123;element: &quot;B&quot;, priority: 15&#125;</span></span><br><span class="line"><span class="comment">// QueueElement &#123;element: &quot;E&quot;, priority: 18&#125;</span></span><br><span class="line"><span class="comment">// QueueElement &#123;element: &quot;D&quot;, priority: 20&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 出队 dequeue() 测试</span></span><br><span class="line">priorityQueue.dequeue();</span><br><span class="line">priorityQueue.dequeue();</span><br><span class="line"><span class="built_in">console</span>.log(priorityQueue.items);</span><br><span class="line"><span class="comment">//--&gt; output:</span></span><br><span class="line"><span class="comment">// QueueElement &#123;element: &quot;B&quot;, priority: 15&#125;</span></span><br><span class="line"><span class="comment">// QueueElement &#123;element: &quot;E&quot;, priority: 18&#125;</span></span><br><span class="line"><span class="comment">// QueueElement &#123;element: &quot;D&quot;, priority: 20&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// isEmpty() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(priorityQueue.isEmpty()); <span class="comment">//--&gt; false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// size() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(priorityQueue.size()); <span class="comment">//--&gt; 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// toString() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(priorityQueue.toString()); <span class="comment">//--&gt; B-15 E-18 D-20</span></span><br></pre></td></tr></table></figure>

<h3 id="数组、栈和队列图解"><a href="#数组、栈和队列图解" class="headerlink" title="数组、栈和队列图解"></a>数组、栈和队列图解</h3><p><a href="https://camo.githubusercontent.com/402a416265eb3cdf5dbc7ad2191f5293aa70174ecc6858683f479441ac622a03/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e36346b6735656a3536766b302e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202202281024354.png" alt="数组、栈和队列图解"></a></p>
<h1 id="四-1-、单向链表"><a href="#四-1-、单向链表" class="headerlink" title="四(1)、单向链表"></a>四(1)、单向链表</h1><h2 id="认识链表"><a href="#认识链表" class="headerlink" title="认识链表"></a>认识链表</h2><h3 id="链表和数组"><a href="#链表和数组" class="headerlink" title="链表和数组"></a>链表和数组</h3><p>链表和数组一样，可以用于存储一系列的元素，但是链表和数组的实现机制完全不同。</p>
<h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><ul>
<li><p>存储多个元素，数组（或列表）可能是最常用的数据结构。</p>
</li>
<li><p>几乎每一种编程语言都有默认实现数组结构，提供了一个便利的 <code>[]</code> 语法来访问数组元素。</p>
</li>
<li><p>数组缺点：</p>
<p>数组的创建需要申请一段连续的内存空间(一整块内存)，并且大小是固定的，当前数组不能满足容量需求时，需要扩容。 (一般情况下是申请一个更大的数组，比如 2 倍，然后将原数组中的元素复制过去)</p>
<p>在数组开头或中间位置插入数据的成本很高，需要进行大量元素的位移。</p>
</li>
</ul>
<h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><ul>
<li><p>存储多个元素，另外一个选择就是使用链表。</p>
</li>
<li><p>不同于数组，链表中的元素在内存中不必是连续的空间。</p>
</li>
<li><p>链表的每个元素由一个存储元素本身的<strong>节点</strong>和一个指向下一个元素的<strong>引用</strong>(有些语言称为<strong>指针</strong>)组成。</p>
</li>
<li><p>链表优点：</p>
<p>内存空间不必是连续的，可以充分利用计算机的内存，实现灵活的内存动态管理。</p>
<p>链表不必在创建时就确定大小，并且大小可以无限延伸下去。</p>
<p>链表在插入和删除数据时，时间复杂度可以达到 O(1)，相对数组效率高很多。</p>
</li>
<li><p>链表缺点：</p>
<p>访问任何一个位置的元素时，需要从头开始访问。(无法跳过第一个元素访问任何一个元素)</p>
<p>无法通过下标值直接访问元素，需要从头开始一个个访问，直到找到对应的元素。</p>
<p>虽然可以轻松地到达下一个节点，但是回到前一个节点是很难的。</p>
</li>
</ul>
<h2 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h2><p>单向链表类似于火车，有一个火车头，火车头会连接一个节点，节点上有乘客，并且这个节点会连接下一个节点，以此类推。</p>
<ul>
<li><p>链表的火车结构</p>
<p><a href="https://camo.githubusercontent.com/94a87d696b54c3c2e8dd2c7461cf4de0c582eaae8613c5d8399511517e1332c4/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e323778746e336335327a77672e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202202281058541.png" alt="链表的火车结构"></a></p>
</li>
<li><p>链表的数据结构</p>
<p>head 属性指向链表的第一个节点。<br>链表中的最后一个节点指向 <code>null</code>。 当链表中一个节点也没有的时候，head 直接指向 <code>null</code>。</p>
<p><a href="https://camo.githubusercontent.com/cb80edbb70576fc4ec368cc82817af2fcedbee2d7d2c95fc0faabca1791cdc09/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e33376a3162793436613132302e706e67"><img src="https://camo.githubusercontent.com/cb80edbb70576fc4ec368cc82817af2fcedbee2d7d2c95fc0faabca1791cdc09/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e33376a3162793436613132302e706e67" alt="链表的数据结构"></a></p>
</li>
<li><p>给火车加上数据后的结构</p>
<p><a href="https://camo.githubusercontent.com/056ab81adb200c31e9e6a317baa2d049875834d13804b7cb841a42e829e82633/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e363634646a696965327438302e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202202281058695.png" alt="给火车加上数据后的结构"></a></p>
</li>
</ul>
<h3 id="链表中的常见操作"><a href="#链表中的常见操作" class="headerlink" title="链表中的常见操作"></a>链表中的常见操作</h3><ul>
<li><code>append(element)</code> 向链表尾部添加一个新的项。</li>
<li><code>insert(position, element)</code> 向链表的特定位置插入一个新的项。</li>
<li><code>get(position)</code> 获取对应位置的元素。</li>
<li><code>indexOf(element)</code> 返回元素在链表中的索引。如果链表中没有该元素就返回-1。</li>
<li><code>update(position, element)</code> 修改某个位置的元素。</li>
<li><code>removeAt(position)</code> 从链表的特定位置移除一项。</li>
<li><code>remove(element)</code> 根据元素从链表中移除一项。</li>
<li><code>isEmpty()</code> 如果链表中不包含任何元素，返回 trun，如果链表长度大于 0 则返回 false。</li>
<li><code>size()</code> 返回链表包含的元素个数，与数组的 length 属性类似。</li>
<li><code>toString()</code> 由于链表项使用了 Node 类，就需要重写继承自 JavaScript 对象默认的 toString 方法，让其只输出元素的值。</li>
</ul>
<h3 id="单向链表的封装"><a href="#单向链表的封装" class="headerlink" title="单向链表的封装"></a>单向链表的封装</h3><h4 id="创建单向链表类"><a href="#创建单向链表类" class="headerlink" title="创建单向链表类"></a>创建单向链表类</h4><p>先创建单向链表类 LinkedList，添加基本属性，再逐步实现单向链表的常用方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 如果属性有初值的话可以直接将其放置在类的最顶层，相当于是写在constructor中</span></span><br><span class="line">  <span class="comment">// 初始链表长度为 0</span></span><br><span class="line">  length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始 head 为 null，head 指向链表的第一个节点</span></span><br><span class="line">  head = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 内部类（链表里的节点 Node）</span></span><br><span class="line">  Node = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">     next=<span class="literal">null</span>;</span><br><span class="line">     <span class="function"><span class="title">constructor</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>.data = data;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="实现-append-方法"><a href="#实现-append-方法" class="headerlink" title="实现 append() 方法"></a>实现 append() 方法</h4><h5 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// append() 往链表尾部追加数据</span></span><br><span class="line"><span class="function"><span class="title">append</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、创建新节点</span></span><br><span class="line">    <span class="keyword">const</span> newNode = <span class="keyword">new</span> <span class="built_in">this</span>.Node(data);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、追加新节点</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.length === <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 链表长度为 0 时，即只有 head 的时候</span></span><br><span class="line">    <span class="built_in">this</span>.head = newNode;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 链表长度大于 0 时，在最后面添加新节点</span></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当 currentNode.next 不为空时，</span></span><br><span class="line">    <span class="comment">// 循序依次找最后一个节点，即节点的 next 为 null 时</span></span><br><span class="line">    <span class="keyword">while</span> (currentNode.next !== <span class="literal">null</span>) &#123;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最后一个节点的 next 指向新节点</span></span><br><span class="line">    currentNode.next = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、追加完新节点后，链表长度 + 1</span></span><br><span class="line">    <span class="built_in">this</span>.length++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="过程图解"><a href="#过程图解" class="headerlink" title="过程图解"></a>过程图解</h5><ul>
<li><p>首先让 <code>currentNode</code> 指向第一个节点。</p>
<p><a href="https://camo.githubusercontent.com/3e0b65c86f921507484e6b90fa7fac4180f2baabc376c9230500c7bfbd5d95ca/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e3569736b726466346e7534302e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202202281058435.png" alt="image"></a></p>
</li>
<li><p>通过 <code>while</code> 循环使 <code>currentNode</code> 指向最后一个节点，最后通过 <code>currentNode.next = newNode</code>，让最后一个节点指向新节点 <code>newNode</code>。</p>
<p><a href="https://camo.githubusercontent.com/c2a46eef80970048eae3327cb1243d44d25737c10ad32574ca81945280837358/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e346d77336278356738306d302e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202202281058583.png" alt="image"></a></p>
</li>
</ul>
<h5 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> linkedList = <span class="keyword">new</span> LinkedList();</span><br><span class="line"><span class="comment">// 测试 append 方法</span></span><br><span class="line">linkedList.append(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">linkedList.append(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">linkedList.append(<span class="string">&quot;C&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(linkedList);</span><br></pre></td></tr></table></figure>

<p><a href="https://camo.githubusercontent.com/b4c2b1995dad2e2ed3609bd0acf2c3401886d21ea590c9cf6b4b20e8a6699434/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e366b7834716271386535632e706e67"><img src="https://camo.githubusercontent.com/b4c2b1995dad2e2ed3609bd0acf2c3401886d21ea590c9cf6b4b20e8a6699434/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e366b7834716271386535632e706e67" alt="image"></a></p>
<h4 id="实现-toString-方法"><a href="#实现-toString-方法" class="headerlink" title="实现 toString() 方法"></a>实现 toString() 方法</h4><h5 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历所有的节点，拼接为字符串，直到节点为 null</span></span><br><span class="line">    <span class="keyword">while</span> (currentNode) &#123;</span><br><span class="line">    result += currentNode.data + <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="代码测试-1"><a href="#代码测试-1" class="headerlink" title="代码测试"></a>代码测试</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试 toString 方法</span></span><br><span class="line"><span class="built_in">console</span>.log(linkedList.toString()); <span class="comment">//--&gt; AA BB CC</span></span><br></pre></td></tr></table></figure>

<h4 id="实现-insert-方法"><a href="#实现-insert-方法" class="headerlink" title="实现 insert() 方法"></a>实现 insert() 方法</h4><h5 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// insert() 在指定位置（position）插入节点</span></span><br><span class="line"><span class="function"><span class="title">insert</span>(<span class="params">position, data</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// position 新插入节点的位置</span></span><br><span class="line">    <span class="comment">// position = 0 表示新插入后是第一个节点</span></span><br><span class="line">    <span class="comment">// position = 1 表示新插入后是第二个节点，以此类推</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、对 position 进行越界判断，不能小于 0 或大于链表长度</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、创建新节点</span></span><br><span class="line">    <span class="keyword">const</span> newNode = <span class="keyword">new</span> <span class="built_in">this</span>.Node(data);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、插入节点</span></span><br><span class="line">    <span class="keyword">if</span> (position === <span class="number">0</span>) &#123; <span class="comment">// position = 0 的情况</span></span><br><span class="line">    <span class="comment">// 让新节点的 next 指向 原来的第一个节点，即 head</span></span><br><span class="line">    newNode.next = <span class="built_in">this</span>.head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// head 赋值为 newNode</span></span><br><span class="line">    <span class="built_in">this</span>.head = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 0 &lt; position &lt;= length 的情况</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化一些变量</span></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head; <span class="comment">// 当前节点初始化为 head</span></span><br><span class="line">    <span class="keyword">let</span> previousNode = <span class="literal">null</span>; <span class="comment">// head 的 上一节点为 null</span></span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>; <span class="comment">// head 的 index 为 0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在 0 ~ position 之间遍历，不断地更新 currentNode 和 previousNode</span></span><br><span class="line">    <span class="comment">// 直到找到要插入的位置</span></span><br><span class="line">    <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">        previousNode = currentNode;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在当前节点和当前节点的上一节点之间插入新节点，即它们的改变指向</span></span><br><span class="line">    newNode.next = currentNode;</span><br><span class="line">    previousNode.next = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新链表长度</span></span><br><span class="line">    <span class="built_in">this</span>.length++;</span><br><span class="line">    <span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="代码测试-2"><a href="#代码测试-2" class="headerlink" title="代码测试"></a>代码测试</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试 insert 方法</span></span><br><span class="line">linkedList.insert(<span class="number">0</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">linkedList.insert(<span class="number">2</span>, <span class="string">&quot;456&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(linkedList.toString()); <span class="comment">//--&gt; 123 AA 456 BB CC</span></span><br></pre></td></tr></table></figure>

<h4 id="实现-getData-方法"><a href="#实现-getData-方法" class="headerlink" title="实现 getData() 方法"></a>实现 getData() 方法</h4><p>获取指定位置（position）的 data。</p>
<h5 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">getData</span>(<span class="params">position</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、position 越界判断</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、获取指定 position 节点的 data</span></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">    currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3、返回 data</span></span><br><span class="line">    <span class="keyword">return</span> currentNode.data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="代码测试-3"><a href="#代码测试-3" class="headerlink" title="代码测试"></a>代码测试</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试 getData 方法</span></span><br><span class="line"><span class="built_in">console</span>.log(linkedList.getData(<span class="number">0</span>)); <span class="comment">//--&gt; 123</span></span><br><span class="line"><span class="built_in">console</span>.log(linkedList.getData(<span class="number">1</span>)); <span class="comment">//--&gt; AA</span></span><br></pre></td></tr></table></figure>

<h4 id="实现-indexOf-方法"><a href="#实现-indexOf-方法" class="headerlink" title="实现 indexOf() 方法"></a>实现 indexOf() 方法</h4><p>indexOf(data) 返回指定 data 的 index，如果没有，返回 -1。</p>
<h5 id="代码实现-8"><a href="#代码实现-8" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">indexOf</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (currentNode) &#123;</span><br><span class="line">    <span class="keyword">if</span> (currentNode.data === data) &#123;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line">    currentNode = currentNode.next;</span><br><span class="line">    index++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="代码测试-4"><a href="#代码测试-4" class="headerlink" title="代码测试"></a>代码测试</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试 indexOf 方法</span></span><br><span class="line"><span class="built_in">console</span>.log(linkedList.indexOf(<span class="string">&quot;AA&quot;</span>)); <span class="comment">//--&gt; 1</span></span><br><span class="line"><span class="built_in">console</span>.log(linkedList.indexOf(<span class="string">&quot;ABC&quot;</span>)); <span class="comment">//--&gt; -1</span></span><br></pre></td></tr></table></figure>

<h4 id="实现-update-方法"><a href="#实现-update-方法" class="headerlink" title="实现 update() 方法"></a>实现 update() 方法</h4><p>update(position, data) 修改指定位置节点的 data。</p>
<h5 id="代码实现-9"><a href="#代码实现-9" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">update</span>(<span class="params">position, data</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 涉及到 position 都要进行越界判断</span></span><br><span class="line">    <span class="comment">// 1、position 越界判断</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、痛过循环遍历，找到指定 position 的节点</span></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">    currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、修改节点 data</span></span><br><span class="line">    currentNode.data = data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> currentNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="代码测试-5"><a href="#代码测试-5" class="headerlink" title="代码测试"></a>代码测试</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试 update 方法</span></span><br><span class="line">linkedList.update(<span class="number">0</span>, <span class="string">&quot;12345&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(linkedList.toString()); <span class="comment">//--&gt; 12345 AA 456 BB CC</span></span><br><span class="line">linkedList.update(<span class="number">1</span>, <span class="string">&quot;54321&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(linkedList.toString()); <span class="comment">//--&gt; 12345 54321 456 BB CC</span></span><br></pre></td></tr></table></figure>

<h4 id="实现-removeAt-方法"><a href="#实现-removeAt-方法" class="headerlink" title="实现 removeAt() 方法"></a>实现 removeAt() 方法</h4><p>removeAt(position) 删除指定位置的节点。</p>
<h5 id="代码实现-10"><a href="#代码实现-10" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">removeAt</span>(<span class="params">position</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、position 越界判断</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、删除指定 position 节点</span></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">if</span> (position === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// position = 0 的情况</span></span><br><span class="line">    <span class="built_in">this</span>.head = <span class="built_in">this</span>.head.next;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// position &gt; 0 的情况</span></span><br><span class="line">    <span class="comment">// 通过循环遍历，找到指定 position 的节点，赋值到 currentNode</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> previousNode = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">        previousNode = currentNode;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 巧妙之处，让上一节点的 next 指向到当前的节点的 next，相当于删除了当前节点。</span></span><br><span class="line">    previousNode.next = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、更新链表长度 -1</span></span><br><span class="line">    <span class="built_in">this</span>.length--;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> currentNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="代码测试-6"><a href="#代码测试-6" class="headerlink" title="代码测试"></a>代码测试</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试 removeAt 方法</span></span><br><span class="line">linkedList.removeAt(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(linkedList.toString()); <span class="comment">//--&gt; 12345 54321 456 CC</span></span><br></pre></td></tr></table></figure>

<h4 id="实现-remove-方法"><a href="#实现-remove-方法" class="headerlink" title="实现 remove() 方法"></a>实现 remove() 方法</h4><p>remove(data) 删除指定 data 所在的节点。</p>
<h5 id="代码实现-11"><a href="#代码实现-11" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">remove</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.removeAt(<span class="built_in">this</span>.indexOf(data));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="代码测试-7"><a href="#代码测试-7" class="headerlink" title="代码测试"></a>代码测试</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试 remove 方法</span></span><br><span class="line">linkedList.remove(<span class="string">&quot;CC&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(linkedList.toString()); <span class="comment">//--&gt; 12345 54321 456</span></span><br></pre></td></tr></table></figure>

<h4 id="实现-isEmpty-方法"><a href="#实现-isEmpty-方法" class="headerlink" title="实现 isEmpty() 方法"></a>实现 isEmpty() 方法</h4><p>isEmpty() 判断链表是否为空。</p>
<h5 id="代码实现-12"><a href="#代码实现-12" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length === <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="代码测试-8"><a href="#代码测试-8" class="headerlink" title="代码测试"></a>代码测试</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试 isEmpty 方法</span></span><br><span class="line"><span class="built_in">console</span>.log(linkedList.isEmpty()); <span class="comment">//--&gt; false</span></span><br></pre></td></tr></table></figure>

<h4 id="实现-size-方法"><a href="#实现-size-方法" class="headerlink" title="实现 size() 方法"></a>实现 size() 方法</h4><p>size() 获取链表的长度。</p>
<h5 id="代码实现-13"><a href="#代码实现-13" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="代码测试-9"><a href="#代码测试-9" class="headerlink" title="代码测试"></a>代码测试</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试 size 方法</span></span><br><span class="line"><span class="built_in">console</span>.log(linkedList.size()); <span class="comment">//--&gt; 3</span></span><br></pre></td></tr></table></figure>

<h4 id="完整实现"><a href="#完整实现" class="headerlink" title="完整实现"></a>完整实现</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 如果属性有初值的话可以直接将其放置在类的最顶层，相当于是写在constructor中</span></span><br><span class="line">  <span class="comment">// 初始链表长度为 0</span></span><br><span class="line">  length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始 head 为 null，head 指向链表的第一个节点</span></span><br><span class="line">  head = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 内部类（链表里的节点 Node）</span></span><br><span class="line">  Node = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">    next = <span class="literal">null</span>;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ------------ 链表的常见操作 ------------ //</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// append() 往链表尾部追加数据</span></span><br><span class="line">  <span class="function"><span class="title">append</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、创建新节点【使用类中的内部类时注意要使用this关键字】</span></span><br><span class="line">    <span class="keyword">const</span> newNode = <span class="keyword">new</span> <span class="built_in">this</span>.Node(data);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、追加新节点</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 链表长度为 0 时，即只有 head 的时候</span></span><br><span class="line">      <span class="built_in">this</span>.head = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 链表长度大于 0 时，在最后面添加新节点</span></span><br><span class="line">      <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 当 currentNode.next 不为空时，</span></span><br><span class="line">      <span class="comment">// 循序依次找最后一个节点，即节点的 next 为 null 时</span></span><br><span class="line">      <span class="keyword">while</span> (currentNode.next) &#123;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 最后一个节点的 next 指向新节点</span></span><br><span class="line">      currentNode.next = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、追加完新节点后，链表长度 + 1</span></span><br><span class="line">    <span class="built_in">this</span>.length++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// insert() 在指定位置（position）插入节点</span></span><br><span class="line">  <span class="function"><span class="title">insert</span>(<span class="params">position, data</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// position 新插入节点的位置</span></span><br><span class="line">    <span class="comment">// position = 0 表示新插入后是第一个节点</span></span><br><span class="line">    <span class="comment">// position = 1 表示新插入后是第二个节点，以此类推</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、对 position 进行越界判断，不能小于 0 或大于链表长度</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、创建新节点</span></span><br><span class="line">    <span class="keyword">const</span> newNode = <span class="keyword">new</span> <span class="built_in">this</span>.Node(data);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、插入节点</span></span><br><span class="line">    <span class="keyword">if</span> (position === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// position = 0 的情况</span></span><br><span class="line">      <span class="comment">// 让新节点的 next 指向 原来的第一个节点，即 head</span></span><br><span class="line">      newNode.next = <span class="built_in">this</span>.head;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// head 赋值为 newNode</span></span><br><span class="line">      <span class="built_in">this</span>.head = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 0 &lt; position &lt;= length 的情况</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 初始化一些变量</span></span><br><span class="line">      <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head; <span class="comment">// 当前节点初始化为 head</span></span><br><span class="line">      <span class="keyword">let</span> previousNode = <span class="literal">null</span>; <span class="comment">// head 的 上一节点为 null</span></span><br><span class="line">      <span class="keyword">let</span> index = <span class="number">0</span>; <span class="comment">// head 的 index 为 0</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 在 0 ~ position 之间遍历，不断地更新 currentNode 和 previousNode</span></span><br><span class="line">      <span class="comment">// 直到找到要插入的位置</span></span><br><span class="line">      <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">        previousNode = currentNode;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 在当前节点和当前节点的上一节点之间插入新节点，即它们的改变指向</span></span><br><span class="line">      newNode.next = currentNode;</span><br><span class="line">      previousNode.next = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新链表长度</span></span><br><span class="line">    <span class="built_in">this</span>.length++;</span><br><span class="line">    <span class="keyword">return</span> newNode;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// getData() 获取指定位置的 data</span></span><br><span class="line">  <span class="function"><span class="title">getData</span>(<span class="params">position</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、position 越界判断</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、获取指定 position 节点的 data</span></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">      currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、返回 data</span></span><br><span class="line">    <span class="keyword">return</span> currentNode.data;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// indexOf() 返回指定 data 的 index，如果没有，返回 -1。</span></span><br><span class="line">  <span class="function"><span class="title">indexOf</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (currentNode) &#123;</span><br><span class="line">      <span class="keyword">if</span> (currentNode.data === data) &#123;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">      &#125;</span><br><span class="line">      currentNode = currentNode.next;</span><br><span class="line">      index++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// update() 修改指定位置节点的 data</span></span><br><span class="line">  <span class="function"><span class="title">update</span>(<span class="params">position, data</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 涉及到 position 都要进行越界判断</span></span><br><span class="line">    <span class="comment">// 1、position 越界判断</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、痛过循环遍历，找到指定 position 的节点</span></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">      currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、修改节点 data</span></span><br><span class="line">    currentNode.data = data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> currentNode;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// removeAt() 删除指定位置的节点</span></span><br><span class="line">  <span class="function"><span class="title">removeAt</span>(<span class="params">position</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、position 越界判断</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、删除指定 position 节点</span></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">if</span> (position === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// position = 0 的情况</span></span><br><span class="line">      <span class="built_in">this</span>.head = <span class="built_in">this</span>.head.next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// position &gt; 0 的情况</span></span><br><span class="line">      <span class="comment">// 通过循环遍历，找到指定 position 的节点，赋值到 currentNode</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> previousNode = <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">        previousNode = currentNode;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 巧妙之处，让上一节点的 next 指向到当前的节点的 next，相当于删除了当前节点。</span></span><br><span class="line">      previousNode.next = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、更新链表长度 -1</span></span><br><span class="line">    <span class="built_in">this</span>.length--;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> currentNode;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// remove() 删除指定 data 的节点</span></span><br><span class="line">  <span class="function"><span class="title">remove</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.removeAt(<span class="built_in">this</span>.indexOf(data));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// isEmpty() 判断链表是否为空</span></span><br><span class="line">  <span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// size() 获取链表的长度</span></span><br><span class="line">  <span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// toString() 链表数据以字符串形式返回</span></span><br><span class="line">  <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历所有的节点，拼接为字符串，直到节点为 null</span></span><br><span class="line">    <span class="keyword">while</span> (currentNode) &#123;</span><br><span class="line">      result += currentNode.data + <span class="string">&quot; &quot;</span>;</span><br><span class="line">      currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="四-2-、双向链表"><a href="#四-2-、双向链表" class="headerlink" title="四(2)、双向链表"></a>四(2)、双向链表</h1><h2 id="1-单向链表和双向链表"><a href="#1-单向链表和双向链表" class="headerlink" title="1. 单向链表和双向链表"></a>1. 单向链表和双向链表</h2><h3 id="单向链表-1"><a href="#单向链表-1" class="headerlink" title="单向链表"></a>单向链表</h3><ul>
<li><strong>只能</strong>从头遍历到尾<strong>或者</strong>从尾遍历到头（一般从头到尾）。</li>
<li>链表相连的过程是单向的，实现原理是上一个节点中有指向下一个节点的引用。</li>
<li>单向链表有一个比较明显的缺点：可以轻松到达下一个节点，但回到前一个节点很难，在实际开发中, 经常会遇到需要回到上一个节点的情况。</li>
</ul>
<h3 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h3><ul>
<li><strong>既</strong>可以从头遍历到尾，<strong>也</strong>可以从尾遍历到头。</li>
<li>链表相连的过程是双向的。实现原理是一个节点既有向前连接的引用，也有一个向后连接的引用。</li>
<li>双向链表可以有效的解决单向链表存在的问题。</li>
<li>双向链表缺点：<ul>
<li>每次在插入或删除某个节点时，都需要处理四个引用，而不是两个，实现起来会困难些。</li>
<li>相对于单向链表，所占内存空间更大一些。</li>
<li>但是，相对于双向链表的便利性而言，这些缺点微不足道。</li>
</ul>
</li>
</ul>
<h2 id="2-双向链表结构"><a href="#2-双向链表结构" class="headerlink" title="2. 双向链表结构"></a>2. 双向链表结构</h2><p><a href="https://camo.githubusercontent.com/a6e84b4bd6c3bac0eab8a993cfb73d93c3ea28b131e12303e08b9ce9cdf2b120/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e3378793736396839307632302e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202202281932097.png" alt="image"></a></p>
<ul>
<li>双向链表不仅有 head 指针指向第一个节点，而且有 tail 指针指向最后一个节点。</li>
<li>每一个节点由三部分组成：item 储存数据、prev 指向前一个节点、next 指向后一个节点。</li>
<li>双向链表的第一个节点的 prev 指向 null。</li>
<li>双向链表的最后一个节点的 next 指向 null。</li>
</ul>
<h2 id="3-双向链表常见的操作"><a href="#3-双向链表常见的操作" class="headerlink" title="3. 双向链表常见的操作"></a>3. 双向链表常见的操作</h2><ul>
<li><code>append(element)</code> 向链表尾部追加一个新元素。</li>
<li><code>insert(position, element)</code> 向链表的指定位置插入一个新元素。</li>
<li><code>getElement(position)</code> 获取指定位置的元素。</li>
<li><code>indexOf(element)</code> 返回元素在链表中的索引。如果链表中没有该元素就返回 -1。</li>
<li><code>update(position, element)</code> 修改指定位置上的元素。</li>
<li><code>removeAt(position)</code> 从链表中的删除指定位置的元素。</li>
<li><code>remove(element)</code> 从链表删除指定的元素。</li>
<li><code>isEmpty()</code> 如果链表中不包含任何元素，返回 <code>trun</code>，如果链表长度大于 0 则返回 <code>false</code>。</li>
<li><code>size()</code> 返回链表包含的元素个数，与数组的 <code>length</code> 属性类似。</li>
<li><code>toString()</code> 由于链表项使用了 Node 类，就需要重写继承自 JavaScript 对象默认的 <code>toString</code> 方法，让其只输出元素的值。</li>
<li><code>forwardString()</code> 返回正向遍历节点字符串形式。</li>
<li><code>backwordString()</code> 返回反向遍历的节点的字符串形式。</li>
</ul>
<h2 id="4-双向链表的封装"><a href="#4-双向链表的封装" class="headerlink" title="4. 双向链表的封装"></a>4. 双向链表的封装</h2><h3 id="创建双向链表类"><a href="#创建双向链表类" class="headerlink" title="创建双向链表类"></a>创建双向链表类</h3><ul>
<li>DoublyNode 类继承单向链表的 Node 类，新添加 <code>this.prev</code> 属性，该属性用于指向上一个节点。</li>
<li>DoublyLinkedList 类继承 LinkedList 类，新添加 <code>this.tail</code> 属性，该属性指向末尾的节点。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 双向链表的节点类（继承单向链表的节点类）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoublyNode</span> <span class="keyword">extends</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">element</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(element);</span><br><span class="line">    <span class="built_in">this</span>.prev = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双向链表类继承单向链表类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoublyLinkedList</span> <span class="keyword">extends</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="built_in">this</span>.tail = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="append-element"><a href="#append-element" class="headerlink" title="append(element)"></a>append(element)</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// append(element) 往双向链表尾部追加一个新的元素</span></span><br><span class="line"><span class="comment">// 重写 append()</span></span><br><span class="line"><span class="function"><span class="title">append</span>(<span class="params">element</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、创建双向链表节点</span></span><br><span class="line"><span class="keyword">const</span> newNode = <span class="keyword">new</span> DoublyNode(element);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、追加元素</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.head === <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="built_in">this</span>.head = newNode;</span><br><span class="line">  <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// ！！跟单向链表不同，不用通过循环找到最后一个节点</span></span><br><span class="line">  <span class="comment">// 巧妙之处</span></span><br><span class="line">  <span class="built_in">this</span>.tail.next = newNode;</span><br><span class="line">  newNode.prev = <span class="built_in">this</span>.tail;</span><br><span class="line">  <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.length++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="insert-position-element"><a href="#insert-position-element" class="headerlink" title="insert(position, element)"></a>insert(position, element)</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// insert(position, data) 插入元素</span></span><br><span class="line"><span class="comment">// 重写 insert()</span></span><br><span class="line"><span class="function"><span class="title">insert</span>(<span class="params">position, element</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、position 越界判断</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、创建新的双向链表节点</span></span><br><span class="line">    <span class="keyword">const</span> newNode = <span class="keyword">new</span> DoublyNode(element);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、判断多种插入情况</span></span><br><span class="line">    <span class="keyword">if</span> (position === <span class="number">0</span>) &#123; <span class="comment">// 在第 0 个位置插入</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.head === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.head = newNode;</span><br><span class="line">        <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//== 巧妙之处：相处腾出 this.head 空间，留个 newNode 来赋值 ==//</span></span><br><span class="line">        newNode.next = <span class="built_in">this</span>.head;</span><br><span class="line">        <span class="built_in">this</span>.head.prev = newNode;</span><br><span class="line">        <span class="built_in">this</span>.head = newNode;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position === <span class="built_in">this</span>.length) &#123; <span class="comment">// 在最后一个位置插入</span></span><br><span class="line"></span><br><span class="line">      <span class="built_in">this</span>.tail.next = newNode;</span><br><span class="line">      newNode.prev = <span class="built_in">this</span>.tail;</span><br><span class="line">      <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 在 0 ~ this.length 位置中间插入</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> targetIndex = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">      <span class="keyword">let</span> previousNode = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 找到要插入位置的节点</span></span><br><span class="line">      <span class="keyword">while</span> (targetIndex++ &lt; position) &#123;</span><br><span class="line">        previousNode = currentNode;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 交换节点信息</span></span><br><span class="line">      previousNode.next = newNode;</span><br><span class="line">      newNode.prev = previousNode;</span><br><span class="line"></span><br><span class="line">      newNode.next = currentNode;</span><br><span class="line">      currentNode.prev = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.length++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="removeAt-position"><a href="#removeAt-position" class="headerlink" title="removeAt(position)"></a>removeAt(position)</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// removeAt() 删除指定位置的节点</span></span><br><span class="line"><span class="comment">// 重写 removeAt()</span></span><br><span class="line"><span class="function"><span class="title">removeAt</span>(<span class="params">position</span>)</span> &#123;</span><br><span class="line">  <span class="comment">// 1、position 越界判断</span></span><br><span class="line">  <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2、根据不同情况删除元素</span></span><br><span class="line">  <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">  <span class="keyword">if</span> (position === <span class="number">0</span>) &#123; <span class="comment">// 删除第一个节点的情况</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.length === <span class="number">1</span>) &#123; <span class="comment">// 链表内只有一个节点的情况</span></span><br><span class="line">      <span class="built_in">this</span>.head = <span class="literal">null</span>;</span><br><span class="line">      <span class="built_in">this</span>.tail = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 链表内有多个节点的情况</span></span><br><span class="line">      <span class="built_in">this</span>.head = <span class="built_in">this</span>.head.next;</span><br><span class="line">      <span class="built_in">this</span>.head.prev = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position === <span class="built_in">this</span>.length - <span class="number">1</span>) &#123; <span class="comment">// 删除最后一个节点的情况</span></span><br><span class="line"></span><br><span class="line">    currentNode = <span class="built_in">this</span>.tail;</span><br><span class="line">    <span class="built_in">this</span>.tail.prev.next = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">this</span>.tail = <span class="built_in">this</span>.tail.prev;</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// 删除 0 ~ this.length - 1 里面节点的情况</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> targetIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> previousNode = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (targetIndex++ &lt; position) &#123;</span><br><span class="line">      previousNode = currentNode;</span><br><span class="line">      currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    previousNode.next = currentNode.next;</span><br><span class="line">    currentNode.next.perv = previousNode;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.length--;</span><br><span class="line">  <span class="keyword">return</span> currentNode.data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="update-position-data"><a href="#update-position-data" class="headerlink" title="update(position, data)"></a>update(position, data)</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// update(position, data) 修改指定位置的节点</span></span><br><span class="line"><span class="comment">// 重写 update()</span></span><br><span class="line"><span class="function"><span class="title">update</span>(<span class="params">position, data</span>)</span> &#123;</span><br><span class="line">  <span class="comment">// 1、删除 position 位置的节点</span></span><br><span class="line">  <span class="keyword">const</span> result = <span class="built_in">this</span>.removeAt(position);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2、在 position 位置插入元素</span></span><br><span class="line">  <span class="built_in">this</span>.insert(position, data);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="forwardToString"><a href="#forwardToString" class="headerlink" title="forwardToString()"></a>forwardToString()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// forwardToString() 链表数据从前往后以字符串形式返回</span></span><br><span class="line">  <span class="function"><span class="title">forwardToString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历所有的节点，拼接为字符串，直到节点为 null</span></span><br><span class="line">    <span class="keyword">while</span> (currentNode) &#123;</span><br><span class="line">      result += currentNode.data + <span class="string">&#x27;--&#x27;</span>;</span><br><span class="line">      currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="backwardString"><a href="#backwardString" class="headerlink" title="backwardString()"></a>backwardString()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// backwardString() 链表数据从后往前以字符串形式返回</span></span><br><span class="line">  <span class="function"><span class="title">backwardString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.tail;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历所有的节点，拼接为字符串，直到节点为 null</span></span><br><span class="line">    <span class="keyword">while</span> (currentNode) &#123;</span><br><span class="line">      result += currentNode.data + <span class="string">&#x27;--&#x27;</span>;</span><br><span class="line">      currentNode = currentNode.prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="其他方法的实现"><a href="#其他方法的实现" class="headerlink" title="其他方法的实现"></a>其他方法的实现</h3><p>双向链表的其他方法通过继承单向链表来实现。</p>
<h3 id="完整实现-1"><a href="#完整实现-1" class="headerlink" title="完整实现"></a>完整实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoublyLinkedList</span> <span class="keyword">extends</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="built_in">this</span>.tail = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ------------ 链表的常见操作 ------------ //</span></span><br><span class="line">  <span class="comment">// append(element) 往双向链表尾部追加一个新的元素</span></span><br><span class="line">  <span class="comment">// 重写 append()</span></span><br><span class="line">  <span class="function"><span class="title">append</span>(<span class="params">element</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、创建双向链表节点</span></span><br><span class="line">    <span class="keyword">const</span> newNode = <span class="keyword">new</span> DoublyNode(element);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、追加元素</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.head === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.head = newNode;</span><br><span class="line">      <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// ！！跟单向链表不同，不用通过循环找到最后一个节点</span></span><br><span class="line">      <span class="comment">// 巧妙之处</span></span><br><span class="line">      <span class="built_in">this</span>.tail.next = newNode;</span><br><span class="line">      newNode.prev = <span class="built_in">this</span>.tail;</span><br><span class="line">      <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.length++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// insert(position, data) 插入元素</span></span><br><span class="line">  <span class="comment">// 重写 insert()</span></span><br><span class="line">  <span class="function"><span class="title">insert</span>(<span class="params">position, element</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、position 越界判断</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、创建新的双向链表节点</span></span><br><span class="line">    <span class="keyword">const</span> newNode = <span class="keyword">new</span> DoublyNode(element);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、判断多种插入情况</span></span><br><span class="line">    <span class="keyword">if</span> (position === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 在第 0 个位置插入</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.head === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.head = newNode;</span><br><span class="line">        <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//== 巧妙之处：相处腾出 this.head 空间，留个 newNode 来赋值 ==//</span></span><br><span class="line">        newNode.next = <span class="built_in">this</span>.head;</span><br><span class="line">        <span class="built_in">this</span>.head.perv = newNode;</span><br><span class="line">        <span class="built_in">this</span>.head = newNode;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position === <span class="built_in">this</span>.length) &#123;</span><br><span class="line">      <span class="comment">// 在最后一个位置插入</span></span><br><span class="line"></span><br><span class="line">      <span class="built_in">this</span>.tail.next = newNode;</span><br><span class="line">      newNode.prev = <span class="built_in">this</span>.tail;</span><br><span class="line">      <span class="built_in">this</span>.tail = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 在 0 ~ this.length 位置中间插入</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> targetIndex = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">      <span class="keyword">let</span> previousNode = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 找到要插入位置的节点</span></span><br><span class="line">      <span class="keyword">while</span> (targetIndex++ &lt; position) &#123;</span><br><span class="line">        previousNode = currentNode;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 交换节点信息</span></span><br><span class="line">      previousNode.next = newNode;</span><br><span class="line">      newNode.prev = previousNode;</span><br><span class="line"></span><br><span class="line">      newNode.next = currentNode;</span><br><span class="line">      currentNode.prev = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.length++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// getData() 继承单向链表</span></span><br><span class="line">  <span class="function"><span class="title">getData</span>(<span class="params">position</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.getData(position);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// indexOf() 继承单向链表</span></span><br><span class="line">  <span class="function"><span class="title">indexOf</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.indexOf(data);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// removeAt() 删除指定位置的节点</span></span><br><span class="line">  <span class="comment">// 重写 removeAt()</span></span><br><span class="line">  <span class="function"><span class="title">removeAt</span>(<span class="params">position</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、position 越界判断</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.length - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、根据不同情况删除元素</span></span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">if</span> (position === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 删除第一个节点的情况</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.length === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 链表内只有一个节点的情况</span></span><br><span class="line">        <span class="built_in">this</span>.head = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.tail = <span class="literal">null</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 链表内有多个节点的情况</span></span><br><span class="line">        <span class="built_in">this</span>.head = <span class="built_in">this</span>.head.next;</span><br><span class="line">        <span class="built_in">this</span>.head.prev = <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position === <span class="built_in">this</span>.length - <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">// 删除最后一个节点的情况</span></span><br><span class="line"></span><br><span class="line">      currentNode = <span class="built_in">this</span>.tail;</span><br><span class="line">      <span class="built_in">this</span>.tail.prev.next = <span class="literal">null</span>;</span><br><span class="line">      <span class="built_in">this</span>.tail = <span class="built_in">this</span>.tail.prev;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 删除 0 ~ this.length - 1 里面节点的情况</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> targetIndex = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">let</span> previousNode = <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">while</span> (targetIndex++ &lt; position) &#123;</span><br><span class="line">        previousNode = currentNode;</span><br><span class="line">        currentNode = currentNode.next;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      previousNode.next = currentNode.next;</span><br><span class="line">      currentNode.next.perv = previousNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.length--;</span><br><span class="line">    <span class="keyword">return</span> currentNode.data;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// update(position, data) 修改指定位置的节点</span></span><br><span class="line">  <span class="comment">// 重写 update()</span></span><br><span class="line">  <span class="function"><span class="title">update</span>(<span class="params">position, data</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、删除 position 位置的节点</span></span><br><span class="line">    <span class="keyword">const</span> result = <span class="built_in">this</span>.removeAt(position);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、在 position 位置插入元素</span></span><br><span class="line">    <span class="built_in">this</span>.insert(position, data);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// remove(data) 删除指定 data 所在的节点（继承单向链表）</span></span><br><span class="line">  <span class="function"><span class="title">remove</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.remove(data);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// isEmpty() 判断链表是否为空</span></span><br><span class="line">  <span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.isEmpty();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// size() 获取链表的长度</span></span><br><span class="line">  <span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.size();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// forwardToString() 链表数据从前往后以字符串形式返回</span></span><br><span class="line">  <span class="function"><span class="title">forwardToString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历所有的节点，拼接为字符串，直到节点为 null</span></span><br><span class="line">    <span class="keyword">while</span> (currentNode) &#123;</span><br><span class="line">      result += currentNode.data + <span class="string">&quot;--&quot;</span>;</span><br><span class="line">      currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// backwardString() 链表数据从后往前以字符串形式返回</span></span><br><span class="line">  <span class="function"><span class="title">backwardString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.tail;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历所有的节点，拼接为字符串，直到节点为 null</span></span><br><span class="line">    <span class="keyword">while</span> (currentNode) &#123;</span><br><span class="line">      result += currentNode.data + <span class="string">&quot;--&quot;</span>;</span><br><span class="line">      currentNode = currentNode.prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码测试-10"><a href="#代码测试-10" class="headerlink" title="代码测试"></a>代码测试</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> doublyLinkedList = <span class="keyword">new</span> DoublyLinkedList();</span><br><span class="line"></span><br><span class="line"><span class="comment">// append() 测试</span></span><br><span class="line">doublyLinkedList.append(<span class="string">&quot;ZZ&quot;</span>);</span><br><span class="line">doublyLinkedList.append(<span class="string">&quot;XX&quot;</span>);</span><br><span class="line">doublyLinkedList.append(<span class="string">&quot;CC&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(doublyLinkedList);</span><br><span class="line"></span><br><span class="line"><span class="comment">// insert() 测试</span></span><br><span class="line">doublyLinkedList.insert(<span class="number">0</span>, <span class="string">&quot;00&quot;</span>);</span><br><span class="line">doublyLinkedList.insert(<span class="number">2</span>, <span class="string">&quot;22&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(doublyLinkedList);</span><br><span class="line"></span><br><span class="line"><span class="comment">// getData() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(doublyLinkedList.getData(<span class="number">1</span>)); <span class="comment">//--&gt; ZZ</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// indexOf() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(doublyLinkedList.indexOf(<span class="string">&quot;XX&quot;</span>)); <span class="comment">//--&gt; 3</span></span><br><span class="line"><span class="built_in">console</span>.log(doublyLinkedList);</span><br><span class="line"></span><br><span class="line"><span class="comment">// removeAt() 测试</span></span><br><span class="line">doublyLinkedList.removeAt(<span class="number">0</span>);</span><br><span class="line">doublyLinkedList.removeAt(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(doublyLinkedList);</span><br><span class="line"></span><br><span class="line"><span class="comment">// update() 测试</span></span><br><span class="line">doublyLinkedList.update(<span class="number">0</span>, <span class="string">&quot;111111&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(doublyLinkedList);</span><br><span class="line"></span><br><span class="line"><span class="comment">// remove() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(doublyLinkedList.remove(<span class="string">&quot;111111&quot;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(doublyLinkedList.remove(<span class="string">&quot;22222&quot;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(doublyLinkedList);</span><br><span class="line"></span><br><span class="line"><span class="comment">// forwardToString() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(doublyLinkedList.forwardToString());</span><br><span class="line"></span><br><span class="line"><span class="comment">// backwardString() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(doublyLinkedList.backwardString());</span><br></pre></td></tr></table></figure>

<h1 id="五、集合"><a href="#五、集合" class="headerlink" title="五、集合"></a>五、集合</h1><p>几乎每种编程语言中，都有集合结构。集合比较常见的实现方式是<strong>哈希表</strong>，这里使用 JavaScript 的 Object 进行封装。</p>
<h2 id="1-集合特点"><a href="#1-集合特点" class="headerlink" title="1. 集合特点"></a>1. 集合特点</h2><ul>
<li>集合通常是由一组<strong>无序的</strong>、<strong>不能重复的</strong>元素构成。</li>
<li>集合的元素<strong>不能重复</strong>。</li>
<li>集合是特殊的数组。<ul>
<li>特殊之处在于里面的元素没有顺序，也不能重复。</li>
<li>没有顺序意味着不能通过下标值进行访问，不能重复意味着相同的对象在集合中只会存在一份。</li>
</ul>
</li>
</ul>
<h2 id="2-封装集合"><a href="#2-封装集合" class="headerlink" title="2. 封装集合"></a>2. 封装集合</h2><p>ES6 中的 <code>Set</code> 就是一个集合类，这里我们重新封装一个 <code>Set</code> 类，了解集合的底层实现。</p>
<h3 id="集合常见的操作"><a href="#集合常见的操作" class="headerlink" title="集合常见的操作"></a>集合常见的操作</h3><ul>
<li><code>add(value)</code> 向集合添加一个新的项。</li>
<li><code>remove(value)</code> 从集合移除一个值。</li>
<li><code>has(value)</code> 如果值在集合中，返回 <code>true</code>，否则返回<code> false</code>。</li>
<li><code>clear()</code> 移除集合中的所有项。</li>
<li><code>size()</code> 返回集合所包含元素的数量。与数组的 <code>length</code> 属性类似。</li>
<li><code>values()</code> 返回一个包含集合中所有值的数组。</li>
<li>还有其他的方法，用的不多，这里不做封装。</li>
</ul>
<h3 id="代码实现-14"><a href="#代码实现-14" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 集合结构的封装</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Set</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// has(value) 判断集合中是否存在 value 值，存在返回 true，否则返回 false</span></span><br><span class="line">  <span class="function"><span class="title">has</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.hasOwnProperty(value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// add(value) 往集合中添加 value（包含去重功能）</span></span><br><span class="line">  <span class="function"><span class="title">add</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.has(value)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">this</span>.items[value] = value;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// remove(value) 删除集合中指定的 value</span></span><br><span class="line">  <span class="function"><span class="title">remove</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 如果集合不存在该 value，返回 false</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.has(value)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">delete</span> <span class="built_in">this</span>.items[value];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// clear() 清空集合中所有 value</span></span><br><span class="line">  <span class="function"><span class="title">clear</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// size() 获取集合中的 value 个数</span></span><br><span class="line">  <span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(<span class="built_in">this</span>.items).length;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// values() 获取集合中所有的 value</span></span><br><span class="line">  <span class="function"><span class="title">values</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(<span class="built_in">this</span>.items);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码测试-11"><a href="#代码测试-11" class="headerlink" title="代码测试"></a>代码测试</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// add() 测试</span></span><br><span class="line">set.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;zxc&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(set); <span class="comment">//--&gt; &#123;items: &#123;123: &quot;123&quot;, abc: &quot;abc&quot;, zxc: &quot;zxc&quot;&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// has() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(set.has(<span class="string">&quot;123&quot;</span>)); <span class="comment">//--&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(set.has(<span class="string">&quot;456&quot;</span>)); <span class="comment">//--&gt; false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// remove() 测试</span></span><br><span class="line">set.remove(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(set); <span class="comment">//--&gt; &#123;items: &#123;123: &quot;123&quot;, zxc: &quot;zxc&quot;&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// size() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(set.size()); <span class="comment">//--&gt; 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// values() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(set.values()); <span class="comment">//--&gt; [&quot;123&quot;, &quot;zxc&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// clear() 测试</span></span><br><span class="line">set.clear();</span><br><span class="line"><span class="built_in">console</span>.log(set.values()); <span class="comment">//--&gt; []</span></span><br></pre></td></tr></table></figure>

<h2 id="3-集合间的操作"><a href="#3-集合间的操作" class="headerlink" title="3. 集合间的操作"></a>3. 集合间的操作</h2><ul>
<li>并集：对于给定的两个集合，返回一个包含两个集合中所有元素的新集合。</li>
<li>交集：对于给定的两个集合，返回一个包含两个集合中共有元素的新集合。</li>
<li>差集：对于给定的两个集合，返回一个包含所有存在于第一个集合且不存在于第二个集合的元素的新集合。</li>
<li>子集：验证一个给定集合是否是另一个集合的子集。</li>
</ul>
<p><a href="https://camo.githubusercontent.com/c0f9336adb3135c9bd677d302ef16315ebe61c1b43237ab1bde122c1d06e412c/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e3475746a666661706d3177302e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202202282234667.png" alt="image"></a></p>
<h3 id="并集的实现"><a href="#并集的实现" class="headerlink" title="并集的实现"></a>并集的实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// union() 求两个集合的并集</span></span><br><span class="line"><span class="function"><span class="title">union</span>(<span class="params">otherSet</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、创建一个新集合</span></span><br><span class="line">    <span class="keyword">let</span> unionSet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、将当前集合（this）的所有 value，添加到新集合（unionSet）中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> <span class="built_in">this</span>.values()) &#123;</span><br><span class="line">        unionSet.add(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、将 otherSet 集合的所有 value，添加到新集合（unionSet）中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> otherSet.values()) &#123;</span><br><span class="line">        unionSet.add(value); <span class="comment">// add() 已经有重复判断</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> unionSet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="交集的实现"><a href="#交集的实现" class="headerlink" title="交集的实现"></a>交集的实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// intersection() 求两个集合的交集</span></span><br><span class="line"><span class="function"><span class="title">intersection</span>(<span class="params">otherSet</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、创建一个新集合</span></span><br><span class="line">    <span class="keyword">let</span> intersectionSet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、从当前集合中取出每一个 value，判断是否在 otherSet 集合中存在</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> <span class="built_in">this</span>.values()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (otherSet.has(value)) &#123;</span><br><span class="line">            intersectionSet.add(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> intersectionSet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="差集的实现"><a href="#差集的实现" class="headerlink" title="差集的实现"></a>差集的实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// difference() 差集</span></span><br><span class="line"><span class="function"><span class="title">difference</span>(<span class="params">otherSet</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、创建一个新集合</span></span><br><span class="line">    <span class="keyword">let</span> differenceSet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、从当前集合中取出每一个 value，判断是否在 otherSet 集合中存在，不存在的即为差集</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> <span class="built_in">this</span>.values()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!otherSet.has(value)) &#123;</span><br><span class="line">            differenceSet.add(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> differenceSet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="子集的实现"><a href="#子集的实现" class="headerlink" title="子集的实现"></a>子集的实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// subset() 子集</span></span><br><span class="line"><span class="function"><span class="title">subset</span>(<span class="params">otherSet</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从当前集合中取出每一个 value，判断是否在 otherSet 集合中存在，有不存在的返回 false</span></span><br><span class="line">    <span class="comment">// 遍历完所有的，返回 true</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> <span class="built_in">this</span>.values()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!otherSet.has(value)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-集合的完整实现"><a href="#4-集合的完整实现" class="headerlink" title="4. 集合的完整实现"></a>4. 集合的完整实现</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 集合结构的封装</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Set</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// has(value) 判断集合中是否存在 value 值，存在返回 true，否则返回 false</span></span><br><span class="line">  <span class="function"><span class="title">has</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.hasOwnProperty(value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// add(value) 往集合中添加 value</span></span><br><span class="line">  <span class="function"><span class="title">add</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.has(value)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">this</span>.items[value] = value;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// remove(value) 删除集合中指定的 value</span></span><br><span class="line">  <span class="function"><span class="title">remove</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 如果集合不存在该 value，返回 false</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.has(value)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">delete</span> <span class="built_in">this</span>.items[value];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// clear() 清空集合中所有 value</span></span><br><span class="line">  <span class="function"><span class="title">clear</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// size() 获取集合中的 value 个数</span></span><br><span class="line">  <span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(<span class="built_in">this</span>.items).length;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// values() 获取集合中所有的 value</span></span><br><span class="line">  <span class="function"><span class="title">values</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(<span class="built_in">this</span>.items);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ------- 集合间的操作 ------- //</span></span><br><span class="line">  <span class="comment">// union() 求两个集合的并集</span></span><br><span class="line">  <span class="function"><span class="title">union</span>(<span class="params">otherSet</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、创建一个新集合</span></span><br><span class="line">    <span class="keyword">let</span> unionSet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、将当前集合（this）的所有 value，添加到新集合（unionSet）中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> <span class="built_in">this</span>.values()) &#123;</span><br><span class="line">      unionSet.add(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、将 otherSet 集合的所有 value，添加到新集合（unionSet）中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> otherSet.values()) &#123;</span><br><span class="line">      unionSet.add(value); <span class="comment">// add() 已经有重复判断</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> unionSet;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// intersection() 求两个集合的交集</span></span><br><span class="line">  <span class="function"><span class="title">intersection</span>(<span class="params">otherSet</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、创建一个新集合</span></span><br><span class="line">    <span class="keyword">let</span> intersectionSet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、从当前集合中取出每一个 value，判断是否在 otherSet 集合中存在</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> <span class="built_in">this</span>.values()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (otherSet.has(value)) &#123;</span><br><span class="line">        intersectionSet.add(value);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> intersectionSet;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// difference() 差集</span></span><br><span class="line">  <span class="function"><span class="title">difference</span>(<span class="params">otherSet</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、创建一个新集合</span></span><br><span class="line">    <span class="keyword">let</span> differenceSet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、从当前集合中取出每一个 value，判断是否在 otherSet 集合中存在，不存在的即为差集</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> <span class="built_in">this</span>.values()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!otherSet.has(value)) &#123;</span><br><span class="line">        differenceSet.add(value);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> differenceSet;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// subset() 子集</span></span><br><span class="line">  <span class="function"><span class="title">subset</span>(<span class="params">otherSet</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 从当前集合中取出每一个 value，判断是否在 otherSet 集合中存在，有不存在的返回 false</span></span><br><span class="line">    <span class="comment">// 遍历完所有的，返回 true</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> <span class="built_in">this</span>.values()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!otherSet.has(value)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="六、字典"><a href="#六、字典" class="headerlink" title="六、字典"></a>六、字典</h1><h2 id="1-字典特点"><a href="#1-字典特点" class="headerlink" title="1. 字典特点"></a>1. 字典特点</h2><ul>
<li>字典存储的是<strong>键值对</strong>，主要特点是<strong>一一对应</strong>。</li>
<li>比如保存一个人的信息<ul>
<li>数组形式：<code>[19，&quot;Tom&quot;, 1.65]</code>，可通过下标值取出信息。</li>
<li>字典形式：<code>&#123;&quot;age&quot;: 19, &quot;name&quot;: &quot;Tom&quot;, &quot;height&quot;: 165&#125;</code>，可以通过 <code>key</code> 取出 <code>value</code>。</li>
</ul>
</li>
<li>此外，在字典中 key 是不能重复且无序的，而 Value 可以重复。</li>
</ul>
<h2 id="2-字典和映射的关系"><a href="#2-字典和映射的关系" class="headerlink" title="2. 字典和映射的关系"></a>2. 字典和映射的关系</h2><ul>
<li>有些编程语言中称这种映射关系为<strong>字典</strong>，如 Swift 中的 <code>Dictionary</code>，Python 中的 <code>dict</code>。</li>
<li>有些编程语言中称这种映射关系为 <strong>Map</strong>，比如 Java 中的 <code>HashMap</code> 和 <code>TreeMap</code> 等。</li>
</ul>
<h2 id="3-字典常见的操作"><a href="#3-字典常见的操作" class="headerlink" title="3. 字典常见的操作"></a>3. 字典常见的操作</h2><ul>
<li><code>set(key,value)</code> 向字典中添加新元素。</li>
<li><code>remove(key)</code> 通过使用键值来从字典中移除键值对应的数据值。</li>
<li><code>has(key)</code> 如果某个键值存在于这个字典中，则返回 <code>true</code>，反之则返回 <code>false</code>。</li>
<li><code>get(key)</code> 通过键值查找特定的数值并返回。</li>
<li><code>clear()</code> 将这个字典中的所有元素全部删除。</li>
<li><code>size()</code> 返回字典所包含元素的数量。与数组的 <code>length</code> 属性类似。</li>
<li><code>keys()</code> 将字典所包含的所有键名以数组形式返回。</li>
<li><code>values()</code> 将字典所包含的所有数值以数组形式返回。</li>
</ul>
<h2 id="4-字典封装"><a href="#4-字典封装" class="headerlink" title="4. 字典封装"></a>4. 字典封装</h2><h3 id="代码实现-15"><a href="#代码实现-15" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字典结构的封装</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Map</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// has(key) 判断字典中是否存在某个 key</span></span><br><span class="line">  <span class="function"><span class="title">has</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.items.hasOwnProperty(key);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set(key, value) 在字典中添加键值对</span></span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params">key, value</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items[key] = value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// remove(key) 在字典中删除指定的 key</span></span><br><span class="line">  <span class="function"><span class="title">remove</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 如果集合不存在该 key，返回 false</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.has(key)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">delete</span> <span class="built_in">this</span>.items[key];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// get(key) 获取指定 key 的 value，如果没有，返回 undefined</span></span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.has(key) ? <span class="built_in">this</span>.items[key] : <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取所有的 key</span></span><br><span class="line">  <span class="function"><span class="title">keys</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(<span class="built_in">this</span>.items);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取所有的 value</span></span><br><span class="line">  <span class="function"><span class="title">values</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.values(<span class="built_in">this</span>.items);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// size() 获取字典中的键值对个数</span></span><br><span class="line">  <span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.keys().length;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// clear() 清空字典中所有的键值对</span></span><br><span class="line">  <span class="function"><span class="title">clear</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.items = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码测试-12"><a href="#代码测试-12" class="headerlink" title="代码测试"></a>代码测试</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// set() 测试</span></span><br><span class="line">map.set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;XPoet&quot;</span>);</span><br><span class="line">map.set(<span class="string">&quot;age&quot;</span>, <span class="number">18</span>);</span><br><span class="line">map.set(<span class="string">&quot;email&quot;</span>, <span class="string">&quot;i@xpoet.cn&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(map); <span class="comment">// &#123;items: &#123;name: &quot;XPoet&quot;, age: 18, email: &quot;i@xpoet.cn&quot;&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// has() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(map.has(<span class="string">&quot;name&quot;</span>)); <span class="comment">//--&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(map.has(<span class="string">&quot;address&quot;</span>)); <span class="comment">//--&gt; false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// remove() 测试</span></span><br><span class="line">map.remove(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(map); <span class="comment">// &#123;age: 18, email: &quot;i@xpoet.cn&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// get() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(map.get(<span class="string">&quot;age&quot;</span>)); <span class="comment">//--&gt; 18</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// keys() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(map.keys()); <span class="comment">//--&gt; [&quot;age&quot;, &quot;email&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// values() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(map.values()); <span class="comment">//--&gt; [18, &quot;i@xpoet.cn&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// size() 测试</span></span><br><span class="line"><span class="built_in">console</span>.log(map.size()); <span class="comment">//--&gt; 2</span></span><br></pre></td></tr></table></figure>

<h1 id="七、哈希表"><a href="#七、哈希表" class="headerlink" title="七、哈希表"></a>七、哈希表</h1><h2 id="1-认识哈希表"><a href="#1-认识哈希表" class="headerlink" title="1. 认识哈希表"></a>1. 认识哈希表</h2><p>哈希表是一种非常重要的数据结构，几乎所有的编程语言都直接或者间接应用这种数据结构。</p>
<p>哈希表通常是基于数组实现的，但是相对于数组，它存在更多优势：</p>
<ul>
<li>哈希表可以提供非常快速的 <strong>插入-删除-查找</strong> 操作。</li>
<li>无论多少数据，插入和删除值都只需接近常量的时间，即 <strong>O(1)</strong> 的时间复杂度。实际上，只需要几个机器指令即可完成。</li>
<li>哈希表的速度比树还要快，基本可以瞬间查找到想要的元素。</li>
<li>哈希表相对于树来说编码要简单得多。</li>
</ul>
<p>哈希表同样存在不足之处：</p>
<ul>
<li>哈希表中的数据是没有顺序的，所以不能以一种固定的方式（比如从小到大 ）来遍历其中的元素。</li>
<li>通常情况下，哈希表中的 <code>key</code> 是不允许重复的，不能放置相同的 <code>key</code>，用于保存不同的元素。</li>
</ul>
<p>哈希表是什么？</p>
<ul>
<li>哈希表并不好理解，不像数组、链表和树等可通过图形的形式表示其结构和原理。</li>
<li>哈希表的结构就是数组，但它<strong>神奇之处在于对下标值的一种变换</strong>，这种变换我们可以称之为<strong>哈希函数</strong>，通过哈希函数可以获取 HashCode。</li>
</ul>
<p>通过以下案例了解哈希表：</p>
<ul>
<li>案例一：公司想要存储 1000 个人的信息，每一个工号对应一个员工的信息。若使用数组，增删数据时比较麻烦；使用链表，获取数据时比较麻烦。有没有一种数据结构，能把某一员工的姓名转换为它对应的工号，再根据工号查找该员工的完整信息呢？没错此时就可以使用哈希表的哈希函数来实现。</li>
<li>案例二：存储联系人和对应的电话号码：当要查找张三（比如）的号码时，若使用数组：由于不知道存储张三数据对象的下标值，所以查找起来十分麻烦，使用链表时也同样麻烦。而使用哈希表就能通过哈希函数把张三这个名称转换为它对应的下标值，再通过下标值查找效率就非常高了。</li>
</ul>
<p>也就是说：哈希表最后还是基于数据来实现的，只不过哈希表能够通过哈希函数把字符串转化为对应的下标值，建立字符串和下标值的映射关系。</p>
<h3 id="认识哈希化"><a href="#认识哈希化" class="headerlink" title="认识哈希化"></a>认识哈希化</h3><p>为了把字符串转化为对应的下标值，需要有一套编码系统，为了方便理解我们创建这样一套编码系统：比如 a 为 1，b 为 2，c 为 3，以此类推 z 为 26，空格为 27（不考虑大写情况）。</p>
<p>有了编码系统后，将字母转化为数字也有很多种方案：</p>
<ul>
<li>方案一：数字相加。</li>
</ul>
<p>例如 cats 转化为数字：<code>3 + 1 + 20 + 19 = 43</code>，那么就把 43 作为 cats 单词的下标值储存在数组中；</p>
<p>但是这种方式会存在这样的问题：很多的单词按照该方式转化为数字后都是 43，比如 was。而在数组中一个下标值只能储存一个数据，所以该方式不合理。</p>
<ul>
<li>方案二：幂的连乘。</li>
</ul>
<p>我们平时使用的大于 10 的数字，就是用幂的连乘来表示它的唯一性的。 比如： <code>6543 = 6 * 10^3 + 5 * 10^2 + 4 * 10 + 3</code>；这样单词也可以用该种方式来表示：<code>cats = 3 * 27^3 + 1 * 27^2 + 20 * 27 + 17 = 60337</code>。</p>
<p>虽然该方式可以保证字符的唯一性，但是如果是较长的字符（如 aaaaaaaaaa）所表示的数字就非常大，此时要求很大容量的数组，然而其中却有许多下标值指向的是无效的数据（比如不存在 zxcvvv 这样的单词），造成了数组空间的浪费。</p>
<p>两种方案总结：</p>
<ul>
<li>第一种方案（让数字相加求和）产生的数组下标太少。</li>
<li>第二种方案（与 27 的幂相乘求和）产生的数组下标又太多。</li>
</ul>
<p>现在需要一种压缩方法，把幂的连乘方案系统中得到的<strong>巨大整数范围压缩到可接受的数组范围中</strong>。可以通过<strong>取余</strong>操作来实现。虽然取余操作得到的结构也有可能重复，但是可以通过其他方式解决。</p>
<h3 id="哈希表的一些概念"><a href="#哈希表的一些概念" class="headerlink" title="哈希表的一些概念"></a>哈希表的一些概念</h3><ul>
<li><p><strong>哈希化</strong></p>
<p>将<strong>大数字</strong>转化成<strong>数组范围内下标</strong>的过程，称之为哈希化。</p>
</li>
<li><p><strong>哈希函数</strong></p>
<p>我们通常会将单词转化成大数字，把大数字进行哈希化的代码实现放在一个函数中，该函数就称为哈希函数。</p>
</li>
<li><p><strong>哈希表</strong></p>
<p>对最终数据插入的数组进行整个结构的封装，得到的就是哈希表。</p>
</li>
</ul>
<h3 id="地址的冲突"><a href="#地址的冲突" class="headerlink" title="地址的冲突"></a>地址的冲突</h3><p>在实际中，经过哈希函数哈希化过后得到的下标值可能有重复，这种情况称为冲突，冲突是不可避免的，我们只能解决冲突。</p>
<p>解决冲突常见的两种方案：链地址法（拉链法）和开放地址法。</p>
<h4 id="链地址法（拉链法）"><a href="#链地址法（拉链法）" class="headerlink" title="链地址法（拉链法）"></a>链地址法（拉链法）</h4><p>如下图所示，我们将每一个数字都对 10 进行取余操作，则余数的范围 0~9 作为数组的下标值。并且，数组每一个下标值对应的位置存储的不再是一个数字了，而是存储由经过取余操作后得到相同余数的数字组成的数组或链表。</p>
<p><a href="https://camo.githubusercontent.com/bac48b1eaf688907bfb71bdb2af0f2e4001a7f200fa925772ffdb40a49511c5b/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e3569726c62613231336530302e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203011427246.png" alt="image"></a></p>
<p>这样可以根据下标值获取到整个数组或链表，之后继续在数组或链表中查找就可以了。而且，产生冲突的元素一般不会太多。</p>
<p>总结：链地址法解决冲突的办法是每个数组单元中存储的不再是单个数据，而是一条链条，这条链条常使用的数据结构为数组或链表，两种数据结构查找的效率相当（因为链条的元素一般不会太多）。</p>
<h4 id="开放地址法"><a href="#开放地址法" class="headerlink" title="开放地址法"></a>开放地址法</h4><p>开放地址法的主要工作方式是寻找空白的单元格来放置冲突的数据项。</p>
<p><a href="https://camo.githubusercontent.com/03d3c034ff14d397e49dc8e4342569765e98da9e1698fe5b7819004be7785a45/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e3532717a69786735773473302e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203011427293.png" alt="image"></a></p>
<p>根据探测空白单元格位置方式的不同，可分为三种方法：</p>
<ul>
<li>线性探测</li>
<li>二次探测</li>
<li>再哈希法</li>
</ul>
<h5 id="线性探测"><a href="#线性探测" class="headerlink" title="线性探测"></a>线性探测</h5><ul>
<li>当插入 13 时：</li>
</ul>
<p>经过哈希化（对 10 取余）之后得到的下标值 index=3，但是该位置已经放置了数据 33。而线性探测就是从 index 位置+1 开始向后一个一个来查找合适的位置来放置 13，所谓合适的位置指的是空的位置，如上图中 index=4 的位置就是合适的位置。</p>
<ul>
<li>当查询 13 时：<ul>
<li>首先 13 经过哈希化得到 index=3，如果 index=3 的位置存放的数据与需要查询的数据 13 相同，就直接返回； 不相同时，则线性查找，从 index+1 位置开始一个一个位置地查找数据 13。</li>
<li>查询过程中不会遍历整个哈希表，只要查询到空位置，就停止，因为插入 13 时不会跳过空位置去插入其他位置。</li>
</ul>
</li>
<li>当删除 13 时：<ul>
<li>删除操作和上述两种情况类似，但需要注意的是，删除一个数据项时，不能将该位置下标的内容设置为 null，否则会影响到之后其他的查询操作，因为一遇到为 null 的位置就会停止查找。</li>
<li>通常删除一个位置的数据项时，我们可以将它进行特殊处理（比如设置为-1），这样在查找时遇到-1 就知道要继续查找。</li>
</ul>
</li>
</ul>
<p>线性探测存在的问题：</p>
<ul>
<li>线性探测存在一个比较严重的问题，就是聚集。</li>
<li>如哈希表中还没插入任何元素时，插入 23、24、25、26、27，这就意味着下标值为 3、4、5、6、7 的位置都放置了数据，这种一连串填充单元就称为聚集。</li>
<li>聚集会影响哈希表的性能，无论是插入/查询/删除都会影响。</li>
<li>比如插入 13 时就会发现，连续的单元 3~7 都不允许插入数据，并且在插入的过程中需要经历多次这种情况。二次探测法可以解决该问题。</li>
</ul>
<p><a href="https://camo.githubusercontent.com/1e48bd2ea067c7bb75488390cfc107848378caf83184f6e98d8a484b9c4c564b/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e34376c33363032316a386d302e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203011427196.png" alt="image"></a></p>
<h5 id="二次探测"><a href="#二次探测" class="headerlink" title="二次探测"></a>二次探测</h5><p>上文所说的线性探测存在的问题：</p>
<ul>
<li><p>如果之前的数据是连续插入的，那么新插入的一个数据可能需要探测很长的距离；</p>
<p>二次探测是在线性探测的基础上进行了优化：</p>
</li>
<li><p>线性探测：我们可以看成是步长为 1 的探测，比如从下表值 x 开始，那么线性探测就是按照下标值：x+1、x+2、x+3 等依次探测；</p>
</li>
<li><p>二次探测：对步长进行了优化，比如从下标值 x 开始探测：x+1^2^、x+2^2^、x+3^3^ 。这样一次性探测比较长的距离，避免了数据聚集带来的影响。</p>
</li>
<li><p>二次探测存在的问题：</p>
<p>当插入数据分布性较大的一组数据时，比如：13-163-63-3-213，这种情况会造成步长不一的一种聚集（虽然这种情况出现的概率较线性探测的聚集要小），同样会影响性能。</p>
</li>
</ul>
<h5 id="再哈希法"><a href="#再哈希法" class="headerlink" title="再哈希法"></a>再哈希法</h5><p>在开放地址法中寻找空白单元格的最好的解决方式为再哈希化。</p>
<ul>
<li>二次探测的步长是固定的：1，4，9，16 依次类推。</li>
<li>现在需要一种方法：产生一种依赖关键字(数据)的探测序列，而不是每个关键字探测步长都一样。</li>
<li>这样，不同的关键字即使映射到相同的数组下标，也可以使用不同的探测序列。</li>
<li>再哈希法的做法为：把关键字用另一个哈希函数，再做一次哈希化，用这次哈希化的结果作为该关键字的步长。</li>
</ul>
<p>第二次哈希化需要满足以下两点：</p>
<ul>
<li>和第一个哈希函数不同，不然哈希化后的结果仍是原来位置；</li>
<li>不能输出为 0，否则每次探测都是原地踏步的死循环；</li>
</ul>
<p>优秀的哈希函数：</p>
<ul>
<li>stepSize = constant - （key % constant）；</li>
<li>其中 constant 是质数，且小于数组的容量；</li>
<li>例如：stepSize = 5 - （key % 5），满足需求，并且结果不可能为 0；</li>
</ul>
<p>哈希化的效率</p>
<p>哈希表中执行插入和搜索操作效率是非常高的。</p>
<ul>
<li>如果没有发生冲突，那么效率就会更高；</li>
<li>如果发生冲突，存取时间就依赖后来的探测长度；</li>
<li>平均探测长度以及平均存取时间，取决于填装因子，随着填装因子变大，探测长度会越来越长。</li>
</ul>
<h4 id="装填因子"><a href="#装填因子" class="headerlink" title="装填因子"></a>装填因子</h4><ul>
<li>装填因子表示当前哈希表中已经包含的数据项和整个哈希表长度的比值；</li>
<li>装填因子 = 总数据项 / 哈希表长度；</li>
<li>开放地址法的装填因子最大为 1，因为只有空白的单元才能放入元素；</li>
<li>链地址法的装填因子可以大于 1，因为只要愿意，拉链法可以无限延伸下去；</li>
</ul>
<h4 id="不同探测方式性能的比较"><a href="#不同探测方式性能的比较" class="headerlink" title="不同探测方式性能的比较"></a>不同探测方式性能的比较</h4><ul>
<li><p>线性探测</p>
<p>可以看到，随着装填因子的增大，平均探测长度呈指数形式增长，性能较差。实际情况中，最好的装填因子取决于存储效率和速度之间的平衡，随着装填因子变小，存储效率下降，而速度上升。</p>
<p><a href="https://camo.githubusercontent.com/14e3e7e844b63fed8eedb6251158a0c24093cf6a73735e9effee15b255b550f2/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e327063787631663732306f302e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203011427379.png" alt="image"></a></p>
</li>
<li><p>二次探测和再哈希化的性能</p>
<p>二次探测和再哈希法性能相当，它们的性能比线性探测略好。由下图可知，随着装填因子的变大，平均探测长度呈指数形式增长，需要探测的次数也呈指数形式增长，性能不高。</p>
<p><a href="https://camo.githubusercontent.com/2017bfaf5d5776eb44f168b0a2e7632167bf1b929f567b59dd61ece302c048ca/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e66303674697a79706636672e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203011427336.png" alt="image"></a></p>
</li>
<li><p>链地址法的性能</p>
<p>可以看到随着装填因子的增加，平均探测长度呈线性增长，较为平缓。在开发中使用链地址法较多，比如 Java 中的 HashMap 中使用的就是链地址法。</p>
<p><a href="https://camo.githubusercontent.com/2a40144949f37ad5bd6be6b2d184c49d66050f4e3d24cb3f211367389b1419ee/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e343573336e7477776a6961302e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203011427409.png" alt="image"></a></p>
</li>
</ul>
<h3 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h3><p>哈希表的优势在于它的速度，所以哈希函数不能采用消耗性能较高的复杂算法。提高速度的一个方法是在哈希函数中尽量减少乘法和除法。</p>
<p>性能高的哈希函数应具备以下两个优点：</p>
<ul>
<li>快速的计算；</li>
<li>均匀的分布；</li>
</ul>
<h4 id="快速计算"><a href="#快速计算" class="headerlink" title="快速计算"></a>快速计算</h4><p>霍纳法则：在中国霍纳法则也叫做秦久韶算法，具体算法为：</p>
<p><a href="https://camo.githubusercontent.com/b8b699a7c5e2af394f981139407696d021640fcf8673e456fa46d6a0b6d0199b/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e346b7a3631646a76766175302e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203011427317.png" alt="image"></a></p>
<p>求多项式的值时，首先计算最内层括号内一次多项式的值，然后由内向外逐层计算一次多项式的值。这种算法把求 n 次多项式 f(x)的值就转化为求 n 个一次多项式的值。</p>
<ul>
<li>变换之前：<ul>
<li>乘法次数：n(n+1)/2 次；</li>
<li>加法次数：n 次；</li>
</ul>
</li>
<li>变换之后：<ul>
<li>乘法次数：n 次；</li>
<li>加法次数：n 次；</li>
</ul>
</li>
</ul>
<p>如果使用大 O 表示时间复杂度的话，直接从变换前的 O(N^2)降到了 O(N)。</p>
<h4 id="均匀分布"><a href="#均匀分布" class="headerlink" title="均匀分布"></a>均匀分布</h4><p>在设计哈希表时，我们已经有办法处理映射到相同下标值的情况：链地址法或者开放地址法。但是，为了提供效率，最好的情况还是让数据在哈希表中均匀分布。因此，我们需要在使用常量的地方，尽量使用质数。比如：哈希表的长度、N 次幂的底数等。</p>
<p>Java 中的 HashMap 采用的是链地址法，哈希化采用的是公式为：index = HashCode(key) &amp; (Length-1) 即将数据化为二进制进行与运算，而不是取余运算。这样计算机直接运算二进制数据，效率更高。但是 JavaScript 在进行较大数据的与运算时会出现问题，所以我们使用 JavaScript 实现哈希化时采用取余运算。</p>
<h2 id="2-封装哈希表"><a href="#2-封装哈希表" class="headerlink" title="2. 封装哈希表"></a>2. 封装哈希表</h2><h3 id="哈希表常见操作"><a href="#哈希表常见操作" class="headerlink" title="哈希表常见操作"></a>哈希表常见操作</h3><ul>
<li><code>put(key, value)</code> 插入或修改操作。</li>
<li><code>get(key)</code> 获取哈希表中特定位置的元素。</li>
<li><code>remove(key)</code> 删除哈希表中特定位置的元素。</li>
<li><code>isEmpty()</code> 如果哈希表中不包含任何元素，返回 <code>trun</code>，如果哈希表长度大于 0 则返回 <code>false</code>。</li>
<li><code>size()</code> 返回哈希表包含的元素个数。</li>
<li><code>resize(value)</code> 对哈希表进行扩容操作。</li>
</ul>
<h3 id="哈希函数的简单实现"><a href="#哈希函数的简单实现" class="headerlink" title="哈希函数的简单实现"></a>哈希函数的简单实现</h3><p>首先使用霍纳法则计算 hashCode 的值，通过取余操作实现哈希化，此处先简单地指定数组的大小。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">hashFn</span>(<span class="params">string, limit = <span class="number">7</span></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 自己采用的一个质数（无强制要求，质数即可）</span></span><br><span class="line">  <span class="keyword">const</span> PRIME = <span class="number">31</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1、定义存储 hashCode 的变量</span></span><br><span class="line">  <span class="keyword">let</span> hashCode = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2、使用霍纳法则（秦九韶算法），计算 hashCode 的值【charCodeAt为自带函数】</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> string) &#123;</span><br><span class="line">    hashCode = PRIME * hashCode + item.charCodeAt();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3、对 hashCode 取余，并返回</span></span><br><span class="line">  <span class="keyword">return</span> hashCode % limit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>哈希函数测试</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(hashFn(<span class="string">&quot;123&quot;</span>)); <span class="comment">//--&gt; 5</span></span><br><span class="line"><span class="built_in">console</span>.log(hashFn(<span class="string">&quot;abc&quot;</span>)); <span class="comment">//--&gt; 6</span></span><br></pre></td></tr></table></figure>

<h3 id="哈希表的实现"><a href="#哈希表的实现" class="headerlink" title="哈希表的实现"></a>哈希表的实现</h3><h4 id="创建哈希表类"><a href="#创建哈希表类" class="headerlink" title="创建哈希表类"></a>创建哈希表类</h4><p>封装的哈希表的数据结构模型：</p>
<p><a href="https://camo.githubusercontent.com/a161a8b0f81b9c11b3563b711b037c470f14f68759734ebf09ecae647d843561/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e3768336561686362727673302e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203011427788.png" alt="image"></a></p>
<p>首先创建哈希表类 HashTable，并添加必要的属性和上面实现的哈希函数，再进行其他方法的实现。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HashTable</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.storage = []; <span class="comment">// 哈希表存储数据的变量</span></span><br><span class="line">    <span class="built_in">this</span>.count = <span class="number">0</span>; <span class="comment">// 当前存放的元素个数</span></span><br><span class="line">    <span class="built_in">this</span>.limit = <span class="number">7</span>; <span class="comment">// 哈希表长度（初始设为质数 7）</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="put-key-value"><a href="#put-key-value" class="headerlink" title="put(key,value)"></a>put(key,value)</h4><p>哈希表的插入和修改操作是同一个函数：因为，当使用者传入一个 <code>[key, value]</code> 时，如果原来不存在该 key，那么就是插入操作，如果原来已经存在该 key，那么就是修改操作。</p>
<p><a href="https://camo.githubusercontent.com/e40f93a507254f4e50d3bf7afd97d02f02d058f67f13afab44675ccc0df67506/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e326138316777647a6e6e386b2e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203011427275.png" alt="image"></a></p>
<p>实现思路：</p>
<ul>
<li>首先，根据 key 获取索引值 index，目的为将数据插入到 storage 的对应位置；</li>
<li>然后，根据索引值取出 bucket，如果 bucket 不存在，先创建 bucket，随后放置在该索引值的位置；</li>
<li>接着，判断新增还是修改原来的值。如果已经有值了，就修改该值；如果没有，就执行后续操作。</li>
<li>最后，进行新增数据操作。</li>
</ul>
<p>代码实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// put(key, value) 往哈希表里添加数据</span></span><br><span class="line"><span class="function"><span class="title">put</span>(<span class="params">key, value</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1、根据 key 获取要映射到 storage 里面的 index（通过哈希函数获取）</span></span><br><span class="line">  <span class="keyword">const</span> index = hashFn(key, <span class="built_in">this</span>.limit);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2、根据 index 取出对应的 bucket</span></span><br><span class="line">  <span class="keyword">let</span> bucket = <span class="built_in">this</span>.storage[index];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3、判断是否存在 bucket</span></span><br><span class="line">  <span class="keyword">if</span> (bucket === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    bucket = [];  <span class="comment">// 不存在则创建</span></span><br><span class="line">    <span class="built_in">this</span>.storage[index] = bucket;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4、判断是插入数据操作还是修改数据操作</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; bucket.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> tuple = bucket[i]; <span class="comment">// tuple 的格式：[key, value]</span></span><br><span class="line">    <span class="keyword">if</span> (tuple[<span class="number">0</span>] === key) &#123; <span class="comment">// 如果 key 相等，则修改数据</span></span><br><span class="line">      tuple[<span class="number">1</span>] = value;</span><br><span class="line">      <span class="keyword">return</span>; <span class="comment">// 修改完 tuple 里数据，return 终止不再往下执行。</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 5、bucket 新增数据</span></span><br><span class="line">  bucket.push([key, value]); <span class="comment">// bucket 存储元组 tuple，格式为 [key, value]</span></span><br><span class="line">  <span class="built_in">this</span>.count++;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断哈希表是否要扩容，若装填因子 &gt; 0.75，则扩容</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.count / <span class="built_in">this</span>.limit &gt; <span class="built_in">this</span>.loadFactor) &#123;</span><br><span class="line">    <span class="built_in">this</span>.resize(<span class="built_in">this</span>.getPrime(<span class="built_in">this</span>.limit * <span class="number">2</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="get-key"><a href="#get-key" class="headerlink" title="get(key)"></a>get(key)</h4><p>实现思路：</p>
<ul>
<li>首先，根据 key 通过哈希函数获取它在 <code>storage</code> 中对应的索引值 <code>index</code>。</li>
<li>然后，根据索引值获取对应的 <code>bucket</code>。</li>
<li>接着，判断获取到的 <code>bucket</code> 是否为 <code>null</code>，如果为 <code>null</code>，直接返回 <code>null</code>。</li>
<li>随后，线性遍历 <code>bucket</code> 中每一个 <code>key</code> 是否等于传入的 <code>key</code>。如果等于，直接返回对应的 <code>value</code>。</li>
<li>最后，遍历完 <code>bucket</code> 后，仍然没有找到对应的 <code>key</code>，直接 <code>return null</code> 即可。</li>
</ul>
<p>代码实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据 get(key) 获取 value</span></span><br><span class="line"><span class="function"><span class="title">get</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> index = hashFn(key, <span class="built_in">this</span>.limit);</span><br><span class="line">  <span class="keyword">const</span> bucket = <span class="built_in">this</span>.storage[index];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (bucket === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> tuple <span class="keyword">of</span> bucket) &#123;</span><br><span class="line">    <span class="keyword">if</span> (tuple[<span class="number">0</span>] === key) &#123;</span><br><span class="line">      <span class="keyword">return</span> tuple[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="remove-key"><a href="#remove-key" class="headerlink" title="remove(key)"></a>remove(key)</h4><p>实现思路：</p>
<ul>
<li>首先，根据 key 通过哈希函数获取它在 <code>storage</code> 中对应的索引值 <code>index</code>。</li>
<li>然后，根据索引值获取对应的 <code>bucket</code>。</li>
<li>接着，判断获取到的 <code>bucket</code> 是否为 <code>null</code>，如果为 <code>null</code>，直接返回 <code>null</code>。</li>
<li>随后，线性查找 <code>bucket</code>，寻找对应的数据，并且删除。</li>
<li>最后，依然没有找到，返回 <code>null</code>。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// remove(key) 删除指定 key 的数据</span></span><br><span class="line"><span class="function"><span class="title">remove</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> index = hashFn(key, <span class="built_in">this</span>.limit);</span><br><span class="line">  <span class="keyword">const</span> bucket = <span class="built_in">this</span>.storage[index];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (bucket === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历 bucket，找到对应位置的 tuple，将其删除</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = bucket.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> tuple = bucket[i];</span><br><span class="line">    <span class="keyword">if</span> (tuple[<span class="number">0</span>] === key) &#123;</span><br><span class="line">      bucket.splice(i, <span class="number">1</span>); <span class="comment">// 删除对应位置的数组项</span></span><br><span class="line">      <span class="built_in">this</span>.count--;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 根据装填因子的大小，判断是否要进行哈希表压缩</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.limit &gt; <span class="number">7</span> &amp;&amp; <span class="built_in">this</span>.count / <span class="built_in">this</span>.limit &lt; <span class="built_in">this</span>.minLoadFactor) &#123;</span><br><span class="line">        <span class="built_in">this</span>.resize(<span class="built_in">this</span>.getPrime(<span class="built_in">Math</span>.floor(<span class="built_in">this</span>.limit / <span class="number">2</span>)));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> tuple;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="isEmpty"><a href="#isEmpty" class="headerlink" title="isEmpty()"></a>isEmpty()</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.count === <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="size"><a href="#size" class="headerlink" title="size()"></a>size()</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-哈希表的扩容与压缩"><a href="#3-哈希表的扩容与压缩" class="headerlink" title="3. 哈希表的扩容与压缩"></a>3. 哈希表的扩容与压缩</h2><p>为什么需要扩容？</p>
<ul>
<li>前面我们在哈希表中使用的是长度为 7 的数组，由于使用的是链地址法，装填因子(loadFactor)可以大于 1，所以这个哈希表可以无限制地插入新数据。</li>
<li>但是，随着数据量的增多，storage 中每一个 <code>index</code> 对应的 <code>bucket</code> 数组（链表）就会越来越长，这就会造成哈希表效率的降低。</li>
</ul>
<p>什么情况下需要扩容？</p>
<ul>
<li>常见的情况是 <code>loadFactor &gt; 0.75</code> 的时候进行扩容。</li>
</ul>
<p>如何进行扩容？</p>
<ul>
<li>简单的扩容可以直接扩大两倍（关于质数，之后讨论）。</li>
<li>扩容之后所有的数据项都要进行同步修改。</li>
</ul>
<p>实现思路：</p>
<ul>
<li>首先，定义一个变量，比如 oldStorage 指向原来的 <code>storage</code>。</li>
<li>然后，创建一个新的容量更大的数组，让 <code>this.storage</code> 指向它。</li>
<li>最后，将 oldStorage 中的每一个 bucket 中的每一个数据取出来依次添加到 <code>this.storage</code> 指向的新数组中。</li>
</ul>
<p><a href="https://camo.githubusercontent.com/4e264b2c6407299135ef900739648974654d5ee81a17b38b6edd3e1c1f68af8d/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e3778726179766a776832772e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203011427283.png" alt="image"></a></p>
<h3 id="resize-的实现"><a href="#resize-的实现" class="headerlink" title="resize() 的实现"></a>resize() 的实现</h3><p>装填因子 = 哈希表中数据 / 哈希表长度，即 <code>loadFactor = count / HashTable.length</code>。</p>
<p>resize 方法，既可以实现哈希表的扩容，也可以实现哈希表容量的压缩。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 重新调整哈希表大小，扩容或压缩</span></span><br><span class="line"><span class="function"><span class="title">resize</span>(<span class="params">newLimit</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1、保存旧的 storage 数组内容</span></span><br><span class="line">  <span class="keyword">const</span> oldStorage = <span class="built_in">this</span>.storage;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2、重置所有属性</span></span><br><span class="line">  <span class="built_in">this</span>.storage = [];</span><br><span class="line">  <span class="built_in">this</span>.count = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">this</span>.limit = newLimit;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3、遍历 oldStorage，取出所有数据，重新 put 到 this.storage</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> bucket <span class="keyword">of</span> oldStorage) &#123;</span><br><span class="line">    <span class="keyword">if</span> (bucket) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> b <span class="keyword">of</span> bucket) &#123;</span><br><span class="line">        <span class="built_in">this</span>.put(b[<span class="number">0</span>], b[<span class="number">1</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>通常情况下当装填因子 <code>laodFactor &gt; 0.75</code> 时，对哈希表进行扩容。在哈希表中的添加方法（push 方法）中添加如下代码，判断是否需要调用扩容函数进行扩容。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断哈希表是否要扩容，若装填因子 &gt; 0.75，则扩容</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.count / <span class="built_in">this</span>.limit &gt; <span class="built_in">this</span>.loadFactor) &#123;</span><br><span class="line">  <span class="built_in">this</span>.resize(<span class="built_in">this</span>.getPrime(<span class="built_in">this</span>.limit * <span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>当装填因子 <code>laodFactor &lt; 0.25</code> 时，对哈希表容量进行压缩。在哈希表中的删除方法（remove 方法）中添加如下代码，判断是否需要调用扩容函数进行压缩。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据装填因子的大小，判断是否要进行哈希表压缩</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.limit &gt; <span class="number">7</span> &amp;&amp; <span class="built_in">this</span>.count / <span class="built_in">this</span>.limit &lt; <span class="built_in">this</span>.minLoadFactor) &#123;</span><br><span class="line">  <span class="built_in">this</span>.resize(<span class="built_in">this</span>.getPrime(<span class="built_in">Math</span>.floor(<span class="built_in">this</span>.limit / <span class="number">2</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="选择质数作为哈希表容量"><a href="#选择质数作为哈希表容量" class="headerlink" title="选择质数作为哈希表容量"></a>选择质数作为哈希表容量</h3><h4 id="质数判断"><a href="#质数判断" class="headerlink" title="质数判断"></a>质数判断</h4><blockquote>
<p>1 不是质数</p>
</blockquote>
<ul>
<li><p>方法一：针对质数的特点：只能被 1 和 number 整除，不能被 2 ~ (number-1)整除。遍历 2 ~ (num-1) 。</p>
<p>这种方法虽然能实现质数的判断，但是效率不高。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPrime</span>(<span class="params">number</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (number &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt; number; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (number % i === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>方法二：只需要遍历 2 ~ num 的平方根即可。该方法性能较好。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPrime</span>(<span class="params">number</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (number &lt;= <span class="number">1</span> || number === <span class="number">4</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">const</span> temp = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.sqrt(number));</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt; temp; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (number % i === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="实现扩容或压缩后的哈希表容量为质数"><a href="#实现扩容或压缩后的哈希表容量为质数" class="headerlink" title="实现扩容或压缩后的哈希表容量为质数"></a>实现扩容或压缩后的哈希表容量为质数</h4><p>实现思路：</p>
<p>2 倍扩容或压缩之后，通过循环调用 <code>isPrime</code> 判断得到的容量是否为质数，不是则+1，直到是为止。比如原长度：7，2 倍扩容后长度为 14，14 不是质数，<code>14 + 1 = 15</code> 不是质数，<code>15 + 1 = 16</code> 不是质数，<code>16 + 1 = 17</code> 是质数，停止循环，由此得到质数 17。</p>
<ul>
<li><p>第一步：首先需要为 HashTable 类添加判断质数的 <code>isPrime</code> 方法和获取质数的 <code>getPrime</code> 方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// getPrime(number) 根据传入的 number 获取最临近的质数</span></span><br><span class="line"><span class="function"><span class="title">getPrime</span>(<span class="params">number</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">while</span> (!isPrime(number)) &#123;</span><br><span class="line">    number++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>修改添加元素的 <code>put</code> 方法和删除元素的 <code>remove</code> 方法中关于数组扩容的相关操作：</p>
<p>在 <code>put</code> 方法中添加如下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断哈希表是否要扩容，若装填因子 &gt; 0.75，则扩容</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.count / <span class="built_in">this</span>.limit &gt; <span class="built_in">this</span>.loadFactor) &#123;</span><br><span class="line">  <span class="built_in">this</span>.resize(<span class="built_in">this</span>.getPrime(<span class="built_in">this</span>.limit * <span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 <code>remove</code> 方法中添加如下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据装填因子的大小，判断是否要进行哈希表压缩</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.limit &gt; <span class="number">7</span> &amp;&amp; <span class="built_in">this</span>.count / <span class="built_in">this</span>.limit &lt; <span class="built_in">this</span>.minLoadFactor) &#123;</span><br><span class="line">  <span class="built_in">this</span>.resize(<span class="built_in">this</span>.getPrime(<span class="built_in">Math</span>.floor(<span class="built_in">this</span>.limit / <span class="number">2</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="4-哈希表完整实现"><a href="#4-哈希表完整实现" class="headerlink" title="4. 哈希表完整实现"></a>4. 哈希表完整实现</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HashTable</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.storage = []; <span class="comment">// 哈希表存储数据的变量</span></span><br><span class="line">    <span class="built_in">this</span>.count = <span class="number">0</span>; <span class="comment">// 当前存放的元素个数</span></span><br><span class="line">    <span class="built_in">this</span>.limit = <span class="number">7</span>; <span class="comment">// 哈希表长度（初始设为质数 7）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 装填因子(已有个数/总个数)</span></span><br><span class="line">    <span class="built_in">this</span>.loadFactor = <span class="number">0.75</span>;</span><br><span class="line">    <span class="built_in">this</span>.minLoadFactor = <span class="number">0.25</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// getPrime(number) 根据传入的 number 获取最临近的质数</span></span><br><span class="line">  <span class="function"><span class="title">getPrime</span>(<span class="params">number</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (!isPrime(number)) &#123;</span><br><span class="line">      number++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> number;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// put(key, value) 往哈希表里添加数据</span></span><br><span class="line">  <span class="function"><span class="title">put</span>(<span class="params">key, value</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、根据 key 获取要映射到 storage 里面的 index（通过哈希函数获取）</span></span><br><span class="line">    <span class="keyword">const</span> index = hashFn(key, <span class="built_in">this</span>.limit);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、根据 index 取出对应的 bucket</span></span><br><span class="line">    <span class="keyword">let</span> bucket = <span class="built_in">this</span>.storage[index];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、判断是否存在 bucket</span></span><br><span class="line">    <span class="keyword">if</span> (bucket === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      bucket = []; <span class="comment">// 不存在则创建</span></span><br><span class="line">      <span class="built_in">this</span>.storage[index] = bucket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4、判断是插入数据操作还是修改数据操作</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; bucket.length; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> tuple = bucket[i]; <span class="comment">// tuple 的格式：[key, value]</span></span><br><span class="line">      <span class="keyword">if</span> (tuple[<span class="number">0</span>] === key) &#123;</span><br><span class="line">        <span class="comment">// 如果 key 相等，则修改数据</span></span><br><span class="line">        tuple[<span class="number">1</span>] = value;</span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">// 修改完 tuple 里数据，return 终止，不再往下执行。</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5、bucket 新增数据</span></span><br><span class="line">    bucket.push([key, value]); <span class="comment">// bucket 存储元组 tuple，格式为 [key, value]</span></span><br><span class="line">    <span class="built_in">this</span>.count++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断哈希表是否要扩容，若装填因子 &gt; 0.75，则扩容</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.count / <span class="built_in">this</span>.limit &gt; <span class="built_in">this</span>.loadFactor) &#123;</span><br><span class="line">      <span class="built_in">this</span>.resize(<span class="built_in">this</span>.getPrime(<span class="built_in">this</span>.limit * <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 根据 get(key) 获取 value</span></span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> index = hashFn(key, <span class="built_in">this</span>.limit);</span><br><span class="line">    <span class="keyword">const</span> bucket = <span class="built_in">this</span>.storage[index];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bucket === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> tuple <span class="keyword">of</span> bucket) &#123;</span><br><span class="line">      <span class="keyword">if</span> (tuple[<span class="number">0</span>] === key) &#123;</span><br><span class="line">        <span class="keyword">return</span> tuple[<span class="number">1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// remove(key) 删除指定 key 的数据</span></span><br><span class="line">  <span class="function"><span class="title">remove</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> index = hashFn(key, <span class="built_in">this</span>.limit);</span><br><span class="line">    <span class="keyword">const</span> bucket = <span class="built_in">this</span>.storage[index];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bucket === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历 bucket，找到对应位置的 tuple，将其删除</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = bucket.length; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> tuple = bucket[i];</span><br><span class="line">      <span class="keyword">if</span> (tuple[<span class="number">0</span>] === key) &#123;</span><br><span class="line">        bucket.splice(i, <span class="number">1</span>); <span class="comment">// 删除对应位置的数组项</span></span><br><span class="line">        <span class="built_in">this</span>.count--;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据装填因子的大小，判断是否要进行哈希表压缩</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.limit &gt; <span class="number">7</span> &amp;&amp; <span class="built_in">this</span>.count / <span class="built_in">this</span>.limit &lt; <span class="built_in">this</span>.minLoadFactor) &#123;</span><br><span class="line">          <span class="built_in">this</span>.resize(<span class="built_in">this</span>.getPrime(<span class="built_in">Math</span>.floor(<span class="built_in">this</span>.limit / <span class="number">2</span>)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> tuple;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.count === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.count;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 重新调整哈希表大小，扩容或压缩</span></span><br><span class="line">  <span class="function"><span class="title">resize</span>(<span class="params">newLimit</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、保存旧的 storage 数组内容</span></span><br><span class="line">    <span class="keyword">const</span> oldStorage = <span class="built_in">this</span>.storage;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、重置所有属性</span></span><br><span class="line">    <span class="built_in">this</span>.storage = [];</span><br><span class="line">    <span class="built_in">this</span>.count = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">this</span>.limit = newLimit;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、遍历 oldStorage，取出所有数据，重新 put 到 this.storage</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> bucket <span class="keyword">of</span> oldStorage) &#123;</span><br><span class="line">      <span class="keyword">if</span> (bucket) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> b <span class="keyword">of</span> bucket) &#123;</span><br><span class="line">          <span class="built_in">this</span>.put(b[<span class="number">0</span>], b[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="八-1-、树"><a href="#八-1-、树" class="headerlink" title="八(1)、树"></a>八(1)、树</h1><h2 id="1-真实的树："><a href="#1-真实的树：" class="headerlink" title="1. 真实的树："></a>1. 真实的树：</h2><p><a href="https://camo.githubusercontent.com/3e465ca750299ec8de45b14ed82f2f56cd953199c9c4835b8fcaed260c8c73a7/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e36706e7a7a7862696e6a73302e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203042101598.png" alt="image"></a></p>
<h2 id="2-树的特点："><a href="#2-树的特点：" class="headerlink" title="2. 树的特点："></a>2. 树的特点：</h2><ul>
<li>树一般都有一个根，连接着根的是树干；</li>
<li>树干会发生分叉，形成许多树枝，树枝会继续分化成更小的树枝；</li>
<li>树枝的最后是叶子；</li>
</ul>
<p>现实生活中很多结构都是树的抽象，模拟的树结构相当于旋转 <code>180°</code> 的树。</p>
<p><a href="https://camo.githubusercontent.com/5dd78d3f11f9038c4d2ea586ffaa7b1acb4fc67a09c51d7fe14115766b5f21af/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e346d72796762746e643677302e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203042101411.png" alt="image"></a></p>
<h2 id="3-树结构对比于数组-链表-哈希表有哪些优势呢？"><a href="#3-树结构对比于数组-链表-哈希表有哪些优势呢？" class="headerlink" title="3. 树结构对比于数组/链表/哈希表有哪些优势呢？"></a>3. 树结构对比于数组/链表/哈希表有哪些优势呢？</h2><p>数组：</p>
<ul>
<li>优点：可以通过下标值访问，效率高；</li>
<li>缺点：查找数据时需要先对数据进行排序，生成有序数组，才能提高查找效率；并且在插入和删除元素时，需要大量的位移操作；</li>
</ul>
<p>链表：</p>
<ul>
<li>优点：数据的插入和删除操作效率都很高；</li>
<li>缺点：查找效率低，需要从头开始依次查找，直到找到目标数据为止；当需要在链表中间位置插入或删除数据时，插入或删除的效率都不高。</li>
</ul>
<p>哈希表：</p>
<ul>
<li>优点：哈希表的插入/查询/删除效率都非常高；</li>
<li>缺点：空间利用率不高，底层使用的数组中很多单元没有被利用；并且哈希表中的元素是无序的，不能按照固定顺序遍历哈希表中的元素；而且不能快速找出哈希表中最大值或最小值这些特殊值。</li>
</ul>
<p>树结构：</p>
<ul>
<li>优点：树结构综合了上述三种结构的优点，同时也弥补了它们存在的缺点（虽然效率不一定都比它们高），比如树结构中数据都是有序的，查找效率高；空间利用率高；并且可以快速获取最大值和最小值等。</li>
</ul>
<p>总的来说：每种数据结构都有自己特定的应用场景。</p>
<p>树结构：</p>
<ul>
<li>树（Tree）：由 n（n ≥ 0）个节点构成的有限集合。当 n = 0 时，称为空树。</li>
<li>对于任意一棵非空树（n &gt; 0），它具备以下性质：<ul>
<li>数中有一个称为根（Root）的特殊节点，用 <strong>r</strong> 表示；</li>
<li>其余节点可分为 m（m &gt; 0）个互不相交的有限集合 T1，T2，…，Tm，其中每个集合本身又是一棵树，称为原来树的子树（SubTree）。</li>
</ul>
</li>
</ul>
<h2 id="4-树的常用术语："><a href="#4-树的常用术语：" class="headerlink" title="4. 树的常用术语："></a>4. 树的常用术语：</h2><p><a href="https://camo.githubusercontent.com/67143470a7d05c729f049012c0e4589cd2921af1694232a2052f2f2a8d8657b4/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e3374307970666e356c656f302e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203042101435.png" alt="image"></a></p>
<ul>
<li>节点的度（Degree）：节点的子树个数，比如节点 B 的度为 2；</li>
<li>树的度：树的所有节点中最大的度数，如上图树的度为 2；</li>
<li>叶节点（Leaf）：度为 0 的节点（也称为叶子节点），如上图的 H，I 等；</li>
<li>父节点（Parent）：度不为 0 的节点称为父节点，如上图节点 B 是节点 D 和 E 的父节点；</li>
<li>子节点（Child）：若 B 是 D 的父节点，那么 D 就是 B 的子节点；</li>
<li>兄弟节点（Sibling）：具有同一父节点的各节点彼此是兄弟节点，比如上图的 B 和 C，D 和 E 互为兄弟节点；</li>
<li>路径和路径长度：路径指的是一个节点到另一节点的通道，路径所包含边的个数称为路径长度，比如 A-&gt;H 的路径长度为 3；</li>
<li>节点的层次（Level）：规定根节点在 1 层，其他任一节点的层数是其父节点的层数加 1。如 B 和 C 节点的层次为 2；</li>
<li>树的深度（Depth）：树种所有节点中的最大层次是这棵树的深度，如上图树的深度为 4；</li>
</ul>
<h2 id="5-树结构的表示方式"><a href="#5-树结构的表示方式" class="headerlink" title="5. 树结构的表示方式"></a>5. 树结构的表示方式</h2><h3 id="最普通的表示方法："><a href="#最普通的表示方法：" class="headerlink" title="最普通的表示方法："></a>最普通的表示方法：</h3><p><a href="https://camo.githubusercontent.com/2156ff870eeadecb4a8640d78980217bf623cda2f178b94587f909d4ec2e7c98/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e34763973617975397a7536302e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203042101394.png" alt="image"></a></p>
<p>如图，树结构的组成方式类似于链表，都是由一个个节点连接构成。不过，根据每个父节点子节点数量的不同，每一个父节点需要的引用数量也不同。比如节点 A 需要 3 个引用，分别指向子节点 B，C，D；B 节点需要 2 个引用，分别指向子节点 E 和 F；K 节点由于没有子节点，所以不需要引用。</p>
<p>这种方法缺点在于我们无法确定某一结点的引用数。</p>
<h3 id="儿子-兄弟表示法："><a href="#儿子-兄弟表示法：" class="headerlink" title="儿子-兄弟表示法："></a>儿子-兄弟表示法：</h3><p><a href="https://camo.githubusercontent.com/5197a957839092cea9cc7aeceed59ad835fac0517a6f0fa9dbc6b2de44a5b166/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e336f333479793668303432302e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203042101470.png" alt="image"></a></p>
<p>这种表示方法可以完整地记录每个节点的数据，比如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//节点A</span></span><br><span class="line">Node&#123;</span><br><span class="line">  <span class="comment">//存储数据</span></span><br><span class="line">  <span class="built_in">this</span>.data = data</span><br><span class="line">  <span class="comment">//统一只记录左边的子节点</span></span><br><span class="line">  <span class="built_in">this</span>.leftChild = B</span><br><span class="line">  <span class="comment">//统一只记录右边的第一个兄弟节点</span></span><br><span class="line">  <span class="built_in">this</span>.rightSibling = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//节点B</span></span><br><span class="line">Node&#123;</span><br><span class="line">  <span class="built_in">this</span>.data = data</span><br><span class="line">  <span class="built_in">this</span>.leftChild = E</span><br><span class="line">  <span class="built_in">this</span>.rightSibling = C</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//节点F</span></span><br><span class="line">Node&#123;</span><br><span class="line">  <span class="built_in">this</span>.data = data</span><br><span class="line">  <span class="built_in">this</span>.leftChild = <span class="literal">null</span></span><br><span class="line">  <span class="built_in">this</span>.rightSibling = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种表示法的优点在于每一个节点中引用的数量都是确定的。</p>
<h3 id="儿子-兄弟表示法旋转"><a href="#儿子-兄弟表示法旋转" class="headerlink" title="儿子-兄弟表示法旋转"></a>儿子-兄弟表示法旋转</h3><p>以下为儿子-兄弟表示法组成的树结构：</p>
<p><a href="https://camo.githubusercontent.com/b7e6545f63beebee31116a8cdcdaac1bba0b3d7114f281e380f0771ca1ca19b1/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e3674756372656837316f6b302e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203042101942.png" alt="image"></a></p>
<p>将其顺时针旋转 45° 之后：</p>
<p><a href="https://camo.githubusercontent.com/175ffa03d44b9ed374c3d6a10279544ce3000a0b54ceba3fbdb657dd24631e42/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e34626c6d73697968657667302e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203042101504.png" alt="image"></a></p>
<p>这样就成为了一棵二叉树，由此我们可以得出结论：任何树都可以通过二叉树进行模拟。但是这样父节点不是变了吗？其实，父节点的设置只是为了方便指向子节点，在代码实现中谁是父节点并没有关系，只要能正确找到对应节点即可。</p>
<h1 id="八-2-、二叉树"><a href="#八-2-、二叉树" class="headerlink" title="八(2)、二叉树"></a>八(2)、二叉树</h1><h2 id="1-二叉树的概念"><a href="#1-二叉树的概念" class="headerlink" title="1. 二叉树的概念"></a>1. 二叉树的概念</h2><p>如果树中的每一个节点最多只能由两个子节点，这样的树就称为二叉树；</p>
<h2 id="2-二叉树的组成"><a href="#2-二叉树的组成" class="headerlink" title="2. 二叉树的组成"></a>2. 二叉树的组成</h2><ul>
<li>二叉树可以为空，也就是没有节点；</li>
<li>若二叉树不为空，则它由根节点和称为其左子树 TL 和右子树 TR 的两个不相交的二叉树组成；</li>
</ul>
<h2 id="3-二叉树的五种形态"><a href="#3-二叉树的五种形态" class="headerlink" title="3. 二叉树的五种形态"></a>3. 二叉树的五种形态</h2><p><a href="https://camo.githubusercontent.com/c3c72de39538ffd95760be6f02eae64085dee28692649c8e662a521c05386f90/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e3135796373673466716f696f2e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203042104291.png" alt="image"></a></p>
<p>上图分别表示：空的二叉树、只有一个节点的二叉树、只有左子树 TL 的二叉树、只有右子树 TR 的二叉树和有左右两个子树的二叉树。</p>
<h2 id="4-二叉树的特性"><a href="#4-二叉树的特性" class="headerlink" title="4. 二叉树的特性"></a>4. 二叉树的特性</h2><ul>
<li>一个二叉树的第 i 层的最大节点树为：2^(i-1)^，i &gt;= 1；</li>
<li>深度为 k 的二叉树的最大节点总数为：2^k^ - 1 ，k &gt;= 1；</li>
<li>对任何非空二叉树，若 n<del>0</del> 表示叶子节点的个数，n<del>2</del>表示度为 2 的非叶子节点个数，那么两者满足关系：n<del>0</del> = n<del>2</del> + 1；如下图所示：H，E，I，J，G 为叶子节点，总数为 5；A，B，C，F 为度为 2 的非叶子节点，总数为 4；满足 n<del>0</del> = n<del>2</del> + 1 的规律。</li>
</ul>
<p><a href="https://camo.githubusercontent.com/a4dc3cd7d25b8fb6b261b650bb5c1565dacb58fed99ac4541f618227a014d4e9/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e73796a7766666a6c746d6f2e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203042104353.png" alt="image"></a></p>
<h2 id="5-特殊的二叉树"><a href="#5-特殊的二叉树" class="headerlink" title="5. 特殊的二叉树"></a>5. 特殊的二叉树</h2><h3 id="完美二叉树"><a href="#完美二叉树" class="headerlink" title="完美二叉树"></a>完美二叉树</h3><p>完美二叉树（Perfect Binary Tree）也成为满二叉树（Full Binary Tree），在二叉树中，除了最下一层的叶子节点外，每层节点都有 2 个子节点，这就构成了完美二叉树。</p>
<p><a href="https://camo.githubusercontent.com/f38452a1e805f3c4c6c329ae492a1eebef0f19323913cc31a9567b49a8ee1c7e/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e32323362326178726f6366342e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203042104241.png" alt="image"></a></p>
<h3 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h3><p>完全二叉树（Complete Binary Tree）:</p>
<ul>
<li>除了二叉树最后一层外，其他各层的节点数都达到了最大值；</li>
<li>并且，最后一层的叶子节点从左向右是连续存在，只缺失右侧若干叶子节点；</li>
<li>完美二叉树是特殊的完全二叉树；</li>
</ul>
<p><a href="https://camo.githubusercontent.com/5853aa934a3b13c24c3d9129d664589d119c24f1b18ac90f469a01da2e7d0f95/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e35793472676c727038716b302e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203042104205.png" alt="image"></a></p>
<p>在上图中，由于 H 缺失了右子节点，所以它不是完全二叉树。</p>
<h2 id="6-二叉树的数据存储"><a href="#6-二叉树的数据存储" class="headerlink" title="6. 二叉树的数据存储"></a>6. 二叉树的数据存储</h2><p>常见的二叉树存储方式为数组和链表：</p>
<h3 id="使用数组"><a href="#使用数组" class="headerlink" title="使用数组"></a>使用数组</h3><ul>
<li>完全二叉树：按从上到下，从左到右的方式存储数据。</li>
</ul>
<p><a href="https://camo.githubusercontent.com/35267d68c9fd416360d343284598556d80114dd5af544a58256c3a49f1f07560/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e323977346b36326235316f672e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203042104480.png" alt="image"></a></p>
<table>
<thead>
<tr>
<th>节点</th>
<th>A</th>
<th>B</th>
<th>C</th>
<th>D</th>
<th>E</th>
<th>F</th>
<th>G</th>
<th>H</th>
<th>I</th>
</tr>
</thead>
<tbody><tr>
<td>序号</td>
<td>1</td>
<td>2</td>
<td>3</td>
<td>4</td>
<td>5</td>
<td>6</td>
<td>7</td>
<td>8</td>
<td>9</td>
</tr>
</tbody></table>
<p>使用数组存储时，取数据的时候也十分方便：左子节点的序号等于父节点序号 _ 2，右子节点的序号等于父节点序号 _ 2 + 1 。</p>
<ul>
<li>非完全二叉树：非完全二叉树需要转换成完全二叉树才能按照上面的方案存储，这样会浪费很大的存储空间。</li>
</ul>
<p><a href="https://camo.githubusercontent.com/4582bffcd884ae2358efcabb8007e83b06f57547040f020ca2915097090e3178/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e346a676971367232786565302e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203042104418.png" alt="image"></a></p>
<table>
<thead>
<tr>
<th>节点</th>
<th>A</th>
<th>B</th>
<th>C</th>
<th>^</th>
<th>^</th>
<th>F</th>
<th>^</th>
<th>^</th>
<th>^</th>
<th>^</th>
<th>^</th>
<th>^</th>
<th>M</th>
</tr>
</thead>
<tbody><tr>
<td>序号</td>
<td>1</td>
<td>2</td>
<td>3</td>
<td>4</td>
<td>5</td>
<td>6</td>
<td>7</td>
<td>8</td>
<td>9</td>
<td>10</td>
<td>11</td>
<td>12</td>
<td>13</td>
</tr>
</tbody></table>
<h3 id="使用链表"><a href="#使用链表" class="headerlink" title="使用链表"></a>使用链表</h3><p>二叉树最常见的存储方式为链表：每一个节点封装成一个 Node，Node 中包含存储的数据、左节点的引用和右节点的引用。</p>
<p><a href="https://camo.githubusercontent.com/d3aaf8efa90670e57a6125cc997c05a3553d093c59ea354a9a6169ad4642d15d/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e326d6c7363666164353432302e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203042104373.png" alt="image"></a></p>
<h1 id="八-3-、二叉搜索树"><a href="#八-3-、二叉搜索树" class="headerlink" title="八(3)、二叉搜索树"></a>八(3)、二叉搜索树</h1><h2 id="1-二叉搜索树"><a href="#1-二叉搜索树" class="headerlink" title="1. 二叉搜索树"></a>1. 二叉搜索树</h2><p>二叉搜索树（BST，Binary Search Tree），也称为二叉排序树和二叉查找树。</p>
<p>二叉搜索树是一棵二叉树，可以为空。</p>
<p>如果不为空，则满足以下性质：</p>
<ul>
<li>条件 1：非空左子树的所有键值小于其根节点的键值。比如三中节点 6 的所有非空左子树的键值都小于 6；</li>
<li>条件 2：非空右子树的所有键值大于其根节点的键值；比如三中节点 6 的所有非空右子树的键值都大于 6；</li>
<li>条件 3：左、右子树本身也都是二叉搜索树；</li>
</ul>
<p><a href="https://camo.githubusercontent.com/b53b3f70c9c992ed9fa6bce3144ed075c924852c1fa3cd50846725084bbbd61f/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e316c687863647068347670632e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203042107448.png" alt="image"></a></p>
<p>如上图所示，树二和树三符合 3 个条件属于二叉树，树一不满足条件 3 所以不是二叉树。</p>
<p>总结：二叉搜索树的特点主要是较小的值总是保存在左节点上，相对较大的值总是保存在右节点上。这种特点使得二叉搜索树的查询效率非常高，这也就是二叉搜索树中“搜索”的来源。</p>
<h2 id="2-二叉搜索树应用举例"><a href="#2-二叉搜索树应用举例" class="headerlink" title="2. 二叉搜索树应用举例"></a>2. 二叉搜索树应用举例</h2><p>下面是一个二叉搜索树：</p>
<p><a href="https://camo.githubusercontent.com/ae1385ce6b0a965dba25e098a94bca8f6d700001ac1d4b7945f93f826b6d159e/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e336c323166736736716263302e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203042107550.png" alt="image"></a></p>
<p>若想在其中查找数据 10，只需要查找 4 次，查找效率非常高。</p>
<ul>
<li>第 1 次：将 10 与根节点 9 进行比较，由于 10 &gt; 9，所以 10 下一步与根节点 9 的右子节点 13 比较；</li>
<li>第 2 次：由于 10 &lt; 13，所以 10 下一步与父节点 13 的左子节点 11 比较；</li>
<li>第 3 次：由于 10 &lt; 11，所以 10 下一步与父节点 11 的左子节点 10 比较；</li>
<li>第 4 次：由于 10 = 10，最终查找到数据 10 。</li>
</ul>
<p><a href="https://camo.githubusercontent.com/300e544fbb57d2f31c0237cb110fc07e6395ea028c12de7ea992dab2e0a5216f/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e3578397879766d62787938302e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203042107608.png" alt="image"></a></p>
<p>同样是 15 个数据，在排序好的数组中查询数据 10，需要查询 10 次：</p>
<p><a href="https://camo.githubusercontent.com/f3cac38fa73ff0a1b50b5f906d4b8ea5fe3359bb96ef3afe4123f1b64378510e/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e3267717a3474326a656b77302e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203042107518.png" alt="image"></a></p>
<p>其实：如果是排序好的数组，可以通过二分查找：第一次找 9，第二次找 13，第三次找 15…。我们发现如果把每次二分的数据拿出来以树的形式表示的话就是二叉搜索树。这就是数组二分法查找效率之所以高的原因。</p>
<h2 id="3-二叉搜索树的封装"><a href="#3-二叉搜索树的封装" class="headerlink" title="3. 二叉搜索树的封装"></a>3. 二叉搜索树的封装</h2><p>二叉搜索树有四个最基本的属性：指向节点的根（root），节点中的键（key）、左指针（right）、右指针（right）。</p>
<p><a href="https://camo.githubusercontent.com/c2fe5bce0191282ac0fa46ff556dcf4d14d7475bdd20223350f172d9ab2a9a76/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e357664626235746f316e34302e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203042107407.png" alt="image"></a></p>
<p>所以，二叉搜索树中除了定义 root 属性外，还应定义一个节点内部类，里面包含每个节点中的 left、right 和 key 三个属性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 节点类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.key = key;</span><br><span class="line">    <span class="built_in">this</span>.left = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">this</span>.right = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="二叉搜索树的常见操作："><a href="#二叉搜索树的常见操作：" class="headerlink" title="二叉搜索树的常见操作："></a>二叉搜索树的常见操作：</h3><ul>
<li><code>insert(key)</code> 向树中插入一个新的键。</li>
<li><code>search(key)</code> 在树中查找一个键，如果节点存在，则返回 true；如果不存在，则返回 <code>false</code>。</li>
<li><code>preOrderTraverse</code> 通过先序遍历方式遍历所有节点。</li>
<li><code>inOrderTraverse</code> 通过中序遍历方式遍历所有节点。</li>
<li><code>postOrderTraverse</code> 通过后序遍历方式遍历所有节点。</li>
<li><code>min</code> 返回树中最小的值/键。</li>
<li><code>max</code> 返回树中最大的值/键。</li>
<li><code>remove(key)</code> 从树中移除某个键。</li>
</ul>
<h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><p>实现思路：</p>
<ul>
<li>首先根据传入的 key 创建节点对象。</li>
<li>然后判断根节点是否存在，不存在时通过：this.root = newNode，直接把新节点作为二叉搜索树的根节点。</li>
<li>若存在根节点则重新定义一个内部方法 <code>insertNode()</code> 用于查找插入点。</li>
</ul>
<p>insert(key) 代码实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// insert(key) 插入数据</span></span><br><span class="line"><span class="function"><span class="title">insert</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> newNode = <span class="keyword">new</span> Node(key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.root === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.root = newNode;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.insertNode(<span class="built_in">this</span>.root, newNode);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>insertNode() 的实现思路:</p>
<p>根据比较传入的两个节点，一直查找新节点适合插入的位置，直到成功插入新节点为止。</p>
<ul>
<li>当 newNode.key &lt; node.key 向左查找:<ul>
<li>情况 1：当 node 无左子节点时，直接插入：</li>
<li>情况 2：当 node 有左子节点时，递归调用 insertNode()，直到遇到无左子节点成功插入 newNode 后，不再符合该情况，也就不再调用 insertNode()，递归停止。</li>
</ul>
</li>
<li>当 newNode.key &gt;= node.key 向右查找，与向左查找类似：<ul>
<li>情况 1：当 node 无右子节点时，直接插入：</li>
<li>情况 2：当 node 有右子节点时，依然递归调用 insertNode()，直到遇到传入 insertNode 方法 的 node 无右子节点成功插入 newNode 为止。</li>
</ul>
</li>
</ul>
<p>insertNode(root, node) 代码实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">insertNode</span>(<span class="params">root, node</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (node.key &lt; root.key) &#123; <span class="comment">// 往左边查找插入</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root.left === <span class="literal">null</span>) &#123;</span><br><span class="line">      root.left = node;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.insertNode(root.left, node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// 往右边查找插入</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root.right === <span class="literal">null</span>) &#123;</span><br><span class="line">      root.right = node;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.insertNode(root.right, node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="遍历数据"><a href="#遍历数据" class="headerlink" title="遍历数据"></a>遍历数据</h4><p>这里所说的树的遍历不仅仅针对二叉搜索树，而是适用于所有的二叉树。由于树结构不是线性结构，所以遍历方式有多种选择，常见的三种二叉树遍历方式为：</p>
<ul>
<li>先序遍历；</li>
<li>中序遍历；</li>
<li>后序遍历；</li>
</ul>
<p>还有层序遍历，使用较少。</p>
<h5 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h5><p>先序遍历的过程为：</p>
<p>首先，遍历根节点； 然后，遍历其左子树； 最后，遍历其右子树；</p>
<p><a href="https://camo.githubusercontent.com/9498629c6b854fd68f82fb40a123016a8e3daa76863f523267f97783567293cc/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e36396f6f6168767462626f302e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203042107485.png" alt="image"></a></p>
<p>如上图所示，二叉树的节点遍历顺序为：A -&gt; B -&gt; D -&gt; H -&gt; I -&gt; E -&gt; C -&gt; F -&gt; G。</p>
<p>代码实现：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先序遍历（根左右 DLR）</span></span><br><span class="line"><span class="function"><span class="title">preorderTraversal</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  <span class="built_in">this</span>.preorderTraversalNode(<span class="built_in">this</span>.root, result);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">preorderTraversalNode</span>(<span class="params">node, result</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span> result;</span><br><span class="line">  result.push(node.key);</span><br><span class="line">  <span class="built_in">this</span>.preorderTraversalNode(node.left, result);</span><br><span class="line">  <span class="built_in">this</span>.preorderTraversalNode(node.right, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h5><p>实现思路：与先序遍历原理相同，只不过是遍历的顺序不一样了。</p>
<p>首先，遍历其左子树； 然后，遍历根（父）节点； 最后，遍历其右子树；</p>
<p>过程图解：</p>
<p><a href="https://camo.githubusercontent.com/178229e7cdcbcb8812b96a9f2911d0ce1e5cb89a69b21e68756fe1b6df9bd815/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e3736326c3473786472376f302e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203042107796.png" alt="image"></a></p>
<p>输出节点的顺序应为：3 -&gt; 5 -&gt; 6 -&gt; 7 -&gt; 8 -&gt; 9 -&gt; 10 -&gt; 11 -&gt; 12 -&gt; 13 -&gt; 14 -&gt; 15 -&gt; 18 -&gt; 20 -&gt; 25 。</p>
<p>代码实现：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 中序遍历（左根右 LDR）</span></span><br><span class="line"><span class="function"><span class="title">inorderTraversal</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  <span class="built_in">this</span>.inorderTraversalNode(<span class="built_in">this</span>.root, result);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">inorderTraversalNode</span>(<span class="params">node, result</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span> result;</span><br><span class="line">  <span class="built_in">this</span>.inorderTraversalNode(node.left, result);</span><br><span class="line">  result.push(node.key);</span><br><span class="line">  <span class="built_in">this</span>.inorderTraversalNode(node.right, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h5><p>实现思路：与先序遍历原理相同，只不过是遍历的顺序不一样了。</p>
<p>首先，遍历其左子树； 然后，遍历其右子树； 最后，遍历根（父）节点；</p>
<p>过程图解：</p>
<p><a href="https://camo.githubusercontent.com/fbd11a45d1094e00c1848133e36fcc99c69ed4563200003249f16bdb62fce4cb/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e356c716d656e346a647338302e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203042107215.png" alt="image"></a></p>
<p>输出节点的顺序应为：3 -&gt; 6 -&gt; 5 -&gt; 8 -&gt; 10 -&gt; 9 -&gt; 7 -&gt; 12 -&gt; 14 -&gt; 13 -&gt; 18 -&gt; 25 -&gt; 20 -&gt; 15 -&gt; 11 。</p>
<p>代码实现：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 后序遍历（左右根 LRD）</span></span><br><span class="line"><span class="function"><span class="title">postorderTraversal</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  <span class="built_in">this</span>.postorderTraversalNode(<span class="built_in">this</span>.root, result);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">postorderTraversalNode</span>(<span class="params">node, result</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span> result;</span><br><span class="line">  <span class="built_in">this</span>.postorderTraversalNode(node.left, result);</span><br><span class="line">  <span class="built_in">this</span>.postorderTraversalNode(node.right, result);</span><br><span class="line">  result.push(node.key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>以遍历根（父）节点的顺序来区分三种遍历方式。比如：先序遍历先遍历根节点、中序遍历第二遍历根节点、后续遍历最后遍历根节点。</p>
<h4 id="查找数据"><a href="#查找数据" class="headerlink" title="查找数据"></a>查找数据</h4><h5 id="查找最大值或最小值"><a href="#查找最大值或最小值" class="headerlink" title="查找最大值或最小值"></a>查找最大值或最小值</h5><p>在二叉搜索树中查找最值非常简单，最小值在二叉搜索树的最左边，最大值在二叉搜索树的最右边。只需要一直向左/右查找就能得到最值，如下图所示：</p>
<p><a href="https://camo.githubusercontent.com/defee3ab1debb37f46071a1803db6dbcabbb74cd9378bb54f2abe4304c57df55/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e3368337966687971676930302e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203042107616.png" alt="image"></a></p>
<p>代码实现：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// min() 获取二叉搜索树最小值</span></span><br><span class="line"><span class="function"><span class="title">min</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">this</span>.root) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">let</span> node = <span class="built_in">this</span>.root;</span><br><span class="line">  <span class="keyword">while</span> (node.left !== <span class="literal">null</span>) &#123;</span><br><span class="line">    node = node.left;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> node.key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// max() 获取二叉搜索树最大值</span></span><br><span class="line"><span class="function"><span class="title">max</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">this</span>.root) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">let</span> node = <span class="built_in">this</span>.root;</span><br><span class="line">  <span class="keyword">while</span> (node.right !== <span class="literal">null</span>) &#123;</span><br><span class="line">    node = node.right;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> node.key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="查找特定值"><a href="#查找特定值" class="headerlink" title="查找特定值"></a>查找特定值</h5><p>查找二叉搜索树当中的特定值效率也非常高。只需要从根节点开始将需要查找节点的 key 值与之比较，若 node.key &lt; root 则向左查找，若 node.key &gt; root 就向右查找，直到找到或查找到 null 为止。这里可以使用递归实现，也可以采用循环来实现。</p>
<p>代码实现：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// search(key) 查找二叉搜索树中是否有相同的key，存在返回 true，否则返回 false</span></span><br><span class="line"><span class="function"><span class="title">search</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.searchNode(<span class="built_in">this</span>.root, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过递归实现</span></span><br><span class="line"><span class="function"><span class="title">searchNode</span>(<span class="params">node, key</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (key &lt; node.key) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.searchNode(node.left, key);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; node.key) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.searchNode(node.right, key);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 while 循环实现</span></span><br><span class="line"><span class="function"><span class="title">search2</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> node = <span class="built_in">this</span>.root;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key &lt; node.key) &#123;</span><br><span class="line">      node = node.left;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; node.key) &#123;</span><br><span class="line">      node = node.right;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><p>实现思路：</p>
<p>第一步：先找到需要删除的节点，若没找到，则不需要删除；</p>
<p>首先定义变量 current 用于保存需要删除的节点、变量 parent 用于保存它的父节点、变量 isLeftChild 保存 current 是否为 parent 的左节点，这样方便之后删除节点时改变相关节点的指向。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> currentNode = <span class="built_in">this</span>.root;</span><br><span class="line"><span class="keyword">let</span> parentNode = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> isLeftChild = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环查找到要删除的节点 currentNode，以及它的 parentNode、isLeftChild</span></span><br><span class="line"><span class="keyword">while</span> (currentNode.key !== key) &#123;</span><br><span class="line">  parentNode = currentNode;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 小于，往左查找</span></span><br><span class="line">  <span class="keyword">if</span> (key &lt; currentNode.key) &#123;</span><br><span class="line">    isLeftChild = <span class="literal">true</span>;</span><br><span class="line">    currentNode = currentNode.left;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 否则往右查找</span></span><br><span class="line">    isLeftChild = <span class="literal">false</span>;</span><br><span class="line">    currentNode = currentNode.right;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 找到最后都没找到相等的节点，返回 false</span></span><br><span class="line">  <span class="keyword">if</span> (currentNode === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二步：删除找到的指定节点，后分 3 种情况：</p>
<ul>
<li>删除的是叶子节点；</li>
<li>删除的是只有一个子节点的节点；</li>
<li>删除的是有两个子节点的节点；</li>
</ul>
<h5 id="删除的是叶子节点"><a href="#删除的是叶子节点" class="headerlink" title="删除的是叶子节点"></a>删除的是叶子节点</h5><p>删除的是叶子节点分两种情况：</p>
<ul>
<li><p>叶子节点也是根节点</p>
<p>当该叶子节点为根节点时，如下图所示，此时 current == this.root，直接通过：this.root = null，删除根节点。</p>
<p><a href="https://camo.githubusercontent.com/472be0fb55d02b61e54d7c8f251b4bfdbafca94aeef40e0eb0db00e8b6e075cc/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e316a3933353372783962376b2e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203042107863.png" alt="image"></a></p>
</li>
<li><p>叶子节点不为根节点</p>
<p>当该叶子节点不为根节点时也有两种情况，如下图所示</p>
<p><a href="https://camo.githubusercontent.com/9f36a454eb7e8851aece77bf5db76f33d3cf2a4e266df7d52cf1fe316d5038d3/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e3372393961366f63767567302e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203042107169.png" alt="image"></a></p>
<p>若 current = 8，可以通过：parent.left = null，删除节点 8；</p>
<p>若 current = 10，可以通过：parent.right = null，删除节点 10；</p>
<p>代码实现：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、删除的是叶子节点的情况</span></span><br><span class="line"><span class="keyword">if</span> (currentNode.left === <span class="literal">null</span> &amp;&amp; currentNode.right === <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (currentNode === <span class="built_in">this</span>.root) &#123;</span><br><span class="line">    <span class="built_in">this</span>.root = <span class="literal">null</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isLeftChild) &#123;</span><br><span class="line">    parentNode.left = <span class="literal">null</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    parentNode.right = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2、删除的是只有一个子节点的节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="删除的是只有一个子节点的节点"><a href="#删除的是只有一个子节点的节点" class="headerlink" title="删除的是只有一个子节点的节点"></a>删除的是只有一个子节点的节点</h5><p>有六种情况：</p>
<p>当 current 存在左子节点时（current.right == null）：</p>
<ul>
<li>情况 1：current 为根节点（current == this.root），如节点 11，此时通过：this.root = current.left，删除根节点 11；</li>
<li>情况 2：current 为父节点 parent 的左子节点（isLeftChild == true），如节点 5，此时通过：parent.left = current.left，删除节点 5；</li>
<li>情况 3：current 为父节点 parent 的右子节点（isLeftChild == false），如节点 9，此时通过：parent.right = current.left，删除节点 9；</li>
</ul>
<p><a href="https://camo.githubusercontent.com/2d67511f8e4c4f83dbf58315c6a5788741591ad11c787098ae25eaa1384cdfa1/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e32376c7771643071666e70632e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203042107811.png" alt="image"></a></p>
<p>当 current 存在右子节点时（current.left = null）：</p>
<ul>
<li>情况 4：current 为根节点（current == this.root），如节点 11，此时通过：this.root = current.right，删除根节点 11。</li>
<li>情况 5：current 为父节点 parent 的左子节点（isLeftChild == true），如节点 5，此时通过：parent.left = current.right，删除节点 5；</li>
<li>情况 6：current 为父节点 parent 的右子节点（isLeftChild == false），如节点 9，此时通过：parent.right = current.right，删除节点 9；</li>
</ul>
<p><a href="https://camo.githubusercontent.com/6033c755e89fa562fe21e7d8466fa66cc5332fc5313e275d7b904adea438831a/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e3365647a67373266783779302e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203042107696.png" alt="image"></a></p>
<p>代码实现：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2、删除的是只有一个子节点的节点</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentNode.right === <span class="literal">null</span>) &#123; <span class="comment">// currentNode 只存在左节点</span></span><br><span class="line">  <span class="comment">//-- 2.1、currentNode 只存在&lt;左节点&gt;的情况</span></span><br><span class="line">  <span class="comment">//---- 2.1.1、currentNode 等于 root</span></span><br><span class="line">  <span class="comment">//---- 2.1.2、parentNode.left 等于 currentNode</span></span><br><span class="line">  <span class="comment">//---- 2.1.3、parentNode.right 等于 currentNode</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (currentNode === <span class="built_in">this</span>.root) &#123;</span><br><span class="line">    <span class="built_in">this</span>.root = currentNode.left;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isLeftChild) &#123;</span><br><span class="line">    parentNode.left = currentNode.left;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    parentNode.right = currentNode.left;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentNode.left === <span class="literal">null</span>) &#123; <span class="comment">// currentNode 只存在右节点</span></span><br><span class="line">  <span class="comment">//-- 2.2、currentNode 只存在&lt;右节点&gt;的情况</span></span><br><span class="line">  <span class="comment">//---- 2.1.1 currentNode 等于 root</span></span><br><span class="line">  <span class="comment">//---- 2.1.1 parentNode.left 等于 currentNode</span></span><br><span class="line">  <span class="comment">//---- 2.1.1 parentNode.right 等于 currentNode</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (currentNode === <span class="built_in">this</span>.root) &#123;</span><br><span class="line">    <span class="built_in">this</span>.root = currentNode.right;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isLeftChild) &#123;</span><br><span class="line">    parentNode.left = currentNode.right;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    parentNode.right = currentNode.right;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h5 id="删除的是有两个子节点的节点"><a href="#删除的是有两个子节点的节点" class="headerlink" title="删除的是有两个子节点的节点"></a>删除的是有两个子节点的节点</h5><p>这种情况十分复杂，首先依据以下二叉搜索树，讨论这样的问题：</p>
<p><a href="https://camo.githubusercontent.com/c871a986fa066e726a6bf4d9ea50dbc6fe4ded2660285e2bb80a79b27e8837c4/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e3467306765657976367961302e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203042107106.png" alt="image"></a></p>
<p><strong>删除节点 9</strong></p>
<p>在保证删除节点 9 后原二叉树仍为二叉搜索树的前提下，有两种方式：</p>
<ul>
<li>方式 1：从节点 9 的左子树中选择一合适的节点替代节点 9，可知节点 8 符合要求；</li>
<li>方式 2：从节点 9 的右子树中选择一合适的节点替代节点 9，可知节点 10 符合要求；</li>
</ul>
<p><a href="https://camo.githubusercontent.com/b1d9c2edc39350c0c50f94c09c008c747a41ead1f2f17ed707570899e009f5c0/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e373372647577696d66766f302e706e67"><img src="https://camo.githubusercontent.com/b1d9c2edc39350c0c50f94c09c008c747a41ead1f2f17ed707570899e009f5c0/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e373372647577696d66766f302e706e67" alt="image"></a></p>
<p><strong>删除节点 7</strong></p>
<p>在保证删除节点 7 后原二叉树仍为二叉搜索树的前提下，也有两种方式：</p>
<ul>
<li>方式 1：从节点 7 的左子树中选择一合适的节点替代节点 7，可知节点 5 符合要求；</li>
<li>方式 2：从节点 7 的右子树中选择一合适的节点替代节点 7，可知节点 8 符合要求；</li>
</ul>
<p><a href="https://camo.githubusercontent.com/38569ce1ea50023e554dac9bbdab607ee49a7c9a0c43c81c340511c37bbf4f0b/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e326839686a64356268776f302e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203042107400.png" alt="image"></a></p>
<p><strong>删除节点 15</strong></p>
<p>在保证删除节点 15 后原树二叉树仍为二叉搜索树的前提下，同样有两种方式：</p>
<ul>
<li>方式 1：从节点 15 的左子树中选择一合适的节点替代节点 15，可知节点 14 符合要求；</li>
<li>方式 2：从节点 15 的右子树中选择一合适的节点替代节点 15，可知节点 18 符合要求；</li>
</ul>
<p><a href="https://camo.githubusercontent.com/ba587c728de9ed79380d866be57059c6142c0f9c1d7c5ac603a23311421e55cc/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e346635747a776476756571302e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203042107029.png" alt="image"></a></p>
<p>相信你已经发现其中的规律了！</p>
<p>规律总结：如果要删除的节点有两个子节点，甚至子节点还有子节点，这种情况下需要从要删除节点下面的子节点中找到一个合适的节点，来替换当前的节点。</p>
<p>若用 current 表示需要删除的节点，则合适的节点指的是：</p>
<ul>
<li>current 左子树中比 current 小一点点的节点，即 current 左子树中的最大值；</li>
<li>current 右子树中比 current 大一点点的节点，即 current 右子树中的最小值；</li>
</ul>
<h6 id="前驱-amp-后继"><a href="#前驱-amp-后继" class="headerlink" title="前驱&amp;后继"></a>前驱&amp;后继</h6><p>在二叉搜索树中，这两个特殊的节点有特殊的名字：</p>
<ul>
<li>比 current 小一点点的节点，称为 current 节点的前驱。比如下图中的节点 5 就是节点 7 的前驱；</li>
<li>比 current 大一点点的节点，称为 current 节点的后继。比如下图中的节点 8 就是节点 7 的后继；</li>
</ul>
<p><a href="https://camo.githubusercontent.com/c5b5257649dbcfd6e89f3f8b7f560527d470ef79daca81be4c8af119fd4dc79b/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e373176673067397a37696f302e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203042107594.png" alt="image"></a></p>
<p>查找需要被删除的节点 current 的后继时，需要在 current 的右子树中查找最小值，即在 current 的右子树中一直向左遍历查找；</p>
<p>查找前驱时，则需要在 current 的左子树中查找最大值，即在 current 的左子树中一直向右遍历查找。</p>
<p>下面只讨论查找 current 后继的情况，查找前驱的原理相同，这里暂不讨论。</p>
<p>代码实现：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="comment">// 3、删除的是有两个子节点的节点</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、找到后续节点</span></span><br><span class="line">    <span class="keyword">let</span> successor = <span class="built_in">this</span>.getSuccessor(currentNode);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、判断是否为根节点</span></span><br><span class="line">    <span class="keyword">if</span> (currentNode === <span class="built_in">this</span>.root) &#123;</span><br><span class="line">      <span class="built_in">this</span>.root = successor;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isLeftChild) &#123;</span><br><span class="line">      parentNode.left = successor;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      parentNode.right = successor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、将后续的左节点改为被删除的左节点</span></span><br><span class="line">    successor.left = currentNode.left;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取后续节点，即从要删除的节点的右边开始查找最小的值</span></span><br><span class="line"><span class="function"><span class="title">getSuccessor</span>(<span class="params">delNode</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义变量，保存要找到的后续</span></span><br><span class="line">  <span class="keyword">let</span> successor = delNode;</span><br><span class="line">  <span class="keyword">let</span> current = delNode.right;</span><br><span class="line">  <span class="keyword">let</span> successorParent = delNode;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 循环查找 current 的右子树节点</span></span><br><span class="line">  <span class="keyword">while</span> (current !== <span class="literal">null</span>) &#123;</span><br><span class="line">    successorParent = successor;</span><br><span class="line">    successor = current;</span><br><span class="line">    current = current.left;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断寻找到的后续节点是否直接就是要删除节点的 right</span></span><br><span class="line">  <span class="keyword">if</span> (successor !== delNode.right) &#123;</span><br><span class="line">    successorParent.left = successor.right;</span><br><span class="line">    successor.right = delNode.right;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> successor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="完整实现-2"><a href="#完整实现-2" class="headerlink" title="完整实现"></a>完整实现</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除节点</span></span><br><span class="line"><span class="function"><span class="title">remove</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.root;</span><br><span class="line">  <span class="keyword">let</span> parentNode = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">let</span> isLeftChild = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 循环查找到要删除的节点 currentNode，以及它的 parentNode、isLeftChild</span></span><br><span class="line">  <span class="keyword">while</span> (currentNode.key !== key) &#123;</span><br><span class="line"></span><br><span class="line">    parentNode = currentNode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 小于，往左查找</span></span><br><span class="line">    <span class="keyword">if</span> (key &lt; currentNode.key) &#123;</span><br><span class="line">      isLeftChild = <span class="literal">true</span>;</span><br><span class="line">      currentNode = currentNode.left;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  <span class="comment">// 否则往右查找</span></span><br><span class="line">      isLeftChild = <span class="literal">false</span>;</span><br><span class="line">      currentNode = currentNode.right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找到最后都没找到相等的节点，返回 false</span></span><br><span class="line">    <span class="keyword">if</span> (currentNode === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1、删除的是叶子节点的情况</span></span><br><span class="line">  <span class="keyword">if</span> (currentNode.left === <span class="literal">null</span> &amp;&amp; currentNode.right === <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (currentNode === <span class="built_in">this</span>.root) &#123;</span><br><span class="line">      <span class="built_in">this</span>.root = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isLeftChild) &#123;</span><br><span class="line">      parentNode.left = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      parentNode.right = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、删除的是只有一个子节点的节点</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentNode.right === <span class="literal">null</span>) &#123; <span class="comment">// currentNode 只存在左节点</span></span><br><span class="line">    <span class="comment">//-- 2.1、currentNode 只存在&lt;左节点&gt;的情况</span></span><br><span class="line">    <span class="comment">//---- 2.1.1、currentNode 等于 root</span></span><br><span class="line">    <span class="comment">//---- 2.1.2、parentNode.left 等于 currentNode</span></span><br><span class="line">    <span class="comment">//---- 2.1.3、parentNode.right 等于 currentNode</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (currentNode === <span class="built_in">this</span>.root) &#123;</span><br><span class="line">      <span class="built_in">this</span>.root = currentNode.left;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isLeftChild) &#123;</span><br><span class="line">      parentNode.left = currentNode.left;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      parentNode.right = currentNode.left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentNode.left === <span class="literal">null</span>) &#123; <span class="comment">// currentNode 只存在右节点</span></span><br><span class="line">    <span class="comment">//-- 2.2、currentNode 只存在&lt;右节点&gt;的情况</span></span><br><span class="line">    <span class="comment">//---- 2.1.1 currentNode 等于 root</span></span><br><span class="line">    <span class="comment">//---- 2.1.1 parentNode.left 等于 currentNode</span></span><br><span class="line">    <span class="comment">//---- 2.1.1 parentNode.right 等于 currentNode</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (currentNode === <span class="built_in">this</span>.root) &#123;</span><br><span class="line">      <span class="built_in">this</span>.root = currentNode.right;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isLeftChild) &#123;</span><br><span class="line">      parentNode.left = currentNode.right;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      parentNode.right = currentNode.right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、删除的是有两个子节点的节点</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、找到后续节点</span></span><br><span class="line">    <span class="keyword">let</span> successor = <span class="built_in">this</span>.getSuccessor(currentNode);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、判断是否为根节点</span></span><br><span class="line">    <span class="keyword">if</span> (currentNode === <span class="built_in">this</span>.root) &#123;</span><br><span class="line">      <span class="built_in">this</span>.root = successor;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isLeftChild) &#123;</span><br><span class="line">      parentNode.left = successor;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      parentNode.right = successor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、将后续的左节点改为被删除的左节点</span></span><br><span class="line">    successor.left = currentNode.left;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取后续节点，即从要删除的节点的右边开始查找最小的值</span></span><br><span class="line"><span class="function"><span class="title">getSuccessor</span>(<span class="params">delNode</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义变量，保存要找到的后续</span></span><br><span class="line">  <span class="keyword">let</span> successor = delNode;</span><br><span class="line">  <span class="keyword">let</span> current = delNode.right;</span><br><span class="line">  <span class="keyword">let</span> successorParent = delNode;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 循环查找 current 的右子树节点</span></span><br><span class="line">  <span class="keyword">while</span> (current !== <span class="literal">null</span>) &#123;</span><br><span class="line">    successorParent = successor;</span><br><span class="line">    successor = current;</span><br><span class="line">    current = current.left;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断寻找到的后续节点是否直接就是要删除节点的 right</span></span><br><span class="line">  <span class="keyword">if</span> (successor !== delNode.right) &#123;</span><br><span class="line">    successorParent.left = successor.right;</span><br><span class="line">    successor.right = delNode.right;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> successor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="平衡树"><a href="#平衡树" class="headerlink" title="平衡树"></a>平衡树</h2><p>二叉搜索树的缺陷：当插入的数据是有序的数据，就会造成二叉搜索树的深度过大。比如原二叉搜索树由 11 7 15 组成，如下图所示：</p>
<p><a href="https://camo.githubusercontent.com/39dcc3ccf8ae0a61ad7128009502545939aef69c979ffeee1d56cc1e78118496/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e316e6b643531726735647a342e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203042107469.png" alt="image"></a></p>
<p>当插入一组有序数据：6 5 4 3 2 就会变成深度过大的搜索二叉树，会严重影响二叉搜索树的性能。</p>
<p><a href="https://camo.githubusercontent.com/28171fc5695a65bbd13595a982ef91568b4b3ce1b6cd9d49d0187ada37084b80/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e313534626e6c677464357a342e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203042107052.png" alt="image"></a></p>
<p>非平衡树</p>
<ul>
<li>比较好的二叉搜索树，它的数据应该是左右均匀分布的。</li>
<li>但是插入连续数据后，二叉搜索树中的数据分布就变得不均匀了，我们称这种树为非平衡树。</li>
<li>对于一棵平衡二叉树来说，插入/查找等操作的效率是 O(log n)。</li>
<li>而对于一棵非平衡二叉树来说，相当于编写了一个链表，查找效率变成了 O(n)。</li>
</ul>
<p>树的平衡性</p>
<p>为了能以较快的时间 O(log n)来操作一棵树，我们需要保证树总是平衡的：</p>
<ul>
<li>起码大部分是平衡的，此时的时间复杂度也是接近 O(log n) 的；</li>
<li>这就要求树中每个节点左边的子孙节点的个数，应该尽可能地等于右边的子孙节点的个数；</li>
</ul>
<p>常见的平衡树</p>
<ul>
<li>AVL 树：是最早的一种平衡树，它通过在每个节点多存储一个额外的数据来保持树的平衡。由于 AVL 树是平衡树，所以它的时间复杂度也是 O(log n)。但是它的整体效率不如红黑树，开发中比较少用。</li>
<li>红黑树：同样通过一些特性来保持树的平衡，时间复杂度也是 O(log n)。进行插入/删除等操作时，性能优于 AVL 树，所以平衡树的应用基本都是红黑树。</li>
</ul>
<h1 id="九、图"><a href="#九、图" class="headerlink" title="九、图"></a>九、图</h1><h2 id="1-图的概念"><a href="#1-图的概念" class="headerlink" title="1. 图的概念"></a>1. 图的概念</h2><p>在计算机程序设计中，图也是一种非常常见的数据结构，图论其实是一个非常大的话题，在数学上起源于哥尼斯堡七桥问题。</p>
<h2 id="2-什么是图？"><a href="#2-什么是图？" class="headerlink" title="2. 什么是图？"></a>2. 什么是图？</h2><ul>
<li>图是一种与树有些相似的数据结构。<ul>
<li>实际上，在数学的概念上，树是图的一种。</li>
<li>我们知道树可以用来模拟很多现实的数据结构，比如：家谱/公司组织架构等等。</li>
</ul>
</li>
<li>那么图长什么样子呢？或者什么样的数据使用图来模拟更合适呢？<ul>
<li>人与人之间的关系网 <a href="https://camo.githubusercontent.com/bd174c0396da066b7309c0b7ba7c7c4d5f228214967cc0c1de597804dde08912/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e34636468787a3065726575302e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203042110695.png" alt="image"></a></li>
<li>互联网中的网络关系 <a href="https://camo.githubusercontent.com/ffc21ef75fdefdda3e1be4d47d432aec362ead870406a5f4df029e632b026e9e/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e346c6a7879793639613173302e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203042110878.png" alt="image"></a></li>
<li>广州地铁图 <a href="https://camo.githubusercontent.com/cc895a9d97a9d50b7b4a40f746574e87be9dc1ebacee8a66246f000e87a186c6/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e34366b326376776d746877302e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203042110001.png" alt="image"></a></li>
</ul>
</li>
<li>那么，什么是图呢?<ul>
<li>我们会发现，上面的结点（其实图中叫顶点 Vertex）之间的关系，是不能使用树来表示（几叉树都不可以）。</li>
<li>这个时候，我们就可以使用<strong>图</strong>来模拟它们。</li>
</ul>
</li>
<li>图通常有什么特点呢？<ul>
<li>一组顶点：通常用 V (Vertex) 表示顶点的集合</li>
<li>一组边：通常用 E (Edge) 表示边的集合</li>
<li>边是顶点和顶点之间的连线</li>
<li>边可以是有向的，也可以是无向的。（比如 A — B，通常表示无向。 A –&gt; B，通常表示有向）</li>
</ul>
</li>
</ul>
<h3 id="图的术语"><a href="#图的术语" class="headerlink" title="图的术语"></a>图的术语</h3><h4 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h4><ul>
<li>我们在学习树的时候，树有很多的其他术语，了解这些术语有助于我们更深层次的理解图。</li>
<li>但是图的术语其实非常多，如果你找一本专门讲图的各个方面的书籍，会发现只是术语就可以占据一个章节。</li>
<li>这里，这里介绍几个比较常见的术语，某些术语后面用到的时候，再了解，没有用到的，不做赘述。</li>
<li>下面这是个抽象出来的图 <a href="https://camo.githubusercontent.com/0847f24cd86a89cb292ae6c3e257e1962120d2709bb76ed2f90a5161e7fb8363/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e72723135336772646263302e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203042110627.png" alt="image"></a></li>
<li>顶点<ul>
<li>顶点刚才我们已经介绍过了，表示图中的一个结点。</li>
<li>比如地铁站中某个站/多个村庄中的某个村庄/互联网中的某台主机/人际关系中的人。</li>
</ul>
</li>
<li>边<ul>
<li>边表示顶点和顶点之间的连线。</li>
<li>比如地铁站中两个站点之间的直接连线, 就是一个边。</li>
<li>注意：这里的边不要叫做路径，路径有其他的概念，后面会区分。</li>
</ul>
</li>
<li>相邻顶点<ul>
<li>由一条边连接在一起的顶点称为相邻顶点。</li>
<li>比如 <code>0 - 1</code> 是相邻的，<code>0 - 3</code> 是相邻的。<code>0 - 2</code> 是不相邻的。</li>
</ul>
</li>
<li>度<ul>
<li>一个顶点的度是相邻顶点的数量</li>
<li>比如 0 顶点和其他两个顶点相连，0 顶点的度是 2</li>
<li>比如 1 顶点和其他四个顶点相连，1 顶点的度是 4</li>
</ul>
</li>
<li>路径<ul>
<li>路径是顶点 <code>v1</code>，<code>v2</code>…，<code>vn</code> 的一个连续序列, 比如上图中 <code>0 1 5 9</code> 就是一条路径。</li>
<li>简单路径: 简单路径要求不包含重复的顶点. 比如 <code>0 1 5 9</code> 是一条简单路径。</li>
<li>回路：第一个顶点和最后一个顶点相同的路径称为回路。比如 <code>0 1 5 6 3 0</code>。</li>
</ul>
</li>
<li>无向图<ul>
<li>上面的图就是一张无向图，因为所有的边都没有方向。</li>
<li>比如 <code>0 - 1</code> 之间有边，那么说明这条边可以保证 <code>0 -&gt; 1</code>，也可以保证 <code>1 -&gt; 0</code>。</li>
</ul>
</li>
<li>有向图<ul>
<li>有向图表示的图中的边是有方向的。</li>
<li>比如 <code>0 -&gt; 1</code>，不能保证一定可以 <code>1 -&gt; 0</code>，要根据方向来定。</li>
</ul>
</li>
</ul>
<h4 id="无权图和带权图"><a href="#无权图和带权图" class="headerlink" title="无权图和带权图"></a>无权图和带权图</h4><ul>
<li>无权图<ul>
<li>我们上面的图就是一张无权图（边没有携带权重）</li>
<li>我们上面的图中的边是没有任何意义的，不能收 <code>0 - 1</code> 的边，比 <code>4 - 9</code> 的边更远或者用的时间更长。</li>
</ul>
</li>
<li>带权图<ul>
<li>带权图表示边有一定的权重</li>
<li>这里的权重可以是任意你希望表示的数据：比如距离或者花费的时间或者票价。</li>
<li>我们来看一张有向和带权的图 <a href="https://camo.githubusercontent.com/9a2c50eb1d7e18b43feb42a79dffaba9bdab97908928b763d7b77fc1add15e14/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e3371306e6a356571357038302e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203042110809.png" alt="image"></a></li>
</ul>
</li>
</ul>
<h3 id="现实建模"><a href="#现实建模" class="headerlink" title="现实建模"></a>现实建模</h3><ul>
<li>对交通流量建模<ul>
<li>顶点可以表示街道的十字路口，边可以表示街道.。</li>
<li>加权的边可以表示限速或者车道的数量或者街道的距离。</li>
<li>建模人员可以用这个系统来判定最佳路线以及最可能堵车的街道。</li>
</ul>
</li>
<li>对飞机航线建模<ul>
<li>航空公司可以用图来为其飞行系统建模。</li>
<li>将每个机场看成顶点，将经过两个顶点的每条航线看作一条边。</li>
<li>加权的边可以表示从一个机场到另一个机场的航班成本，或两个机场间的距离。</li>
<li>建模人员可以利用这个系统有效的判断从一个城市到另一个城市的最小航行成本。</li>
</ul>
</li>
</ul>
<h2 id="3-图的表示"><a href="#3-图的表示" class="headerlink" title="3. 图的表示"></a>3. 图的表示</h2><p>我们知道一个图包含很多顶点，另外包含顶点和顶点之间的连线（边），这两个都是非常重要的图信息，因此都需要在程序中体现出来。</p>
<h3 id="顶点表示"><a href="#顶点表示" class="headerlink" title="顶点表示"></a>顶点表示</h3><ul>
<li>顶点的表示相对简单<ul>
<li>上面的顶点，我们抽象成了 1 2 3 4，也可以抽象成 A B C D。在后面的案例中，我们使用 A B C D。</li>
<li>那么这些 A B C D 我们可以使用一个数组来存储起来(存储所有的顶点)。</li>
<li>当然，A B C D 有可能还表示其他含义的数据(比如村庄的名字)，这个时候，可以另外创建一个数组，用于存储对应的其他数据。</li>
</ul>
</li>
<li>边的表示略微复杂<ul>
<li>因为边是两个顶点之间的关系，所以表示起来会稍微麻烦一些。</li>
<li>下面是变常见的表示方式。</li>
</ul>
</li>
</ul>
<h3 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h3><ul>
<li>概述<ul>
<li>邻接矩阵让每个节点和一个整数向关联, 该整数作为数组的下标值.</li>
<li>我们用一个二维数组来表示顶点之间的连接.</li>
<li>演示 <a href="https://camo.githubusercontent.com/0a4fbb6ff68cd6f0ee76a0dfb4771ca8c3b8bb916191665dba7a4c6a85220e58/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e363679376c356232316e77302e706e67"><img src="https://camo.githubusercontent.com/0a4fbb6ff68cd6f0ee76a0dfb4771ca8c3b8bb916191665dba7a4c6a85220e58/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e363679376c356232316e77302e706e67" alt="image"></a></li>
</ul>
</li>
<li>图片解析<ul>
<li>在二维数组中，0 表示没有连线，1 表示有连线。</li>
<li>通过二维数组，我们可以很快的找到一个顶点和哪些顶点有连线。（比如 A 顶点, 只需要 遍历第一行即可）</li>
<li>另外，A - A，B - B（也就是顶点到自己的连线），通常使用 0 表示。</li>
</ul>
</li>
<li>邻接矩阵的问题<ul>
<li>如果是一个无向图，邻接矩阵展示出来的二维数组，其实是一个对称图。<ul>
<li>也就是 A -&gt; D 是 1 的时候，对称的位置 D -&gt; 1 一定也是 1。</li>
<li>那么这种情况下会造成空间的浪费，解决办法需自己去研究下。</li>
</ul>
</li>
<li>邻接矩阵还有一个比较严重的问题就是如果图是一个稀疏图<ul>
<li>那么矩阵中将存在大量的 0，这意味着我们浪费了计算机存储空间来表示根本不存在的边。</li>
<li>而且即使只有一个边，我们也必须遍历一行来找出这个边，也浪费很多时间。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h3><ul>
<li>概述<ul>
<li>邻接表由图中每个顶点以及和顶点相邻的顶点列表组成。</li>
<li>这个列表有很多中方式来存储：数组/链表/字典(哈希表)都可以。</li>
<li>演示 <a href="https://camo.githubusercontent.com/6f9b6aaf53a80f6f06bad2c3a4a34153304eccfdd526e8b75aa185046054dd64/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e336d753168763861383475302e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203042110023.png" alt="image"></a></li>
</ul>
</li>
<li>图片解析<ul>
<li>其实图片比较容易理解</li>
<li>比如我们要表示和 A 顶点有关联的顶点（边），A 和 B/C/D 有边，那么我们可以通过 A 找到 对应的数组/链表/字典，再取出其中的内容就可以啦。</li>
</ul>
</li>
<li>邻接表的问题<ul>
<li>邻接表计算“出度”是比较简单的（出度：指向别人的数量, 入度: 指向自己的数量）</li>
<li>邻接表如果需要计算有向图的“入度”，那么是一件非常麻烦的事情。</li>
<li>它必须构造一个“逆邻接表”，才能有效的计算“入度”。而邻接矩阵会非常简单。</li>
</ul>
</li>
</ul>
<h2 id="4-图的封装"><a href="#4-图的封装" class="headerlink" title="4. 图的封装"></a>4. 图的封装</h2><h3 id="创建图类"><a href="#创建图类" class="headerlink" title="创建图类"></a>创建图类</h3><ul>
<li>先来创建 Graph 类，定义了两个属性：<ul>
<li><code>vertexes</code> 用于存储所有的顶点，使用一个数组来保存。</li>
<li><code>adjList</code> adj 是 adjoin 的缩写，邻接的意思。adjList 用于存储所有的边，这里采用邻接表的形式。</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graph</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.vertexes = []; <span class="comment">// 存储顶点</span></span><br><span class="line">    <span class="built_in">this</span>.adjList = <span class="keyword">new</span> Dictionay(); <span class="comment">//存储边信息</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="添加方法"><a href="#添加方法" class="headerlink" title="添加方法"></a>添加方法</h3><ul>
<li>添加顶点：可以向图中添加一些顶点。<ul>
<li>将添加的顶点放入到数组中。</li>
<li>另外，给该顶点创建一个数组<code>[]</code>，该数组用于存储顶点连接的所有的边.（回顾邻接表的实现方式）</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加顶点</span></span><br><span class="line"><span class="function"><span class="title">addVertex</span>(<span class="params">val</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 添加点</span></span><br><span class="line">    <span class="built_in">this</span>.vertexes.push(val)</span><br><span class="line">    <span class="comment">// 添加点的关系  采用邻接矩阵法 结构用Map</span></span><br><span class="line">    <span class="built_in">this</span>.adjList.set(val, [])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>添加边：可以指定顶点和顶点之间的边。<ul>
<li>添加边需要传入两个顶点，因为边是两个顶点之间的边，边不可能单独存在。</li>
<li>根据顶点 v 取出对应的数组，将 w 加入到它的数组中。</li>
<li>根据顶点 w 取出对应的数组，将 v 加入到它的数组中。</li>
<li>因为这里实现的是无向图，所以边是可以双向的。</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加边</span></span><br><span class="line"><span class="function"><span class="title">addEdge</span>(<span class="params">val1, val2</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 添加边需要传入两个顶点, 因为边是两个顶点之间的边, 边不可能单独存在.</span></span><br><span class="line">    <span class="comment">// 这里实现的是无向图, 所以这里不考虑方向问题</span></span><br><span class="line">    <span class="built_in">this</span>.adjList.get(val1).push(val2)</span><br><span class="line">    <span class="built_in">this</span>.adjList.get(val2).push(val1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>toString 方法：为了能够正确的显示图的结果，就是拿出二维数组的每一项。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 输出图结构</span></span><br><span class="line"><span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.vertexes.length; i++) &#123;</span><br><span class="line">        res += <span class="built_in">this</span>.vertexes[i] + <span class="string">&quot;-&gt;&quot;</span></span><br><span class="line">        <span class="keyword">let</span> adj = <span class="built_in">this</span>.adjList.get(<span class="built_in">this</span>.vertexes[i])</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; adj.length; j++) &#123;</span><br><span class="line">            res += adj[j] + <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        res += <span class="string">&quot;\n&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试代码-3"><a href="#测试代码-3" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试代码</span></span><br><span class="line"><span class="keyword">let</span> graph = <span class="keyword">new</span> Graph();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加顶点</span></span><br><span class="line"><span class="keyword">let</span> myVertexes = [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;E&quot;</span>, <span class="string">&quot;F&quot;</span>, <span class="string">&quot;G&quot;</span>, <span class="string">&quot;H&quot;</span>, <span class="string">&quot;I&quot;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; myVertexes.length; i++) &#123;</span><br><span class="line">  graph.addVertex(myVertexes[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加边</span></span><br><span class="line">graph.addEdge(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>);</span><br><span class="line">graph.addEdge(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;C&quot;</span>);</span><br><span class="line">graph.addEdge(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;D&quot;</span>);</span><br><span class="line">graph.addEdge(<span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>);</span><br><span class="line">graph.addEdge(<span class="string">&quot;C&quot;</span>, <span class="string">&quot;G&quot;</span>);</span><br><span class="line">graph.addEdge(<span class="string">&quot;D&quot;</span>, <span class="string">&quot;G&quot;</span>);</span><br><span class="line">graph.addEdge(<span class="string">&quot;D&quot;</span>, <span class="string">&quot;H&quot;</span>);</span><br><span class="line">graph.addEdge(<span class="string">&quot;B&quot;</span>, <span class="string">&quot;E&quot;</span>);</span><br><span class="line">graph.addEdge(<span class="string">&quot;B&quot;</span>, <span class="string">&quot;F&quot;</span>);</span><br><span class="line">graph.addEdge(<span class="string">&quot;E&quot;</span>, <span class="string">&quot;I&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="5-图的遍历"><a href="#5-图的遍历" class="headerlink" title="5. 图的遍历"></a>5. 图的遍历</h2><p>和其他数据结构一样，需要通过某种算法来遍历图结构中每一个数据。这样可以保证，在我们需要时，通过这种算法来访问某个顶点的数据以及它对应的边。</p>
<h3 id="遍历的方式"><a href="#遍历的方式" class="headerlink" title="遍历的方式"></a>遍历的方式</h3><ul>
<li>图的遍历思想 图的遍历算法的思想在于必须访问每个第一次访问的节点，并且追踪有哪些顶点还没有被访问到。</li>
<li>有两种算法可以对图进行遍历<ul>
<li>广度优先搜索(Breadth-First Search, 简称 BFS)</li>
<li>深度优先搜索(Depth-First Search, 简称 DFS)</li>
<li>两种遍历算法，都需要明确指定第一个被访问的顶点。</li>
</ul>
</li>
<li>遍历的注意点<ul>
<li>完全探索一个顶点要求我们便查看该顶点的每一条边。</li>
<li>对于每一条所连接的没有被访问过的顶点，将其标注为被发现的，并将其加进待访问顶点列表中。</li>
<li>为了保证算法的效率：每个顶点至多访问两次。</li>
</ul>
</li>
<li>两种算法的思想<ul>
<li>BFS 基于队列，入队列的顶点先被探索。</li>
<li>DFS 基于栈，通过将顶点存入栈中，顶点是沿着路径被探索的，存在新的相邻顶点就去访问。</li>
</ul>
</li>
<li>为了记录顶点是否被访问过，我们使用三种颜色来反应它们的状态。(或者两种颜色也可以)<ul>
<li><strong>白色</strong>表示该顶点还没有被访问.</li>
<li><strong>灰色</strong>表示该顶点被访问过, 但并未被探索过.</li>
<li><strong>黑色</strong>表示该顶点被访问过且被完全探索过.</li>
<li>初始化颜色代码</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化顶点的颜色</span></span><br><span class="line"><span class="function"><span class="title">_initializeColor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 白色: 表示该顶点还没有被访问.</span></span><br><span class="line">    <span class="comment">// 灰色: 表示该顶点被访问过, 但并未被探索过.</span></span><br><span class="line">    <span class="comment">// 黑色: 表示该顶点被访问过且被完全探索过.</span></span><br><span class="line">    <span class="keyword">let</span> colors = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.vertexes.length; i++) &#123;</span><br><span class="line">        colors[<span class="built_in">this</span>.vertexes[i]] = <span class="string">&quot;white&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> colors</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="广度优先搜索-BFS"><a href="#广度优先搜索-BFS" class="headerlink" title="广度优先搜索(BFS)"></a>广度优先搜索(BFS)</h3><ul>
<li><p>广度优先搜索算法的思路 广度优先算法会从指定的第一个顶点开始遍历图，先访问其所有的相邻点，就像一次访问图的一层。换句话说，就是先宽后深的访问顶点。</p>
</li>
<li><p>图解 BFS <a href="https://camo.githubusercontent.com/283fab53293adc16cd54b4f9113fde2b870201feb691e6ebf2cd7f10164d9179/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e33767a3766783774677673302e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203042110373.png" alt="image"></a></p>
</li>
<li><p>广度优先搜索的实现</p>
<ol>
<li>创建一个队列 Q</li>
<li>将 v 标注为被发现的(灰色), 并将 v 将入队列 Q</li>
<li>如果 Q 非空, 执行下面的步骤：<ul>
<li>将 v 从 Q 中取出队列</li>
<li>将 v 标注为被发现的灰色</li>
<li>将 v 所有的未被访问过的邻接点（白色），加入到队列中</li>
<li>将 v 标志为黑色</li>
</ul>
</li>
</ol>
</li>
<li><p>广度优先搜索的代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 广度优先搜索</span></span><br><span class="line"><span class="function"><span class="title">bfs</span>(<span class="params">handle</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.初始化颜色</span></span><br><span class="line">    <span class="keyword">let</span> color = <span class="built_in">this</span>._initializeColor()</span><br><span class="line">    <span class="comment">// 2. 创建队列</span></span><br><span class="line">    <span class="keyword">let</span> queue = <span class="keyword">new</span> Queue</span><br><span class="line">    <span class="comment">// 3. 将传入的顶点放入队列</span></span><br><span class="line">    queue.enqueue(<span class="built_in">this</span>.vertexes[<span class="number">0</span>])</span><br><span class="line">    <span class="comment">// 4.依赖队列操作数据   队列不为空时一直持续</span></span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">// 4.1 拿到队头</span></span><br><span class="line">        <span class="keyword">let</span> qVal = queue.dequeue()</span><br><span class="line">        <span class="comment">//  4.2 拿到队头所关联（相连）的点并设置为访问中状态（灰色）</span></span><br><span class="line">        <span class="keyword">let</span> qAdj = <span class="built_in">this</span>.adjList.get(qVal)</span><br><span class="line">        color[qVal] = <span class="string">&quot;gray&quot;</span></span><br><span class="line">        <span class="comment">// 4.3 将队头关联的点添加到队尾</span></span><br><span class="line">        <span class="comment">// 这一步是完成bfs的关键，依赖队列的先进先出的特点。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; qAdj.length; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> a = qAdj[i]</span><br><span class="line">            <span class="keyword">if</span> (color[a] === <span class="string">&quot;white&quot;</span>) &#123;</span><br><span class="line">                color[a] = <span class="string">&quot;gray&quot;</span></span><br><span class="line">                queue.enqueue(a)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4.5设置访问完的点为黑色。</span></span><br><span class="line">        color[qVal] = <span class="string">&quot;black&quot;</span></span><br><span class="line">        <span class="keyword">if</span> (handle) &#123;</span><br><span class="line">            handle(qVal)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>测试代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用广度优先算法</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">graph.bfs(graph.vertexes[<span class="number">0</span>], <span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</span><br><span class="line">  result += v + <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// A B C D E F G H I</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="深度优先搜索-DFS"><a href="#深度优先搜索-DFS" class="headerlink" title="深度优先搜索(DFS)"></a>深度优先搜索(DFS)</h3><p>深度优先搜索的思路：</p>
<ul>
<li>深度优先搜索算法将会从第一个指定的顶点开始遍历图，沿着路径知道这条路径最后被访问了。</li>
<li>接着原路回退并探索下一条路径。</li>
<li>图解 DFS <a href="https://camo.githubusercontent.com/942afc74abc5c4613703fb56e84a0f13dd348c5d9e124a6d620746b3453841dc/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e31626a696d636b36357238672e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203042110758.png" alt="image"></a></li>
</ul>
<p>深度优先搜索算法的实现：</p>
<ul>
<li><p>广度优先搜索算法我们使用的是队列，这里可以使用栈完成，也可以使用递归。</p>
</li>
<li><p>方便代码书写，我们还是使用递归(递归本质上就是函数栈的调用)</p>
</li>
<li><p>深度优先搜索算法的代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 深度优先搜索</span></span><br><span class="line"><span class="function"><span class="title">dfs</span>(<span class="params">handle</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.初始化颜色</span></span><br><span class="line">    <span class="keyword">let</span> color = <span class="built_in">this</span>._initializeColor()</span><br><span class="line">    <span class="comment">// 2. 遍历所有顶点，开始访问</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.vertexes.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (color[<span class="built_in">this</span>.vertexes[i]] === <span class="string">&quot;white&quot;</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>._dfsVisit(<span class="built_in">this</span>.vertexes[i], color, handle)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// dfs的递归方法  这里直接使用函数的调用栈</span></span><br><span class="line"><span class="function"><span class="title">_dfsVisit</span>(<span class="params">val, color, handle</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 将颜色设置为访问中</span></span><br><span class="line">    color[val] = <span class="string">&quot;gray&quot;</span></span><br><span class="line">    <span class="comment">// 2. 执行相应的回调</span></span><br><span class="line">    <span class="keyword">if</span> (handle) &#123;</span><br><span class="line">        handle(val)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3. 拿与该点相邻的点，对每个点操作</span></span><br><span class="line">    <span class="keyword">let</span> adj = <span class="built_in">this</span>.adjList.get(val)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; adj.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> w = adj[i]</span><br><span class="line">        <span class="comment">// 如果相邻点未未访问状态，开始访问。</span></span><br><span class="line">        <span class="keyword">if</span> (color[w] === <span class="string">&quot;white&quot;</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>._dfsVisit(w, color, handle)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4. 处理完后设置为访问过点。</span></span><br><span class="line">    color[val] = <span class="string">&quot;black&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>测试代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用深度优先算法</span></span><br><span class="line">result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">graph.dfs(<span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</span><br><span class="line">  result += v + <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 输出深度优先</span></span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//A B E I F C D G H</span></span><br></pre></td></tr></table></figure></li>
<li><p>递归的代码较难理解一些，这副图来帮助理解过程： <a href="https://camo.githubusercontent.com/987016d27b889866aa3c551037919967b22099e64b3ce77cecb7a750496d0ed9/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f58506f65742f696d6167652d686f7374696e67406d61737465722f4a6176615363726970742d2545362539352542302545362538442541452545372542422539332545362539452538342545342542382538452545372541452539372545362542332539352f696d6167652e367a366e6b676d6576786f302e706e67"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203042110994.png" alt="image"></a></p>
</li>
</ul>
<h1 id="十、排序算法"><a href="#十、排序算法" class="headerlink" title="十、排序算法"></a>十、排序算法</h1><h2 id="一、大O表示法"><a href="#一、大O表示法" class="headerlink" title="一、大O表示法"></a>一、大O表示法</h2><p><strong>大O表示法：</strong></p>
<ul>
<li>在计算机中采用<strong>粗略的度量</strong>来描述计算机算法的<strong>效率</strong>，这种方法被称为<strong>“大O”表示法</strong></li>
<li>在<strong>数据项个数</strong>发生改变时，<strong>算法的效率</strong>也会跟着改变。所以说算法A比算法B快两倍，这样的比较是<strong>没有意义</strong>的。</li>
<li>因此我们通常使用<strong>算法的速度</strong>随着<strong>数据量的变化</strong>会如何变化的方式来表示算法的效率，大O表示法就是方式之一。</li>
</ul>
<p><strong>常见的大O表示形式</strong></p>
<table>
<thead>
<tr>
<th>符号</th>
<th>名称</th>
</tr>
</thead>
<tbody><tr>
<td>O（1）</td>
<td>常数</td>
</tr>
<tr>
<td>O（log(n)）</td>
<td>对数</td>
</tr>
<tr>
<td>O（n）</td>
<td>线性</td>
</tr>
<tr>
<td>O（nlog(n)）</td>
<td>线性和对数乘积</td>
</tr>
<tr>
<td>O（n²）</td>
<td>平方</td>
</tr>
<tr>
<td>O（2n）</td>
<td>指数</td>
</tr>
</tbody></table>
<p><strong>不同大O形式的时间复杂度：</strong></p>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/1.png"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203061430003.png" alt="image-20200304164951223"></a></p>
<p>可以看到效率从大到小分别是：O（1）&gt; O（logn）&gt; O（n）&gt; O（nlog(n)）&gt; O（n²）&gt; O（2n）</p>
<p><strong>推导大O表示法的三条规则：</strong></p>
<ul>
<li><strong>规则一</strong>：用常量1取代运行时间中所有的加法常量。如7 + 8 = 15，用1表示运算结果15，大O表示法表示为O（1）；</li>
<li><strong>规则二</strong>：运算中只保留最高阶项。如N^3 + 3n +1，大O表示法表示为：O（N3）;</li>
<li><strong>规则三</strong>：若最高阶项的常数不为1，可将其省略。如4N2，大O表示法表示为：O（N2）;</li>
</ul>
<h2 id="二、排序算法"><a href="#二、排序算法" class="headerlink" title="二、排序算法"></a>二、排序算法</h2><p>这里主要介绍几种简单排序和高级排序：</p>
<ul>
<li><strong>简单排序：</strong>冒泡排序、选择排序、插入排序；</li>
<li><strong>高级排序：</strong>希尔排序、快速排序；</li>
</ul>
<p>此处创建一个列表类ArrayList并添加一些属性和方法，用于存放这些排序方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建列表类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ArrayList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//属性</span></span><br><span class="line">  <span class="built_in">this</span>.array = []</span><br><span class="line"></span><br><span class="line">  <span class="comment">//方法</span></span><br><span class="line">  <span class="comment">//封装将数据插入到数组中方法</span></span><br><span class="line">  ArrayList.prototype.insert = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.array.push(item)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//toString方法</span></span><br><span class="line">  ArrayList.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.array.join(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//交换两个位置的数据</span></span><br><span class="line">  ArrayList.prototype.swap = <span class="function"><span class="keyword">function</span>(<span class="params">m, n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> temp  = <span class="built_in">this</span>.array[m]</span><br><span class="line">    <span class="built_in">this</span>.array[m] = <span class="built_in">this</span>.array[n]</span><br><span class="line">    <span class="built_in">this</span>.array[n] = temp</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1.冒泡排序"></a>1.冒泡排序</h3><p><strong>冒泡排序的思路：</strong></p>
<ul>
<li>对未排序的各元素<strong>从头到尾</strong>依次比较<strong>相邻的两个元素</strong>大小关系；</li>
<li>如果<strong>左边的人员高</strong>，则将两人<strong>交换位置</strong>。比如1比2矮，不交换位置；</li>
<li>向<strong>右移动一位</strong>，继续比较2和3，最后比较 length - 1 和 length - 2这两个数据；</li>
<li>当到达<strong>最右端</strong>时，<strong>最高的人</strong>一定被放在了<strong>最右边</strong>；</li>
<li>按照这个思路，从最左端重新开始时，只需要走到<strong>倒数第二个位置</strong>即可；</li>
</ul>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/2.png"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203061430042.png" alt="image-20200304191223265"></a></p>
<p><strong>实现思路：</strong></p>
<p>两层循环：</p>
<ul>
<li>外层循环控制冒泡趟数：<ul>
<li>第一次：j = length - 1，比较到倒数第一个位置 ；</li>
<li>第二次：j = length - 2，比较到倒数第二个位置 ；</li>
</ul>
</li>
<li>内层循环控制每趟比较的次数：<ul>
<li>第一次比较： i = 0，比较 0 和 1 位置的两个数据；</li>
<li>最后一次比较：i = length - 2,比较length - 2和 length - 1两个数据；</li>
</ul>
</li>
</ul>
<p>详细过程如下图所示：</p>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/3.png"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203061430401.png" alt="image-20200304210611689"></a></p>
<p>动态过程：</p>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/4.gif"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203061430114.gif" alt="img"></a></p>
<p><strong>代码实现：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line">ArrayList.prototype.bubblesor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//1.获取数组的长度</span></span><br><span class="line">  <span class="keyword">let</span> length = <span class="built_in">this</span>.array.length</span><br><span class="line"></span><br><span class="line">  <span class="comment">//外层循环控制冒泡趟数</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> j = length - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)&#123;</span><br><span class="line">    <span class="comment">//内层循环控制每趟比较的次数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; j; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.array[i] &gt; <span class="built_in">this</span>.array[i+<span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="comment">//交换两个数据</span></span><br><span class="line">      <span class="keyword">let</span> temp  = <span class="built_in">this</span>.array[i]</span><br><span class="line">  	<span class="built_in">this</span>.array[i] = <span class="built_in">this</span>.array[i+<span class="number">1</span>]</span><br><span class="line">  	<span class="built_in">this</span>.array[i+<span class="number">1</span>] = temp</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试代码：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">let</span> list = <span class="keyword">new</span> ArrayList()</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入元素</span></span><br><span class="line">list.insert(<span class="number">66</span>)</span><br><span class="line">list.insert(<span class="number">88</span>)</span><br><span class="line">list.insert(<span class="number">12</span>)</span><br><span class="line">list.insert(<span class="number">87</span>)</span><br><span class="line">list.insert(<span class="number">100</span>)</span><br><span class="line">list.insert(<span class="number">5</span>)</span><br><span class="line">list.insert(<span class="number">566</span>)</span><br><span class="line">list.insert(<span class="number">23</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//验证冒泡排序</span></span><br><span class="line">list.bubblesor()</span><br><span class="line"><span class="built_in">console</span>.log(list);</span><br></pre></td></tr></table></figure>

<p><strong>测试结果：</strong><br><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/5.png"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203061430948.png" alt="image-20200304210433388"></a></p>
<p><strong>冒泡排序的效率：</strong></p>
<ul>
<li>上面所讲的对于7个数据项，比较次数为：6 + 5 + 4 + 3 + 2 + 1;</li>
<li>对于N个数据项，<strong>比较次数</strong>为：(N - 1) + (N - 2) + (N - 3) + … + 1 = N * (N - 1) / 2；如果两次比较交换一次，那么<strong>交换次数</strong>为：N * (N - 1) / 4；</li>
<li>使用大O表示法表示比较次数和交换次数分别为：O（ N * (N - 1) / 2）和O（ N * (N - 1) / 4），根据大O表示法的三条规则都化简为：<strong>O（N^2）</strong>;</li>
</ul>
<h3 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="2.选择排序"></a>2.选择排序</h3><p><strong>选择排序改进了冒泡排序：</strong></p>
<ul>
<li>将<strong>交换次数</strong>由<strong>O（N^2）</strong>减小到<strong>O（N）</strong>；</li>
<li>但是<strong>比较次数</strong>依然是<strong>O（N^2）</strong>；</li>
</ul>
<p><strong>选择排序的思路：</strong></p>
<ul>
<li>选定<strong>第一个索引的位置</strong>比如1，然后依次和后面的元素<strong>依次进行比较</strong>；</li>
<li>如果后面的元素，<strong>小于</strong>索引1位置的元素，则<strong>交换位置</strong>到索引1处；</li>
<li>经过一轮的比较之后，可以确定一开始指定的索引1位置的元素是<strong>最小的</strong>；</li>
<li>随后使用同样的方法除索引1意外<strong>逐个比较剩下的元素</strong>即可；</li>
<li>可以看出选择排序，<strong>第一轮</strong>会选出<strong>最小值</strong>，<strong>第二轮</strong>会选出<strong>第二小的值</strong>，直到完成排序。</li>
</ul>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/6.png"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203061430076.png" alt="image-20200304213253241"></a></p>
<p><strong>实现思路：</strong></p>
<p>两层循环：</p>
<ul>
<li>外层循环控制指定的索引：<ul>
<li>第一次：j = 0，指定第一个元素 ；</li>
<li>最后一次：j = length - 1，指定最后一个元素 ；</li>
</ul>
</li>
<li>内层循环负责将指定索引（i）的元素与剩下（i - 1）的元素进行比较；</li>
</ul>
<p>动态过程：</p>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/7.gif"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203061430626.gif" alt="img"></a></p>
<p><strong>代码实现：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//选择排序</span></span><br><span class="line">ArrayList.prototype.selectionSort = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//1.获取数组的长度</span></span><br><span class="line">  <span class="keyword">let</span> length = <span class="built_in">this</span>.array.length</span><br><span class="line"></span><br><span class="line">  <span class="comment">//2.外层循环：从0开始获取元素</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; length - <span class="number">1</span>; j++)&#123;</span><br><span class="line">    <span class="keyword">let</span> min = j</span><br><span class="line">    <span class="comment">//内层循环：从i+1位置开始，和后面的元素进行比较</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = min + <span class="number">1</span>; i &lt; length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.array[min] &gt; <span class="built_in">this</span>.array[i]) &#123;</span><br><span class="line">      min = i</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">this</span>.swap(min, j)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试代码：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">let</span> list = <span class="keyword">new</span> ArrayList()</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入元素</span></span><br><span class="line">list.insert(<span class="number">66</span>)</span><br><span class="line">list.insert(<span class="number">88</span>)</span><br><span class="line">list.insert(<span class="number">12</span>)</span><br><span class="line">list.insert(<span class="number">87</span>)</span><br><span class="line">list.insert(<span class="number">100</span>)</span><br><span class="line">list.insert(<span class="number">5</span>)</span><br><span class="line">list.insert(<span class="number">566</span>)</span><br><span class="line">list.insert(<span class="number">23</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//验证选择排序</span></span><br><span class="line">list.selectionSort()</span><br><span class="line"><span class="built_in">console</span>.log(list);</span><br></pre></td></tr></table></figure>

<p><strong>测试结果：</strong></p>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8.png"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203061430240.png" alt="image-20200304222224801"></a></p>
<p><strong>选择排序的效率：</strong></p>
<ul>
<li>选择排序的<strong>比较次数</strong>为：N * (N - 1) / 2，用大O表示法表示为：<strong>O（N^2）</strong>;</li>
<li>选择排序的<strong>交换次数</strong>为：(N - 1) / 2，用大O表示法表示为：<strong>O（N）</strong>;</li>
<li>所以选择排序的效率高于冒泡排序；</li>
</ul>
<h3 id="3-插入排序"><a href="#3-插入排序" class="headerlink" title="3.插入排序"></a>3.插入排序</h3><p>插入排序是简单排序中效率<strong>最高</strong>的一种排序。</p>
<p><strong>插入排序的思路：</strong></p>
<ul>
<li>插入排序思想的核心是<strong>局部有序</strong>。如图所示，X左边的人称为<strong>局部有序</strong>；</li>
<li>首先指定一数据X（从第一个数据开始），并将数据X的左边变成局部有序状态；</li>
<li>随后将X右移一位，再次达到局部有序之后，继续右移一位，重复前面的操作直至X移至最后一个元素。</li>
</ul>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/9.png"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203061430714.png" alt="image-20200304231400959"></a></p>
<p>插入排序的详细过程：</p>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/10.png"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203061430938.png" alt="image-20200304231643777"></a></p>
<p>动态过程：</p>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/11.gif"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203061430352.gif" alt="img"></a></p>
<p><strong>代码实现：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//插入排序</span></span><br><span class="line">ArrayList.prototype.insertionSort = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//1.获取数组的长度</span></span><br><span class="line">  <span class="keyword">let</span> length = <span class="built_in">this</span>.array.length</span><br><span class="line"></span><br><span class="line">  <span class="comment">//2.外层循环:从第二个数据开始，向左边的已经局部有序数据进行插入</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; length; i++)&#123;</span><br><span class="line">    <span class="comment">//3.内层循环：获取i位置的元素，使用while循环(重点)与左边的局部有序数据依次进行比较</span></span><br><span class="line">    <span class="keyword">let</span> temp = <span class="built_in">this</span>.array[i]</span><br><span class="line">    <span class="keyword">let</span> j = i</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">this</span>.array[j - <span class="number">1</span>] &gt; temp &amp;&amp; j &gt; <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="built_in">this</span>.array[j] = <span class="built_in">this</span>.array[j - <span class="number">1</span>]<span class="comment">//大的数据右移</span></span><br><span class="line">      j--</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.while循环结束后，index = j左边的数据变为局部有序且array[j]最大。此时将array[j]重置为排序前的数据array[i]，方便下一次for循环</span></span><br><span class="line">    <span class="built_in">this</span>.array[j] = temp</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试代码：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"> <span class="keyword">let</span> list = <span class="keyword">new</span> ArrayList()</span><br><span class="line"></span><br><span class="line"> <span class="comment">//插入元素</span></span><br><span class="line"> list.insert(<span class="number">66</span>)</span><br><span class="line"> list.insert(<span class="number">88</span>)</span><br><span class="line"> list.insert(<span class="number">12</span>)</span><br><span class="line"> list.insert(<span class="number">87</span>)</span><br><span class="line"> list.insert(<span class="number">100</span>)</span><br><span class="line"> list.insert(<span class="number">5</span>)</span><br><span class="line"> list.insert(<span class="number">566</span>)</span><br><span class="line"> list.insert(<span class="number">23</span>)</span><br><span class="line"> <span class="comment">// console.log(list);</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//验证插入排序</span></span><br><span class="line"> list.insertionSort()</span><br><span class="line"> <span class="built_in">console</span>.log(list);</span><br></pre></td></tr></table></figure>

<p><strong>测试结果：</strong></p>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/12.png"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203061430084.png" alt="image-20200304235529516"></a></p>
<p><strong>插入排序的效率：</strong></p>
<ul>
<li><strong>比较次数：</strong>第一趟时，需要的最大次数为1；第二次最大为2；以此类推，最后一趟最大为N-1；所以，插入排序的总比较次数为N * (N - 1) / 2；但是，实际上每趟发现插入点之前，平均只有全体数据项的一半需要进行比较，所以比较次数为：<strong>N * (N - 1) / 4</strong>；</li>
<li><strong>交换次数：</strong>指定第一个数据为X时交换0次，指定第二个数据为X最多需要交换1次，以此类推，指定第N个数据为X时最多需要交换N - 1次，所以一共需要交换N * (N - 1) / 2次，平局次数为<strong>N * (N - 1) / 2</strong>；</li>
<li>虽然用大O表示法表示插入排序的效率也是<strong>O（N^2）</strong>，但是插入排序整体操作次数更少，因此，在简单排序中，插入排序<strong>效率最高</strong>；</li>
</ul>
<h3 id="4-希尔排序"><a href="#4-希尔排序" class="headerlink" title="4.希尔排序"></a>4.希尔排序</h3><p><strong>希尔排序</strong>是<strong>插入排序</strong>的一种高效的<strong>改进版</strong>，效率比插入排序要<strong>高</strong>。</p>
<p><strong>希尔排序的历史背景：</strong></p>
<ul>
<li>希尔排序按其设计者希尔（Donald Shell）的名字命名，该算法由<strong>1959年公布</strong>；</li>
<li>希尔算法首次突破了计算机界一直认为的<strong>算法的时间复杂度都是O（N^2）</strong>的大关，为了纪念该算法里程碑式</li>
</ul>
<p>的意义，用<strong>Shell</strong>来命名该算法；</p>
<p><strong>插入排序的问题：</strong></p>
<ul>
<li>假设一个<strong>很小的数据项</strong>在<strong>很靠近右端的位置</strong>上，这里本应该是<strong>较大的数据项的位置</strong>；</li>
<li>将这个<strong>小数据项移动到左边</strong>的正确位置，所有的<strong>中间数据项都必须向右移动一位</strong>，这样效率非常低；</li>
<li>如果通过<strong>某种方式</strong>，不需要<strong>一个个移动所有中间的数据项</strong>，就能把较小的数据项移到左边，那么这个算法的执行速度就会有很大的改进。</li>
</ul>
<p><strong>希尔排序的实现思路：</strong></p>
<ul>
<li>希尔排序主要通过对数据进行<strong>分组</strong>实现快速排序；</li>
<li>根据设定的增量（gap）将数据分为gap个组（<strong>组数等于gap</strong>），再在每个分组中进行局部排序；</li>
</ul>
<blockquote>
<p>假如有数组有10个数据，第1个数据为黑色，增量为5。那么第二个为黑色的数据index=5，第3个数据为黑色的数据index = 10（不存在）。所以黑色的数据每组只有2个，10 / 2 = 5一共可分5组，即<strong>组数等于增量gap</strong>。</p>
</blockquote>
<ul>
<li>排序之后，减小增量，继续分组，再次进行局部排序，直到增量gap=1为止。随后只需进行微调就可完成数组的排序；</li>
</ul>
<p>具体过程如下：</p>
<ul>
<li>排序之前的，储存10个数据的原始数组为：</li>
</ul>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/13.png"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203061430362.png" alt="image-20200305102330304"></a></p>
<ul>
<li>设初始增量gap = length / 2 = 5，即数组被分为了5组，如图所示分别为：[8, 3]、[9, 5]、[1, 4]、[7, 6]、[2, 0]：</li>
</ul>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/14.png"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203061430547.png" alt="image-20200305104914438"></a></p>
<ul>
<li>随后分别在每组中对数据进行局部排序，5组的顺序如图所示，变为：[3, 8]、[5, 9]、[1, 4]、[6, 7]、[0, 2]：</li>
</ul>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/15.png"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203061430896.png" alt="image-20200305103136251"></a></p>
<ul>
<li>然后缩小增量gap = 5 / 2 = 2，即数组被分为了2组，如图所示分别为：[3，1，0，9，7]、[5，6，8，4，2]：</li>
</ul>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/16.png"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203061430733.png" alt="image-20200305104933858"></a></p>
<ul>
<li>随后分别在每组中对数据进行局部排序，两组的顺序如图所示，变为：[0，1，3，7，9]、[2，4，5，6，8]：</li>
</ul>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/17.png"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203061430220.png" alt="image-20200305103815262"></a></p>
<ul>
<li>然后然后缩小增量gap = 2 / 1 = 1，即数组被分为了1组，如图所示为：[0，2，1，4，3，5，7，6，9，8]：</li>
</ul>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/18.png"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203061430952.png" alt="image-20200305104847458"></a></p>
<ul>
<li>最后只需要对该组数据进行插入排序即可完成整个数组的排序：</li>
</ul>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/19.png"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203061430787.png" alt="image-20200305104707789"></a></p>
<p>动态过程：</p>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/20.gif"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203061430294.gif" alt="img"></a></p>
<p>图中d表示增量gap。</p>
<p><strong>增量的选择：</strong></p>
<ul>
<li><strong>原稿</strong>中希尔建议的初始间距为<strong>N / 2</strong>，比如对于N = 100的数组，增量序列为：50，25，12，6，3，1，可以发现不能整除时向下取整。</li>
<li><strong>Hibbard增量序列：</strong>增量序列算法为：2^k - 1，即1，3，5，7… …等；这种情况的最坏复杂度为*<em>O（N3/2）*</em>,平均复杂度为**O（N5/4）**但未被证明；</li>
<li><strong>Sedgewcik增量序列：</strong></li>
</ul>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/21.png"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203061430740.png" alt="image-20200305110724309"></a></p>
<p>以下代码实现中采用希尔排序原稿中建议的增量即<strong>N / 2</strong> 。</p>
<p><strong>代码实现：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//希尔排序</span></span><br><span class="line">ArrayList.prototype.shellSort = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//1.获取数组的长度</span></span><br><span class="line">  <span class="keyword">let</span> length = <span class="built_in">this</span>.array.length</span><br><span class="line"></span><br><span class="line">  <span class="comment">//2.初始化增量</span></span><br><span class="line">  <span class="keyword">let</span> gap = <span class="built_in">Math</span>.floor(length / <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//3.第一层循环：while循环(使gap不断减小)</span></span><br><span class="line">  <span class="keyword">while</span>(gap &gt;= <span class="number">1</span> )&#123;</span><br><span class="line">    <span class="comment">//4.第二层循环：以gap为增量，进行分组，对分组进行插入排序</span></span><br><span class="line">    <span class="comment">//重点为：将index = gap作为选中的第一个数据</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = gap; i &lt; length; i++)&#123;</span><br><span class="line">      <span class="keyword">let</span> temp = <span class="built_in">this</span>.array[i]</span><br><span class="line">      <span class="keyword">let</span> j = i</span><br><span class="line">      <span class="comment">//5.第三层循环:寻找正确的插入位置</span></span><br><span class="line">      <span class="keyword">while</span>(<span class="built_in">this</span>.array[j - gap] &gt; temp &amp;&amp; j &gt; gap - <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">this</span>.array[j] = <span class="built_in">this</span>.array[j - gap]</span><br><span class="line">        j -= gap</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="comment">//6.将j位置的元素设置为temp</span></span><br><span class="line">    <span class="built_in">this</span>.array[j] = temp</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    gap = <span class="built_in">Math</span>.floor(gap / <span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里解释一下上述代码中的三层循环：</p>
<ul>
<li><strong>第一层循环：</strong>while循环，控制gap递减到1；</li>
<li><strong>第二层循环：</strong>分别取出根据g增量gap分成的gap组数据：将index = gap的数据作为选中的第一个数据，如下图所示，gap=5，则index = gap的数据为3，index = gap - 1的数据为8，两个数据为一组。随后gap不断加1右移，直到gap &lt; length，此时实现了将数组分为5组。</li>
</ul>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/21.5.png"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203061430840.png" alt="image-20200305104914438"></a></p>
<ul>
<li><strong>第三层循环：</strong>对每一组数据进行插入排序；</li>
</ul>
<p><strong>测试代码：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"> <span class="keyword">let</span> list = <span class="keyword">new</span> ArrayList()</span><br><span class="line"></span><br><span class="line"> <span class="comment">//插入元素</span></span><br><span class="line"> list.insert(<span class="number">66</span>)</span><br><span class="line"> list.insert(<span class="number">88</span>)</span><br><span class="line"> list.insert(<span class="number">12</span>)</span><br><span class="line"> list.insert(<span class="number">87</span>)</span><br><span class="line"> list.insert(<span class="number">100</span>)</span><br><span class="line"> list.insert(<span class="number">5</span>)</span><br><span class="line"> list.insert(<span class="number">566</span>)</span><br><span class="line"> list.insert(<span class="number">23</span>)</span><br><span class="line"> <span class="comment">// console.log(list);</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//验证希尔排序</span></span><br><span class="line"> list.shellSort()</span><br><span class="line"> <span class="built_in">console</span>.log(list);</span><br></pre></td></tr></table></figure>

<p><strong>测试结果：</strong></p>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/22.png"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203061430624.png" alt="image-20200305114934209"></a></p>
<p><strong>希尔排序的效率：</strong></p>
<ul>
<li>希尔排序的效率和增量有直接关系，即使使用原稿中的增量效率都高于简单排序。</li>
</ul>
<h3 id="5-快速排序"><a href="#5-快速排序" class="headerlink" title="5.快速排序"></a>5.快速排序</h3><p>快速排序的介绍：</p>
<ul>
<li><strong>快速排序</strong>可以说是<strong>目前所有排序算法</strong>中，<strong>最快</strong>的一种排序算法。当然，没有任何一种算法是在任意情况下都是最优的。但是，大多数情况下快速排序是比较好的选择。</li>
<li><strong>快速排序</strong>其实是<strong>冒泡排序</strong>的升级版；</li>
</ul>
<p>快速排序的核心思想是<strong>分而治之</strong>，先选出一个数据（比如65），将比其小的数据都放在它的左边，将比它大的数据都放在它的右边。这个数据称为<strong>枢纽</strong></p>
<p>和冒泡排序的不同：</p>
<ul>
<li>我们选择的65可以一次性将它放在最正确的位置，之后就不需要做任何移动；</li>
<li>而冒泡排序即使已经找到最大值，也需要继续移动最大值，直到将它移动到最右边；</li>
</ul>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/23.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/23.png" alt="image-20200305154504624"></a></p>
<p><strong>快速排序的枢纽：</strong></p>
<ul>
<li><strong>第一种方案：</strong>直接选择第一个元素作为枢纽。但是，当第一个元素就是最小值的情况下，效率不高；</li>
<li><strong>第二种方案：</strong>使用随机数。随机数本身十分消耗性能，不推荐；</li>
<li><strong>优秀的解决方法：</strong>取index为头、中、位的三个数据排序后的中位数；如下图所示，按下标值取出的三个数据为：92，31，0，经排序后变为：0，31，92，取其中的中位数31作为<strong>枢纽</strong>（当（length-1）/2不整除时可向下或向上取整）：</li>
</ul>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/24.png"><img src="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/24.png" alt="image-20200305182934710"></a></p>
<p><strong>实现枢纽选择：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//交换两个位置的数据</span></span><br><span class="line"><span class="keyword">let</span> swap = <span class="function"><span class="keyword">function</span>(<span class="params">arr, m, n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> temp  = arr[m]</span><br><span class="line">    arr[m] = arr[n]</span><br><span class="line">    arr[n] = temp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//快速排序</span></span><br><span class="line"><span class="comment">//1.选择枢纽</span></span><br><span class="line"><span class="keyword">let</span> median = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//1.取出中间的位置</span></span><br><span class="line">  <span class="keyword">let</span> center = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">let</span> right = arr.length - <span class="number">1</span> </span><br><span class="line">  <span class="keyword">let</span> left = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//2.判断大小并进行交换</span></span><br><span class="line">  <span class="keyword">if</span> (arr[left] &gt; arr[center]) &#123;</span><br><span class="line">    swap(arr, left, center)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (arr[center] &gt; arr[right])&#123;</span><br><span class="line">    swap(arr, center, right)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (arr[left] &gt; arr[right]) &#123;</span><br><span class="line">    swap(arr, left, right)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//3.返回枢纽</span></span><br><span class="line">  <span class="keyword">return</span> center</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>数组经过获取枢纽函数操作之后，选出的3个下标值对应的数据位置变为：</p>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/25.png"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203061430389.png" alt="image-20200320091750654"></a></p>
<p><strong>动态过程：</strong></p>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/26.gif"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203061430840.gif" alt="img"></a></p>
<p><strong>快速排序代码实现：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2.快速排序</span></span><br><span class="line"><span class="keyword">let</span> QuickSort = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> center = median(arr)</span><br><span class="line">  <span class="keyword">let</span> c = arr.splice(center, <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">let</span> l = []</span><br><span class="line">  <span class="keyword">let</span> r = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[i] &lt; c) &#123;</span><br><span class="line">        l.push(arr[i])</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        r.push(arr[i])</span><br><span class="line">      &#125;        </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> QuickSort(l).concat(c, QuickSort(r))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>算法的巧妙之处在于通过:</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">QuickSort(l)<span class="selector-class">.concat</span>(c, QuickSort(r))</span><br></pre></td></tr></table></figure>

<p>递归调用<code>QuickSort</code>函数实现了枢纽<code>Center</code>左边数据<code>l</code>和右边数据<code>r</code>的排序；</p>
<p><strong>测试代码：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">0</span>, <span class="number">13</span>, <span class="number">81</span>, <span class="number">43</span>, <span class="number">31</span>, <span class="number">27</span>, <span class="number">56</span>, <span class="number">92</span>]</span><br><span class="line"><span class="built_in">console</span>.log(QuickSort(arr));</span><br></pre></td></tr></table></figure>

<p><strong>测试结果</strong></p>
<p><a href="https://gitee.com/ahuntsun/BlogImgs/raw/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/28.png"><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202203061431251.png" alt="image-20200320092254048"></a></p>
<p><strong>快速排序的效率：</strong></p>
<ul>
<li>快速排序最坏情况下的效率：每次选择的枢纽都是最左边或最右边的数据，此时效率等同于冒泡排序，时间复杂度为<strong>O（n2）</strong>。可根据不同的枢纽选择避免这一情况；</li>
<li>快速排序的平均效率：为<strong>O（N*logN）</strong>，虽然其他算法效率也可达到O（N*logN），但是其中快速排序是<strong>最好的</strong>。</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>算法实战</title>
    <url>/2022/03/22/2022/algorithm_exercise/</url>
    <content><![CDATA[<h1 id="一、练习"><a href="#一、练习" class="headerlink" title="一、练习"></a>一、练习</h1><h2 id="1-正负数排列"><a href="#1-正负数排列" class="headerlink" title="1. 正负数排列"></a>1. 正负数排列</h2><p>对任意输入的整数数组，将其元素按正数在左（右），负数在右（左）进行排列，要求时间复杂度为O(n)，且实现过程中不创建新的数组空间</p>
<p>我的答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, -<span class="number">4</span>, <span class="number">7</span>, -<span class="number">1</span>, <span class="number">10</span>, <span class="number">12</span>, -<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortPositiveNegative</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> length = arr.length</span><br><span class="line">    <span class="comment">// i寻找正数，j寻找负数</span></span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; <span class="number">0</span> &amp;&amp; arr[j] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            [arr[i], arr[j]] = [arr[j], arr[i]]</span><br><span class="line">            i++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; <span class="number">0</span> &amp;&amp; arr[j] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            i++</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sortPositiveNegative(arr));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>他人思路：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 他人思路</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortPositiveNegativeNormal</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> length = arr.length</span><br><span class="line">    <span class="comment">// i用于循环数组中所有元素，j用于查找数组中出现的第一个正数，j至多只能和i相等</span></span><br><span class="line">    <span class="comment">// 只有i出现了负数时才可能需要进行交换,在此前提下，只有j和i不相等的时候才需要进行交换</span></span><br><span class="line">    <span class="keyword">let</span> j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != j) &#123;</span><br><span class="line">                [arr[i], arr[j]] = [arr[j], arr[i]]</span><br><span class="line">            &#125;</span><br><span class="line">            j++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sortPositiveNegativeNormal(arr));</span><br></pre></td></tr></table></figure>

<h2 id="2-股票最大利润"><a href="#2-股票最大利润" class="headerlink" title="2. 股票最大利润"></a>2. 股票最大利润</h2><p>给定一个股票交易值数组，返回最大利润</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bestStock</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!arr.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> minPrice = arr[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">let</span> maxProfit = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; minPrice) &#123;</span><br><span class="line">            minPrice = arr[i]</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[i] - minPrice &gt; maxProfit) &#123;</span><br><span class="line">            maxProfit = arr[i] - minPrice</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxProfit</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> test = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">9</span>]</span><br><span class="line"><span class="built_in">console</span>.log(bestStock(test));</span><br></pre></td></tr></table></figure>

<h2 id="3-字符压缩"><a href="#3-字符压缩" class="headerlink" title="3. 字符压缩"></a>3. 字符压缩</h2><p>按照字符串出现的个数进行字符串压缩，如果压缩完后字符串更短则返回压缩后的字符串，否则返回原字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compressStr</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] === arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            sum++</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果出现一次，则默认不让其加上字符1</span></span><br><span class="line">            <span class="keyword">if</span> (sum == <span class="number">1</span>) &#123;</span><br><span class="line">                result += arr[i]</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result += arr[i] + sum</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            sum = <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    result += arr[arr.length - <span class="number">1</span>] + sum</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> arr.length &gt; result.length ? result : arr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">test = <span class="string">&#x27;aaabbbdceffff&#x27;</span></span><br><span class="line">tests = <span class="string">&#x27;abcee&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(compressStr(test));</span><br></pre></td></tr></table></figure>

<h2 id="4-两数之和"><a href="#4-两数之和" class="headerlink" title="4. 两数之和"></a>4. 两数之和</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">twoNumSum</span>(<span class="params">arr, targetNum</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> target = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> temp = targetNum - arr[i]</span><br><span class="line">        <span class="keyword">if</span> (target.has(temp)) &#123;</span><br><span class="line">            <span class="keyword">return</span> [target.get(temp), i]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            target.set(arr[i], i)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">test = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">4</span>]</span><br><span class="line"><span class="built_in">console</span>.log(twoNumSum(test, <span class="number">9</span>));</span><br></pre></td></tr></table></figure>

<h2 id="5-判断字符串是否为anagram"><a href="#5-判断字符串是否为anagram" class="headerlink" title="5. 判断字符串是否为anagram"></a>5. 判断字符串是否为anagram</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validAnagram</span>(<span class="params">arr1, arr2</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 边界判断</span></span><br><span class="line">    <span class="keyword">if</span> (arr1.length !== arr2.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> targetMap = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对第一个字符串，如果有则将键值加一，否则将键值设为1</span></span><br><span class="line">        <span class="keyword">if</span> (targetMap.has(arr1[i])) &#123;</span><br><span class="line">            targetMap.set(arr1[i], targetMap.get(arr1[i]) + <span class="number">1</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            targetMap.set(arr1[i], <span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对第二个字符串，如果有则将键值减一，否则将值设为-1</span></span><br><span class="line">        <span class="keyword">if</span> (targetMap.has(arr2[i])) &#123;</span><br><span class="line">            targetMap.set(arr2[i], targetMap.get(arr2[i]) - <span class="number">1</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            targetMap.set(arr2[i], -<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历Map，如果有非零，则返回false，否则返回true</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> [key, value] <span class="keyword">of</span> targetMap) &#123;</span><br><span class="line">        <span class="keyword">if</span> (value !== <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(validAnagram(<span class="string">&#x27;anagram&#x27;</span>, <span class="string">&#x27;abngarm&#x27;</span>));</span><br></pre></td></tr></table></figure>

<h2 id="6-字符串连续非重复的最大长度"><a href="#6-字符串连续非重复的最大长度" class="headerlink" title="6. 字符串连续非重复的最大长度"></a>6. 字符串连续非重复的最大长度</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">longestSubstring</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 使用双指针，其中一个用来遍历字符串，另一个用来控制最大长度</span></span><br><span class="line">    <span class="keyword">let</span> j = <span class="number">0</span>,</span><br><span class="line">        maxLength = <span class="number">0</span>,</span><br><span class="line">        targetSet = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 如果set中没有的话就将其添加至set中，同时更新长度</span></span><br><span class="line">        <span class="keyword">if</span> (!targetSet.has(str[i])) &#123;</span><br><span class="line">            targetSet.add(str[i])</span><br><span class="line">            <span class="comment">// 这种存储法保证了最大历史记录</span></span><br><span class="line">            maxLength = <span class="built_in">Math</span>.max(targetSet.size, maxLength)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (targetSet.has(str[j])) &#123;</span><br><span class="line">                <span class="comment">// 进行删除这是因为打破了前面最长的局面（已经保存到了最大长度）,</span></span><br><span class="line">                <span class="comment">// 必须重新开始，删除直到没有元素为止</span></span><br><span class="line">                targetSet.delete(str[j])</span><br><span class="line">                j++</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 最后加上该破坏氛围的字符串重新开始</span></span><br><span class="line">            targetSet.add(str[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxLength</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(longestSubstring(<span class="string">&#x27;abcbeeee&#x27;</span>));</span><br></pre></td></tr></table></figure>

<h2 id="7-palindrome-回文"><a href="#7-palindrome-回文" class="headerlink" title="7. palindrome(回文)"></a>7. palindrome(回文)</h2><p>判断是否为回文</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPalindrome</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 长度最小为1</span></span><br><span class="line">    <span class="keyword">if</span> (!str.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 正则表达式以 “/” 开头且以 “/”结尾，“^”表示以……开头，“$”表示以……结尾</span></span><br><span class="line">    <span class="comment">//2. \s匹配空格（换行符、制表符、空格等）相当于[\t\r\n\v\f]   \S表示取反</span></span><br><span class="line">    <span class="comment">//3. \w表示任意的字母数字下划线相当于[0-9a-zA-Z_] 、 \W表示取反</span></span><br><span class="line">    <span class="comment">//4. \d表示数字，\D表示除了数字之外的字符</span></span><br><span class="line">    <span class="comment">//5. g:全局匹配（如果不是全局匹配则只能处理一个字符）  i:忽略大小写  gi:全局匹配和忽略大小写</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 假设字符串只接收字母、数字,且忽略大小写</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> temp = str.toLowerCase().replace(<span class="regexp">/[\W_]/g</span>, <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">        left = <span class="number">0</span>,</span><br><span class="line">        right = str.length - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">if</span> (temp[left] == temp[right]) &#123;</span><br><span class="line">            right--</span><br><span class="line">            left++</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// return是退出整个函数的</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">testStr = <span class="string">&#x27;1221s&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(isPalindrome(testStr));</span><br></pre></td></tr></table></figure>

<h2 id="8-parentheses"><a href="#8-parentheses" class="headerlink" title="8. parentheses"></a>8. parentheses</h2><p>判断括号是否输入有效</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validParentheses</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!str.length || str.length % <span class="number">2</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 先建立一个hashMap表</span></span><br><span class="line">    <span class="keyword">let</span> maps = <span class="keyword">new</span> <span class="built_in">Map</span>(),</span><br><span class="line">        tempStack = []</span><br><span class="line">    maps.set(<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">    maps.set(<span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line">    maps.set(<span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">    <span class="comment">// 分析：充分利用最近出现左括号，那么再次出现右括号一定是与他进行配对的，</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (maps.has(str[i])) &#123;</span><br><span class="line">            <span class="comment">// 将闭括号存入栈</span></span><br><span class="line">            tempStack.push(maps.get(str[i]))</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 查看是否能进行配对</span></span><br><span class="line">            <span class="keyword">if</span> (tempStack.pop() !== str[i]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tempStack.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">testStr = <span class="string">&#x27;(&#123;&#125;)]&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(validParentheses(testStr));</span><br></pre></td></tr></table></figure>

<h2 id="9-mergeIntervals"><a href="#9-mergeIntervals" class="headerlink" title="9. mergeIntervals"></a>9. mergeIntervals</h2><p>合并区间</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// input:  [[1, 4],[5, 6],[8, 10],[9, 11]</span></span><br><span class="line"><span class="comment">// output: [[1, 4],[5, 6],[8,11]]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeIntervals</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!arr.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    arr.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">0</span>] - b[<span class="number">0</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 设定当前合并区间的最大合并区间</span></span><br><span class="line">    <span class="keyword">let</span> curr = arr[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">let</span> result = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">        <span class="keyword">if</span> (item[<span class="number">0</span>] &lt;= curr[<span class="number">1</span>]) &#123;</span><br><span class="line">            curr[<span class="number">1</span>] = <span class="built_in">Math</span>.max(curr[<span class="number">1</span>], item[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result.push(curr)</span><br><span class="line">            curr = item</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 至关只要，不论最后一步走哪都要进行追加</span></span><br><span class="line">    result.push(curr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">testArr = [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">4</span>],</span><br><span class="line">    [<span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">    [<span class="number">8</span>, <span class="number">10</span>],</span><br><span class="line">    [<span class="number">9</span>, <span class="number">11</span>]</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"><span class="built_in">console</span>.log(mergeIntervals(testArr));</span><br></pre></td></tr></table></figure>

<h2 id="10-maxSubPalindrome"><a href="#10-maxSubPalindrome" class="headerlink" title="10. maxSubPalindrome"></a>10. maxSubPalindrome</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// input: &#x27;abace&#x27;</span></span><br><span class="line"><span class="comment">// output: &#x27;aba&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">subPalindrome</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 边界判断</span></span><br><span class="line">    <span class="keyword">if</span> (str.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> str.length</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义最长字符串出现的索引</span></span><br><span class="line">    <span class="keyword">let</span> start = <span class="number">0</span>,</span><br><span class="line">        maxLength = <span class="number">1</span></span><br><span class="line">    <span class="comment">// 定义一个处理函数，避免代码重复</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params">left, right</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 核心为不出边界，且两边（并非真正的左右，有可能是前后元素）相等</span></span><br><span class="line">        <span class="keyword">while</span> (str[left] === str[right] &amp;&amp; left &gt;= <span class="number">0</span> &amp;&amp; right &lt; str.length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (right - left + <span class="number">1</span> &gt; maxLength) &#123;</span><br><span class="line">                maxLength = right - left + <span class="number">1</span></span><br><span class="line">                <span class="comment">// 更新开始索引</span></span><br><span class="line">                start = left</span><br><span class="line">            &#125;</span><br><span class="line">            left--</span><br><span class="line">            right++</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 判断相邻两个元素</span></span><br><span class="line">        process(i, i + <span class="number">1</span>)</span><br><span class="line">        <span class="comment">// 判断前后两个元素</span></span><br><span class="line">        process(i - <span class="number">1</span>, i + <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str.substring(start, start + maxLength)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">testStr = <span class="string">&#x27;ababacd&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(subPalindrome(testStr));</span><br></pre></td></tr></table></figure>



<h2 id="11-groupPalindrome"><a href="#11-groupPalindrome" class="headerlink" title="11. groupPalindrome"></a>11. groupPalindrome</h2><p>回文组合，将仅出现一次且长度相同的字符串进行分组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// input: [&#x27;abc&#x27;,&#x27;cba&#x27;,&#x27;abd&#x27;,&#x27;dba&#x27;,&#x27;jjj&#x27;]</span></span><br><span class="line"><span class="comment">// output:[[&#x27;abc&#x27;,&#x27;cba&#x27;],[&#x27;abd&#x27;,&#x27;dba&#x27;],[&#x27;jjj&#x27;]]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">groupPalindrome</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> targetArr = [],</span><br><span class="line">        map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">        <span class="keyword">let</span> tempStr = <span class="built_in">Array</span>(<span class="number">26</span>).fill(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; item.length; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> temp = item.charCodeAt(i) - <span class="number">97</span></span><br><span class="line">            tempStr[temp] += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将数组转换为字符串</span></span><br><span class="line">        <span class="keyword">let</span> joins = tempStr.join(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="comment">// 如果出现过则将字符串进行追加，否则创建新的map键值</span></span><br><span class="line">        <span class="keyword">if</span> (map.has(joins)) &#123;</span><br><span class="line">            map.get(joins).push(item)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            map.set(joins, [item])</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遍历map将其取出</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">        targetArr.push(value)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> targetArr</span><br><span class="line">&#125;</span><br><span class="line">testArr = [<span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;ega&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;cba&#x27;</span>, <span class="string">&#x27;bac&#x27;</span>, <span class="string">&#x27;deg&#x27;</span>]</span><br><span class="line"><span class="built_in">console</span>.log(groupPalindrome(testArr));</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>gis</title>
    <url>/2022/01/30/2022/gis/</url>
    <content><![CDATA[<h1 id="一、开发笔记"><a href="#一、开发笔记" class="headerlink" title="一、开发笔记"></a>一、开发笔记</h1><h2 id="1-常见坐标和格式转换"><a href="#1-常见坐标和格式转换" class="headerlink" title="1. 常见坐标和格式转换"></a>1. 常见坐标和格式转换</h2><h3 id="tif转ASCII"><a href="#tif转ASCII" class="headerlink" title="tif转ASCII"></a>tif转ASCII</h3><p><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202201192133750.png" alt="image-20220119213305668"></p>
<h3 id="坐标转换（QGIS）"><a href="#坐标转换（QGIS）" class="headerlink" title="坐标转换（QGIS）"></a>坐标转换（QGIS）</h3><ul>
<li><p>非跨地理坐标系转换：</p>
<p>必须提前知道原来的坐标系，例如地理转投影、投影转地理就<strong>先</strong>设定<strong>原坐标</strong>（缺少关键投影信息的情况下），再直接<strong>右键导出</strong>相应的坐标系即可</p>
</li>
</ul>
<h3 id="常见EPSG坐标系"><a href="#常见EPSG坐标系" class="headerlink" title="常见EPSG坐标系"></a>常见EPSG坐标系</h3><ul>
<li>EPSG:4490 - China Geodetic Coordinate System 2000 - 地理坐标系</li>
<li>EPSG:4549 - CGCS2000 / 3-degree Gauss-Kruger CM 120E - 投影坐标系</li>
<li>EPSG:4326 - WGS 84 - 地理坐标系</li>
<li>EPSG:3857 - WGS 84 / Pseudo-Mercator - 投影坐标系</li>
</ul>
<h3 id="关于坐标转换的经典帖子"><a href="#关于坐标转换的经典帖子" class="headerlink" title="关于坐标转换的经典帖子"></a>关于坐标转换的经典帖子</h3><table>
<thead>
<tr>
<th>名称</th>
<th>链接</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>python坐标转换</td>
<td><a href="https://nsidc.org/support/faq/how-can-i-reproject-geotiff-file-polar-stereographic-projecton-geographic-latlon">python坐标转换</a></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="2-python相关"><a href="#2-python相关" class="headerlink" title="2. python相关"></a>2. python相关</h2><h3 id="安装包失败"><a href="#安装包失败" class="headerlink" title="安装包失败"></a>安装包失败</h3><p>采取豆瓣镜像：具体安装为：<code>pip install 包名 -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com</code></p>
<h2 id="3-常见三维数据处理"><a href="#3-常见三维数据处理" class="headerlink" title="3. 常见三维数据处理"></a>3. 常见三维数据处理</h2><p>超图桌面软件查看倾斜摄影数据</p>
<p><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202201222309866.png" alt="Snipaste_2022-01-22_23-02-47"></p>
<p><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202201222315289.png" alt="Snipaste_2022-01-22_23-14-51"></p>
<p><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202201222313488.png" alt="Snipaste_2022-01-22_23-12-32"></p>
<p><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202201222308413.png" alt="Snipaste_2022-01-22_23-07-31"></p>
<h2 id="二、模型相关"><a href="#二、模型相关" class="headerlink" title="二、模型相关"></a>二、模型相关</h2><h2 id="1-降雨数据"><a href="#1-降雨数据" class="headerlink" title="1. 降雨数据"></a>1. 降雨数据</h2><p>单位为<code>mm/h</code>，原理为线性插值，只要秒对应上即可</p>
<p><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202201231621486.png" alt="image-20220123162131451"></p>
]]></content>
  </entry>
  <entry>
    <title>开发记录</title>
    <url>/2022/02/22/2022/development/</url>
    <content><![CDATA[<h1 id="开发手册"><a href="#开发手册" class="headerlink" title="开发手册"></a>开发手册</h1><h2 id="1-优秀博客"><a href="#1-优秀博客" class="headerlink" title="1. 优秀博客"></a>1. 优秀博客</h2><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>cesium官方文档</td>
<td><a href="https://sandcastle.cesium.com/?src=CZML%20Custom%20Properties.html">https://sandcastle.cesium.com/?src=CZML%20Custom%20Properties.html</a></td>
</tr>
<tr>
<td>2</td>
<td>网友代码</td>
<td><a href="https://blog.csdn.net/weixin_39080216/article/details/99747748">https://blog.csdn.net/weixin_39080216/article/details/99747748</a></td>
</tr>
<tr>
<td>3</td>
<td>水淹没</td>
<td><a href="https://blog.csdn.net/weixin_44011559/article/details/118979678?spm=1001.2014.3001.5501">https://blog.csdn.net/weixin_44011559/article/details/118979678?spm=1001.2014.3001.5501</a></td>
</tr>
<tr>
<td>4</td>
<td>地形高度</td>
<td><a href="https://blog.csdn.net/u013821237/article/details/84838103">https://blog.csdn.net/u013821237/article/details/84838103</a></td>
</tr>
<tr>
<td>5</td>
<td>cesium坐标转换</td>
<td><a href="https://blog.csdn.net/u013821237/article/details/80169327?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164169395916780274137001%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=164169395916780274137001&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-80169327.pc_search_insert_ulrmf&amp;utm_term=cesium+cartesian3&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/u013821237/article/details/80169327?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164169395916780274137001%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=164169395916780274137001&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-80169327.pc_search_insert_ulrmf&amp;utm_term=cesium+cartesian3&amp;spm=1018.2226.3001.4187</a></td>
</tr>
<tr>
<td>6</td>
<td>VMware16pro秘钥</td>
<td>ZF3R0-FHED2-M80TY-8QYGC-NPKYF</td>
</tr>
<tr>
<td>7</td>
<td></td>
<td></td>
</tr>
<tr>
<td>8</td>
<td></td>
<td></td>
</tr>
<tr>
<td>9</td>
<td></td>
<td></td>
</tr>
<tr>
<td>10</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="2-项目部署"><a href="#2-项目部署" class="headerlink" title="2. 项目部署"></a>2. 项目部署</h2><p>使用<code>npm run build</code>之后便可得到dist文件夹，为了方便，可将其部署到Windows自带的iis服务上，步骤如下：</p>
<h3 id="2-1-IIS"><a href="#2-1-IIS" class="headerlink" title="2.1 IIS"></a>2.1 IIS</h3><p>初次<code>开启Windows的IIS服务</code>步骤为：</p>
<ul>
<li>win+r输入control唤出控制面板</li>
<li>单击【卸载程序】按钮</li>
<li>单击【启用或关闭Windows功能】</li>
<li>选中【IIS】即可</li>
</ul>
<p><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202202221953840.png" alt="image-20220222195342769"></p>
<p>初次打开<code>IIS管理器</code>的步骤：</p>
<ul>
<li>控制面板中打开【系统和安全】</li>
<li>【管理工具】</li>
<li>【IIS管理器】</li>
</ul>
<p><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202202222001714.png" alt="image-20220222200123664"></p>
<p><code>新建IIS网站</code>：</p>
<ul>
<li><p>右击上述网站，单击【添加网站】</p>
<p><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202202222045625.png" alt="image-20220222204524566"></p>
</li>
</ul>
<h3 id="2-2-防火墙"><a href="#2-2-防火墙" class="headerlink" title="2.2 防火墙"></a>2.2 防火墙</h3><p>打开防护墙的方式如同打开【IIS管理器】一致</p>
<ul>
<li><p>控制面板中打开【系统和安全】</p>
</li>
<li><p>【管理工具】</p>
</li>
<li><p>【防火墙】</p>
</li>
<li><p>输入端口（iis设置的端口），后续操作默认即可</p>
<p><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202202222056356.png" alt="image-20220222205641288"></p>
</li>
</ul>
<h3 id="2-3-flask配置"><a href="#2-3-flask配置" class="headerlink" title="2.3 flask配置"></a>2.3 flask配置</h3><p><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202202222153417.png" alt="image-20220222215312386"></p>
<p><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202202222153838.png" alt="image-20220222215322798"></p>
]]></content>
  </entry>
  <entry>
    <title>JS高级</title>
    <url>/2022/01/05/2022/js_advanced/</url>
    <content><![CDATA[<h1 id="十一、原型与继承"><a href="#十一、原型与继承" class="headerlink" title="十一、原型与继承"></a>十一、原型与继承</h1><h2 id="1-基础api"><a href="#1-基础api" class="headerlink" title="1. 基础api"></a>1. 基础api</h2><h3 id="1-1-getPrototypeOf"><a href="#1-1-getPrototypeOf" class="headerlink" title="1.1 getPrototypeOf"></a>1.1 getPrototypeOf</h3><ul>
<li><p>获取某个对象的原型</p>
</li>
<li><p>用法：<code>Object.getPrototypeOf(object)</code></p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组</span></span><br><span class="line"><span class="keyword">let</span> a = [<span class="string">&quot;a&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> b = a.concat(<span class="string">&quot;b&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象</span></span><br><span class="line"><span class="keyword">let</span> x = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> y = &#123;<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数组的原型一样</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(a) == <span class="built_in">Object</span>.getPrototypeOf(b)); <span class="comment">//true</span></span><br><span class="line"><span class="comment">//对象的原型一样</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(x) == <span class="built_in">Object</span>.getPrototypeOf(y)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-isPrototypeOf"><a href="#1-2-isPrototypeOf" class="headerlink" title="1.2 isPrototypeOf"></a>1.2 isPrototypeOf</h3><ul>
<li><p>测试一个对象是否存在于另一个对象的原型链上</p>
</li>
<li><p>用法：<code>prototypeObj.isPrototypeOf(object)</code></p>
</li>
</ul>
<h3 id="1-3-hasOwnProperty"><a href="#1-3-hasOwnProperty" class="headerlink" title="1.3 hasOwnProperty"></a>1.3 hasOwnProperty</h3><ul>
<li>返回一个布尔值</li>
<li>指示对象自身属性中是否具有指定的属性（也就是，是否有指定的键）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> object1 = &#123;&#125;;</span><br><span class="line">object1.property1 = <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(object1.hasOwnProperty(<span class="string">&#x27;property1&#x27;</span>));</span><br><span class="line"><span class="comment">// expected output: true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(object1.hasOwnProperty(<span class="string">&#x27;toString&#x27;</span>));</span><br><span class="line"><span class="comment">// expected output: false</span></span><br></pre></td></tr></table></figure>

<h3 id="1-4-create"><a href="#1-4-create" class="headerlink" title="1.4 create"></a>1.4 create</h3><ul>
<li><p><strong><code>Object.create()</code><strong>方法创建一个新对象，使用</strong>现有的对象</strong>来<strong>提供新创建的对象</strong>的__proto__</p>
</li>
<li><p>语法：<code>Object.create(proto，[propertiesObject])</code>第二个参数为可选项</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">isHuman</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">printIntroduction</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`My name is <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>. Am I human? <span class="subst">$&#123;<span class="built_in">this</span>.isHuman&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//这是最原始的定义对象的形式，只是我们省略了直接进行创建了而已</span></span><br><span class="line"><span class="keyword">const</span> me = <span class="built_in">Object</span>.create(person);</span><br><span class="line"></span><br><span class="line">me.name = <span class="string">&#x27;Matthew&#x27;</span>; <span class="comment">// &quot;name&quot; is a property set on &quot;me&quot;, but not on &quot;person&quot;</span></span><br><span class="line">me.isHuman = <span class="literal">true</span>; <span class="comment">// inherited properties can be overwritten</span></span><br><span class="line"></span><br><span class="line">me.printIntroduction();</span><br><span class="line"><span class="comment">// expected output: &quot;My name is Matthew. Am I human? true&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//me本身是没有hasOwnProperty这个方法的，是me原型上有这个方法</span></span><br><span class="line">me.hasOwnProperty(<span class="string">&#x27;name&#x27;</span>)<span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>创建一个没有原型的对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> test = <span class="built_in">Object</span>.create(<span class="literal">null</span>, &#123;</span><br><span class="line">    <span class="attr">name</span>: &#123;</span><br><span class="line">         <span class="attr">value</span>: <span class="string">&quot;张三&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">test.hasOwnProperty(<span class="string">&#x27;name&#x27;</span>)<span class="comment">//hasOwnProperty不是一个函数，因为test没有原型对象</span></span><br></pre></td></tr></table></figure>

<h3 id="1-5-proto"><a href="#1-5-proto" class="headerlink" title="1.5 __proto__"></a>1.5 <code>__proto__</code></h3><p>给原型追加属性或者方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给a对象自身追加属性</span></span><br><span class="line">a.name=<span class="string">&quot;张三&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//给a对象自身追加方法</span></span><br><span class="line">a.hi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;a自身的hi方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给a对象原型追加方法</span></span><br><span class="line">a.__proto__.hi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&quot;a原型的hi方法&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//就近原则，如果有，则用自身，否则向原型进行搜索，直到顶层</span></span><br><span class="line">a.hi()<span class="comment">//a自身的hi方法</span></span><br></pre></td></tr></table></figure>

<p>非自定义构造函数（类）创建</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">23</span>, <span class="string">&quot;jj&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(a.__proto__ == <span class="built_in">Array</span>.prototype); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> <span class="built_in">Object</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态赋方法</span></span><br><span class="line">c.hi = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;hi方法&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原型追加方法</span></span><br><span class="line">c.__proto__.say = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;say方法&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(c.__proto__ == <span class="built_in">Object</span>.prototype); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/%E7%AE%80%E5%8D%95%E7%B1%BB%E5%9E%8B%E5%88%9B%E5%BB%BA.png" alt="image-20220105144818542"></p>
<p>一般来说，<strong>简单类型</strong>对象进行创建时，可以直接在其<strong>本身获得</strong>相应的<strong>方法或者属性</strong>，而由函数（构造函数）、类创建的对象则是将<strong>属性</strong>直接赋予实例本身，<strong>方法</strong>则在其原型上【减少开销，避免每生产一个对象就另外开辟一个空间，而是选择继承】</p>
<h3 id="1-6-proto-amp-prototype"><a href="#1-6-proto-amp-prototype" class="headerlink" title="1.6 __proto__ &amp; prototype"></a>1.6 <code>__proto__ &amp; prototype</code></h3><ul>
<li><p><code>__proto__</code>服务于一个<em><strong>具体的对象</strong></em>【直接创建的对象/由构造函数或者类实例化出来的对象】，可以称之为对象的<strong>隐式原型</strong>，我们可以直接在这种类型的对象上<strong>追加属性</strong>或者<strong>方法</strong></p>
</li>
<li><p><strong>prototype</strong>服务于“抽象的对象”，例如构造函数本身（Array、Object、String、Number、Boolean、Date自定义构造函数），其中<code>实例对象.__proto__==抽象对象.prototype</code>，也可以称之为<strong>显示原型</strong></p>
</li>
<li><p>谷歌浏览器中如果直接打印对象的话会直接显示<code>[[Prototype]]:显示原型</code></p>
<ul>
<li><p>由String、Number、Boolean、Array、Object<strong>关键字</strong>===&gt;打印直接显示<code>[[Prototype]]:Array/Object</code>，同时<code>xxx instanceof Object/Array/Boolean/String/Number===true</code>，其中<strong>所有由关键字创建</strong>的都属于Object，即<code>xxx instanceof Object===true</code></p>
</li>
<li><p>或者直接创建<strong>数组</strong>或者<strong>对象</strong>===&gt;打印直接显示<code>[[Prototype]]:Array/Object</code>，同时<code>xxx instanceof Object/Array===true</code></p>
</li>
<li><p>字面量创建的Number，Boolean，String则<strong>不会</strong>打印原型，且<code>xxx instanceof Number/Boolean/String===false</code>，即非对象实例，因此返回 false</p>
</li>
<li><p>由构造函数创建的对象，不要直接看控制台中的<code>[[Prototype]]:xxx</code>，实际上的prototype是<code>constructor</code>的属性值，同时和constructor同一级的就是该实例对象的原型上的方法【属性在实例对象本身，方法在实例对象的原型上】</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//我们只是遵循约定将构造函数首字母进行大写，其实大小写无关紧要</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.dir(test);</span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> test()</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(a.__proto__ == test.prototype); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.dir(Test);</span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> Test()</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="built_in">console</span>.log(b.__proto__ == Test.prototype); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%8E%9F%E5%9E%8B.png" alt="image-20220105105051028"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">sex</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">introduction</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`我是<span class="subst">$&#123;<span class="built_in">this</span>.sex&#125;</span>的`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">course, sex</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(sex)</span><br><span class="line">        <span class="built_in">this</span>.course = course</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">teach</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.introduction()</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`我教<span class="subst">$&#123;<span class="built_in">this</span>.course&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> test = <span class="keyword">new</span> Teacher(<span class="string">&quot;地理&quot;</span>, <span class="string">&quot;男&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(test);</span><br><span class="line">test.teach()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(test.__proto__ == Teacher.prototype); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(test.__proto__ == Person.prototype); <span class="comment">//false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>谷歌浏览器对应查看方法如下：</p>
<p><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/%E5%8E%9F%E5%9E%8B%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9F%A5%E7%9C%8B.png" alt="image-20220105142036051"></p>
<h3 id="1-7-instanceof"><a href="#1-7-instanceof" class="headerlink" title="1.7 instanceof"></a>1.7 instanceof</h3><p><strong><code>instanceof</code></strong> <strong>运算符</strong>用于检测构造函数的 <code>prototype</code> 属性是否出现在某个实例对象的原型链上。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = []</span><br><span class="line"><span class="keyword">let</span> b = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;JIAN&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(a <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(b <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(b <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(c <span class="keyword">instanceof</span> <span class="built_in">String</span>); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(c <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>



<h2 id="2-原型基础"><a href="#2-原型基础" class="headerlink" title="2. 原型基础"></a>2. 原型基础</h2><h3 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h3><p>每个对象都有一个原型<code>prototype</code>对象，通过函数创建的对象也将拥有这个原型对象。原型是一个指向对象的指针。</p>
<ul>
<li>可以将原型理解为对象的父亲，对象从原型对象继承来属性</li>
<li>使用原型对象为多个对象共享属性或方法</li>
<li>如果对象本身不存在属性或方法将到原型上查找</li>
<li>使用原型可以解决，通过构建函数创建对象时复制多个函数造成的内存占用问题</li>
<li>原型包含 <code>constructor</code> 属性，指向构造函数</li>
</ul>
<p>下例使用的就是<strong>数组原型对象</strong>的 <code>concat</code> 方法完成的连接操作</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组</span></span><br><span class="line"><span class="keyword">let</span> a = [<span class="string">&quot;a&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> b = a.concat(<span class="string">&quot;b&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象</span></span><br><span class="line"><span class="keyword">let</span> x = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> y = &#123;<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数组的原型一样</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(a) == <span class="built_in">Object</span>.getPrototypeOf(b)); <span class="comment">//true</span></span><br><span class="line"><span class="comment">//对象的原型一样</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(x) == <span class="built_in">Object</span>.getPrototypeOf(y)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>数组的原型对象【两层】：</p>
<ul>
<li><code>[[Prototype]] : Array</code></li>
<li><code>[[Prototype]] : Object</code></li>
</ul>
<p>对象的原型对象【一层】：</p>
<ul>
<li><code>[[Prototype]] : Object</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组的原型一样</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(a) == <span class="built_in">Object</span>.getPrototypeOf(b)); <span class="comment">//true</span></span><br><span class="line"><span class="comment">//对象的原型一样</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(x) == <span class="built_in">Object</span>.getPrototypeOf(y)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>web</category>
        <category>js</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js常用技巧</title>
    <url>/2022/05/02/2022/js_skills/</url>
    <content><![CDATA[<h2 id="1-初始化数组"><a href="#1-初始化数组" class="headerlink" title="1. 初始化数组"></a>1. 初始化数组</h2><p>初始化一维数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr=<span class="built_in">Array</span>(<span class="number">5</span>).fill(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>初始化二维数组</p>
<p>fill方法可以不传参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr=<span class="built_in">Array</span>(<span class="number">5</span>).fill().map(<span class="function">()=&gt;</span><span class="built_in">Array</span>(<span class="number">5</span>).fill(<span class="number">0</span>))</span><br></pre></td></tr></table></figure>

<h2 id="2-reduce求和、极值"><a href="#2-reduce求和、极值" class="headerlink" title="2. reduce求和、极值"></a>2. reduce求和、极值</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">6</span>]</span><br><span class="line"><span class="keyword">let</span> sum = arr.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b)</span><br><span class="line"><span class="keyword">let</span> min = arr.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a &gt; b ? b : a)</span><br><span class="line"><span class="keyword">let</span> max = arr.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a &gt; b ? a : b)</span><br></pre></td></tr></table></figure>

<h2 id="3-Math求极值"><a href="#3-Math求极值" class="headerlink" title="3. Math求极值"></a>3. Math求极值</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">Math</span>.max(...arr)</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//9</span></span><br><span class="line"></span><br><span class="line">b = <span class="built_in">Math</span>.min(...arr)</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">//1</span></span><br></pre></td></tr></table></figure>

<h2 id="4-排序"><a href="#4-排序" class="headerlink" title="4. 排序"></a>4. 排序</h2><p>数组经过排序后<strong>原数组会发生改变</strong>，同时数组排序也会返回一个数组，这个数组就是<strong>原数组</strong>经过排序后的数组</p>
<p>排序数值型数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">8</span>]</span><br><span class="line"><span class="keyword">let</span> a = arr.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line"><span class="built_in">console</span>.log(a === arr); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>排序字符串数组【根据ASCII值来进行排序】</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> stringArr = [<span class="string">&quot;Joe&quot;</span>, <span class="string">&quot;Kapil&quot;</span>, <span class="string">&quot;Steve&quot;</span>, <span class="string">&quot;Musk&quot;</span>]</span><br><span class="line">stringArr.sort();</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">[<span class="string">&quot;Joe&quot;</span>, <span class="string">&quot;Kapil&quot;</span>, <span class="string">&quot;Musk&quot;</span>, <span class="string">&quot;Steve&quot;</span>]</span><br><span class="line">stringArr.reverse();</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">[<span class="string">&quot;Steve&quot;</span>, <span class="string">&quot;Musk&quot;</span>, <span class="string">&quot;Kapil&quot;</span>, <span class="string">&quot;Joe&quot;</span>]</span><br></pre></td></tr></table></figure>

<h2 id="5-从数组中过滤出虚假值"><a href="#5-从数组中过滤出虚假值" class="headerlink" title="5. 从数组中过滤出虚假值"></a>5. 从数组中过滤出虚假值</h2><p><code>0</code>，<code>undefined</code>，<code>null</code>，<code>false</code>，<code>&quot;&quot;</code>，<code>&#39;&#39;</code>可以很容易地通过以下方法省略</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">3</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="string">&#x27;&#x27;</span>, <span class="literal">false</span>];</span><br><span class="line"><span class="keyword">let</span> a = array.filter(<span class="built_in">Boolean</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//</span></span><br></pre></td></tr></table></figure>

<h2 id="6-对各种条件使用逻辑运算符"><a href="#6-对各种条件使用逻辑运算符" class="headerlink" title="6. 对各种条件使用逻辑运算符"></a>6. 对各种条件使用逻辑运算符</h2><p>使用逻辑运算符可以减少嵌套 <code>if…else </code>或 <code>switch case</code>，可以简单地使用基本的逻辑运算符<code>AND/OR</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">arg1</span>) </span>&#123;</span><br><span class="line">    arg1 = arg1 || <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 如果尚未设置，则将 arg1 设置为 10 作为默认值</span></span><br><span class="line">    <span class="keyword">return</span> arg1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> foo = <span class="number">10</span>;</span><br><span class="line">foo === <span class="number">10</span> &amp;&amp; <span class="built_in">console</span>.log(doSomething(<span class="number">32</span>)); <span class="comment">//32</span></span><br><span class="line">foo === <span class="number">5</span> &amp;&amp; <span class="built_in">console</span>.log(doSomething()); <span class="comment">// 不执行函数</span></span><br><span class="line">foo === <span class="number">5</span> || <span class="built_in">console</span>.log(doSomething()); <span class="comment">// 10</span></span><br><span class="line">foo === <span class="number">10</span> || <span class="built_in">console</span>.log(doSomething(<span class="number">12</span>)); <span class="comment">// 不执行函数</span></span><br></pre></td></tr></table></figure>

<h2 id="7-数组去重"><a href="#7-数组去重" class="headerlink" title="7. 数组去重"></a>7. 数组去重</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">5</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> out = array.filter(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> arr.indexOf(item) === index);</span><br><span class="line"><span class="built_in">console</span>.log(out);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> unique = [...new <span class="built_in">Set</span>(array)];</span><br><span class="line"><span class="built_in">console</span>.log(unique);</span><br></pre></td></tr></table></figure>

<h2 id="8-创建计数器"><a href="#8-创建计数器" class="headerlink" title="8. 创建计数器"></a>8. 创建计数器</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> string = <span class="string">&#x27;kapilalipak&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法1</span></span><br><span class="line"><span class="keyword">const</span> table = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> char <span class="keyword">of</span> string) &#123;</span><br><span class="line">    table[char] = table[char] + <span class="number">1</span> || <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(table); <span class="comment">//&#123; k: 2, a: 3, p: 2, i: 2, l: 2 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法2</span></span><br><span class="line"><span class="keyword">const</span> countMap = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; string.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (countMap.has(string[i])) &#123;</span><br><span class="line">        countMap.set(string[i], countMap.get(string[i]) + <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        countMap.set(string[i], <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(countMap) <span class="comment">//Map(5) &#123; &#x27;k&#x27; =&gt; 2, &#x27;a&#x27; =&gt; 3, &#x27;p&#x27; =&gt; 2, &#x27;i&#x27; =&gt; 2, &#x27;l&#x27; =&gt; 2 &#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="9-巧用三元运算符"><a href="#9-巧用三元运算符" class="headerlink" title="9. 巧用三元运算符"></a>9. 巧用三元运算符</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Lottery</span>(<span class="params">number</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> number &gt; <span class="number">97</span> ? <span class="string">&#x27;Beautiful&#x27;</span> :</span><br><span class="line">        number &lt; <span class="number">97</span> ? <span class="string">&#x27;Once Again!!&#x27;</span> : <span class="string">&#x27;You Got It&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Lottery(<span class="number">98</span>)); <span class="comment">// Beautiful</span></span><br><span class="line"><span class="built_in">console</span>.log(Lottery(<span class="number">97</span>)); <span class="comment">// You Got It</span></span><br><span class="line"><span class="built_in">console</span>.log(Lottery(<span class="number">88</span>)); <span class="comment">// Once Again!!</span></span><br></pre></td></tr></table></figure>

<h2 id="10-合并对象或数组"><a href="#10-合并对象或数组" class="headerlink" title="10. 合并对象或数组"></a>10. 合并对象或数组</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [...arr1, ...arr2]</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    ...obj1,</span><br><span class="line">    ...obj2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [ 1, 2, 3, 4, 5, 6 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; name: &#x27;zs&#x27;, age: 18 &#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="11-打乱数组顺序"><a href="#11-打乱数组顺序" class="headerlink" title="11. 打乱数组顺序"></a>11. 打乱数组顺序</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="keyword">let</span> arr_ = arr.sort(<span class="function">() =&gt;</span> <span class="built_in">Math</span>.random() - <span class="number">0.5</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr_);</span><br></pre></td></tr></table></figure>

<h2 id="12-可选链操作符"><a href="#12-可选链操作符" class="headerlink" title="12. 可选链操作符?."></a>12. 可选链操作符?.</h2><p>克服以往如果将一个不存在的属性值赋值给一个变量时会报错，此时使用<strong>可选链操作符</strong>将会把<code>undefined</code>值赋值给它。</p>
<p>只有当a存在，同时a具有name属性的时候，才会把值赋给b，否则就会将undefined赋值给b。重要的是，a是否有name属性，这么做都不会报错。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;zsh&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = a ?.name?.age</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a=&#123;</span><br><span class="line">    <span class="attr">name</span>:&#123;<span class="attr">alis</span>:<span class="string">&#x27;zsh&#x27;</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = a ?.name?.alis</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// zsh</span></span><br><span class="line"><span class="keyword">let</span> c = a ?.name?.other <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>

<h2 id="13-空值合并运算符"><a href="#13-空值合并运算符" class="headerlink" title="13. 空值合并运算符??"></a>13. 空值合并运算符??</h2><p><code>??</code> 这个和 <code>||</code> 很像，但是它<strong>不会屏蔽掉false和 0</strong>，即在未定义时来用最为恰当，其余地方使用<code>||</code>即可。【当a除了undefined、或者null之外的任何值，都会将a的值赋值给b，否则就将??右侧的值赋值给b】</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a=<span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> b=a??<span class="string">&#x27;cc&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">//0</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a=<span class="literal">false</span></span><br><span class="line"><span class="keyword">let</span> b=a??<span class="string">&#x27;cc&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a=<span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> b=a||<span class="string">&#x27;cc&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">//&#x27;cc&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="14-逻辑空赋值"><a href="#14-逻辑空赋值" class="headerlink" title="14. 逻辑空赋值"></a>14. 逻辑空赋值</h2><p>当<code>??=</code>左侧的值为null、undefined的时候,才会将右侧变量的值赋值给左侧变量，其他所有值都不会进行赋值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a=<span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> b=<span class="literal">null</span></span><br><span class="line"><span class="keyword">let</span> c=<span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> d =<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">b ??= a</span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">c ??=a</span><br><span class="line"><span class="built_in">console</span>.log(c) <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line">d ??=a</span><br><span class="line"><span class="built_in">console</span>.log(d) <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<h2 id="15-默认参数"><a href="#15-默认参数" class="headerlink" title="15. 默认参数"></a>15. 默认参数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> search = <span class="function">(<span class="params">arr, low=<span class="number">0</span>,high=arr.length-<span class="number">1</span></span>) =&gt;</span> high</span><br><span class="line"><span class="built_in">console</span>.log(search([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])) <span class="comment">//4</span></span><br></pre></td></tr></table></figure>

<h2 id="16-arguments"><a href="#16-arguments" class="headerlink" title="16. arguments"></a>16. arguments</h2><p>arguments为函数中的关键字，值得注意的是，<strong>箭头函数</strong>中使用<strong>arguments</strong>是会<strong>报错</strong>的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>); <span class="comment">//[Arguments] &#123; &#x27;0&#x27;: 2, &#x27;1&#x27;: 34, &#x27;2&#x27;: 1 &#125;，arguments也有length属性</span></span><br><span class="line">    <span class="built_in">console</span>.log([...arguments]); <span class="comment">//[ 2, 34, 1 ]</span></span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">2</span>, <span class="number">34</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h2 id="17-十进制-gt-二进制-十六进制"><a href="#17-十进制-gt-二进制-十六进制" class="headerlink" title="17. 十进制==&gt;二进制/十六进制"></a>17. 十进制==&gt;二进制/十六进制</h2><p>使用<code>toString</code>方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">19</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换为16进制</span></span><br><span class="line"><span class="keyword">let</span> b = a.toString(<span class="number">16</span>)</span><br><span class="line"><span class="built_in">console</span>.log(b);<span class="comment">//13</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换为2进制</span></span><br><span class="line"><span class="keyword">let</span> c = a.toString(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(c);<span class="comment">//10011</span></span><br></pre></td></tr></table></figure>

<h2 id="18-判断回文字符"><a href="#18-判断回文字符" class="headerlink" title="18. 判断回文字符"></a>18. 判断回文字符</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPalindrome</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str == str.split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(isPalindrome(<span class="string">&#x27;ana&#x27;</span>));</span><br></pre></td></tr></table></figure>

<h2 id="19-使用Object属性转成属性数组"><a href="#19-使用Object属性转成属性数组" class="headerlink" title="19. 使用Object属性转成属性数组"></a>19. 使用Object属性转成属性数组</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zsh&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(a)); <span class="comment">//[ &#x27;name&#x27;, &#x27;age&#x27; ]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(a)); <span class="comment">//[ &#x27;zsh&#x27;, 18 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries(a)); <span class="comment">//[ [ &#x27;name&#x27;, &#x27;zsh&#x27; ], [ &#x27;age&#x27;, 18 ] ] </span></span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="built_in">Map</span>(<span class="built_in">Object</span>.entries(a))</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">//Map(2) &#123; &#x27;name&#x27; =&gt; &#x27;zsh&#x27;, &#x27;age&#x27; =&gt; 18 &#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="20-使用解构简单交换两值"><a href="#20-使用解构简单交换两值" class="headerlink" title="20. 使用解构简单交换两值"></a>20. 使用解构简单交换两值</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line">[a, b] = [b, a]</span><br><span class="line"><span class="built_in">console</span>.log(a, b); <span class="comment">//2,3</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>interview</title>
    <url>/2022/10/31/2022/interview/</url>
    <content><![CDATA[<h1 id="一、JS-常见考点"><a href="#一、JS-常见考点" class="headerlink" title="一、JS 常见考点"></a>一、JS 常见考点</h1><h2 id="1-防抖-节流"><a href="#1-防抖-节流" class="headerlink" title="1. 防抖/节流"></a>1. 防抖/节流</h2><ul>
<li>防抖：多次触发，只执行一次———&gt;关注<strong>结果</strong></li>
<li>节流：每个时间段，只执行一次———-&gt;关注<strong>过程</strong></li>
</ul>
<p>防抖代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;input&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> input = <span class="built_in">document</span>.getElementById(<span class="string">&quot;input&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(input);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> debounce = <span class="function">(<span class="params">fn, delay</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> timer = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (timer) <span class="built_in">clearTimeout</span>(timer);</span></span><br><span class="line"><span class="javascript">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          fn();</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 定时器记得清零</span></span></span><br><span class="line"><span class="javascript">          timer = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">        &#125;, delay);</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">    input.addEventListener(</span></span><br><span class="line"><span class="javascript">      <span class="string">&quot;keyup&quot;</span>,</span></span><br><span class="line"><span class="javascript">      debounce(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(input.value);</span></span><br><span class="line"><span class="javascript">      &#125;, <span class="number">1000</span>)</span></span><br><span class="line"><span class="javascript">    );</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>节流代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">    <span class="attr">draggable</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">&quot;width: 200px;height: 200px;background:red;&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> throttle = <span class="function">(<span class="params">fn, delay</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> timer = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (timer) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          fn(e);</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 定时器记得清零</span></span></span><br><span class="line"><span class="javascript">          timer = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">        &#125;, delay);</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="javascript">    div.addEventListener(</span></span><br><span class="line"><span class="javascript">      <span class="string">&quot;drag&quot;</span>,</span></span><br><span class="line"><span class="javascript">      throttle(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(e.offsetX);</span></span><br><span class="line"><span class="javascript">      &#125;, <span class="number">1000</span>)</span></span><br><span class="line"><span class="javascript">    );</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-订阅与发布"><a href="#2-订阅与发布" class="headerlink" title="2. 订阅与发布"></a>2. 订阅与发布</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="class"><span class="keyword">class</span> <span class="title">EventEmitter</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.cache = &#123;&#125;;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 暴露订阅功能，fn为发布时的行为回调</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">on</span>(<span class="params">name, fn</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (<span class="built_in">this</span>.cache[name]) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.cache[name].push(fn);</span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.cache[name] = [fn];</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 解除订阅功能(判断fn函数是否与暴露订阅功能时一致，如果一致则移除，否则留下)</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">off</span>(<span class="params">name, fn</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> tasks = <span class="built_in">this</span>.cache[name] || [];</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> index = tasks.findIndex(<span class="function">(<span class="params">f</span>) =&gt;</span> f === fn);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">        tasks.splice(index, <span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 发布（真正发布）</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">emit</span>(<span class="params">name</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> subscribers = <span class="built_in">this</span>.cache[name] || [];</span></span><br><span class="line"><span class="javascript">      subscribers.forEach(<span class="function">(<span class="params">el</span>) =&gt;</span> el());</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 准备</span></span></span><br><span class="line"><span class="javascript">  listen = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&quot;A subscribes to a book&quot;</span>);</span></span><br><span class="line"><span class="javascript">  &#125;;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 实例化：</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> instance = <span class="keyword">new</span> EventEmitter();</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 1、开始订阅书籍</span></span></span><br><span class="line"><span class="javascript">  instance.on(<span class="string">&quot;book&quot;</span>, listen);</span></span><br><span class="line"><span class="javascript">  instance.on(<span class="string">&quot;book&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&quot;B subscribes to a book&quot;</span>);</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 2、发布消息【发布后有订阅book的所有用户都会收到消息】</span></span></span><br><span class="line"><span class="javascript">  instance.emit(<span class="string">&quot;book&quot;</span>); <span class="comment">// &#x27;A subscribes to a book&#x27;,&#x27;B subscribes to a book&#x27;</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 3、某人取消订阅</span></span></span><br><span class="line"><span class="javascript">  instance.off(<span class="string">&quot;book&quot;</span>, listen);</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 4、再次发布消息【有人取消订阅book后发布时只会通知其他订阅了book的用户】</span></span></span><br><span class="line"><span class="javascript">  instance.emit(<span class="string">&quot;book&quot;</span>); <span class="comment">// &#x27;B subscribes to a book&#x27;</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-ajax-创建过程"><a href="#3-ajax-创建过程" class="headerlink" title="3. ajax 创建过程"></a>3. ajax 创建过程</h2><p>关键点</p>
<ol>
<li>new XMLHttpRequest()</li>
<li>设置请求参数 open()</li>
<li>发送请求 request.send()</li>
<li>响应 request.onreadystatechange</li>
</ol>
<p>标准回答</p>
<p>创建 ajax 过程：</p>
<ol>
<li><p>创建 XHR 对象：new XMLHttpRequest()</p>
</li>
<li><p>设置请求参数：request.open(Method, 服务器接口地址)；</p>
</li>
<li><p>发送请求: request.send()，如果是 get 请求不需要参数，post 请求需要参数 request.send(data)</p>
</li>
<li><p>监听请求成功后的状态变化：根据状态码进行相应的处理。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">XHR.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (XHR.readyState == <span class="number">4</span> &amp;&amp; XHR.status == <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(XHR.responseText); <span class="comment">// 主动释放,JS本身也会回收的 XHR = null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>加分回答：</p>
<p>POST 请求需要设置请求头</p>
<p>readyState 值说明 0：初始化，XHR 对象已经创建，还未执行。</p>
<p>open 方法说明</p>
<p>1：载入,已经调用 open 方法,但是还没发送请求</p>
<p>2：载入完成,请求已经发送完成</p>
<p>3：交互，可以接收到部分数据</p>
<p>4：数据全部返回， status 值说明 ：</p>
<p>​ 200：成功</p>
<p>​ 404：没有发现文件、查询或 URl</p>
<p>​ 500：服务器产生内部错误</p>
</li>
</ol>
<h3 id="ajax-获取文本示例"><a href="#ajax-获取文本示例" class="headerlink" title="ajax 获取文本示例"></a>ajax 获取文本示例</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span>点击获取文本内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;txt&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#div&quot;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> txt = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.txt&quot;</span>);</span></span><br><span class="line"><span class="javascript">      div.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">        xhr.open(<span class="string">&quot;get&quot;</span>, <span class="string">&quot;test.txt&quot;</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">        xhr.onreadystatechange = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="javascript">            txt.innerHTML = xhr.responseText;</span></span><br><span class="line"><span class="javascript">          &#125;</span></span><br><span class="line"><span class="javascript">        &#125;;</span></span><br><span class="line"><span class="javascript">        xhr.send();</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="ajax-获取图片示例"><a href="#ajax-获取图片示例" class="headerlink" title="ajax 获取图片示例"></a>ajax 获取图片示例</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span>点击获取动图<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;test&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#div&quot;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> img = <span class="built_in">document</span>.querySelector(<span class="string">&quot;img&quot;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> ajaxPromise = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> imgPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">          xhr.open(<span class="string">&quot;get&quot;</span>, <span class="string">&quot;test.gif&quot;</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">          xhr.onreadystatechange = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> ((xhr.readyState = <span class="number">4</span>)) &#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">if</span> (</span></span><br><span class="line"><span class="javascript">                (xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) ||</span></span><br><span class="line"><span class="javascript">                xhr.status === <span class="number">304</span></span></span><br><span class="line"><span class="javascript">              ) &#123;</span></span><br><span class="line"><span class="javascript">                resolve(xhr.responseURL);</span></span><br><span class="line"><span class="javascript">              &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                reject(<span class="keyword">new</span> <span class="built_in">Error</span>(xhr.statusText));</span></span><br><span class="line"><span class="javascript">              &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">          &#125;;</span></span><br><span class="line"><span class="javascript">          xhr.send();</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> imgPromise;</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">      div.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        ajaxPromise()</span></span><br><span class="line"><span class="javascript">          .then(<span class="function">(<span class="params">el</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            img.src = el;</span></span><br><span class="line"><span class="javascript">          &#125;)</span></span><br><span class="line"><span class="javascript">          .catch(<span class="function">(<span class="params">statusText</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            statusText;</span></span><br><span class="line"><span class="javascript">          &#125;);</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-事件循环（event-loop）"><a href="#4-事件循环（event-loop）" class="headerlink" title="4. 事件循环（event loop）"></a>4. 事件循环（event loop）</h2><p>js 是单线程的，主线程在执行时会不断循环往复的从<strong>同步队列</strong>中读取任务，执行任务，当同步队列执行完毕后再从异步队列中依次执行。</p>
<p>宏任务与微任务都属于异步任务，在执行上<strong>微任务的优先级高于宏任务</strong>，因此每一次都会先执行完微任务再执行宏任务。</p>
<p>宏任务有：定时器，Dom 事件，ajax 事件</p>
<p>微任务有：promise 的<strong>回调</strong>、MutationObserver 的回调 ,process.nextTick。注意：new promise() 中的代码是同步的。</p>
<p>总而言之就是：<strong>同步—&gt;异步</strong>，再细分就是<strong>同步队列—&gt;微任务队列—&gt;宏任务队列</strong></p>
<h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><p><img src="C:\Users\90484\AppData\Roaming\Typora\typora-user-images\image-20220919085714933.png" alt="image-20220919085714933"></p>
<p>并不是要等同步代码执行完成后才开始定时器计时，而是有定时器模块一开始就进行了计时，等待<strong>同步队列以及微任务</strong>完成后就执行已经进行定时了的定时任务。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;同步&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="C:\Users\90484\AppData\Roaming\Typora\typora-user-images\image-20220919093913446.png" alt="image-20220919093913446"></p>
<h3 id="任务共享内存机制"><a href="#任务共享内存机制" class="headerlink" title="任务共享内存机制"></a>任务共享内存机制</h3><p>宏任务不会同时执行，而是进行轮询，逐一执行。</p>
<p><img src="C:\Users\90484\AppData\Roaming\Typora\typora-user-images\image-20220919105018891.png" alt="image-20220919105018891"></p>
<h3 id="进度条轮询"><a href="#进度条轮询" class="headerlink" title="进度条轮询"></a>进度条轮询</h3><p><img src="C:\Users\90484\AppData\Roaming\Typora\typora-user-images\image-20220919110138192.png" alt="image-20220919110138192"></p>
<h3 id="任务分解"><a href="#任务分解" class="headerlink" title="任务分解"></a>任务分解</h3><p>如果同步代码执行时间比较长，就可以考虑将同步代码写成异步形式，不会造成同步代码堵塞。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.time(<span class="string">&quot;runtime&quot;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hd</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= num; i++) &#123;</span><br><span class="line">    count += i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(count);</span><br><span class="line">  <span class="built_in">console</span>.timeEnd(<span class="string">&quot;runtime&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> num = <span class="number">987654321</span>;</span><br><span class="line">hd(num);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;houdunren.com&quot;</span>); <span class="comment">//需要等待上面执行完才会执行</span></span><br></pre></td></tr></table></figure>

<p>分解为微任务形式则不会堵塞</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">hd</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="built_in">Promise</span>.resolve().then(<span class="function">(<span class="params">_</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">      count += num--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;</span><br><span class="line">hd(<span class="number">987654321</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;后盾人&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="5-cookie-session"><a href="#5-cookie-session" class="headerlink" title="5. cookie/session"></a>5. cookie/session</h2><p>浏览器的缓存机制提供了可以将用户数据<strong>存储在客户端</strong>上的方式，可以利用 cookie，session 等<strong>跟服务端</strong>进行<strong>数据交互</strong>。</p>
<p>cookie 和 session 都是用来<strong>跟踪浏览器用户身份</strong>的会话方式。</p>
<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><h4 id="1、保持状态"><a href="#1、保持状态" class="headerlink" title="1、保持状态"></a>1、保持状态</h4><p>cookie 保存在浏览器端，session 保存在服务器端</p>
<h4 id="2、使用方式："><a href="#2、使用方式：" class="headerlink" title="2、使用方式："></a>2、使用方式：</h4><p>cookie 机制：如果不在浏览器中设置过期时间，cookie 被保存在内存中，生命周期随浏览器的关闭而结束，这种 cookie 简称会话 cookie。如果在浏览器中设置了 cookie 的过期时间，cookie 被保存在硬盘中，关闭浏览器后，cookie 数据仍然存在，直到过期时间结束才消失。</p>
<p>Cookie 是服务器发给客户端的特殊信息，cookie 是以文本的方式保存在客户端，每次请求时都带上它</p>
<p>session 机制：当服务器收到请求需要创建 session 对象时，首先会检查客户端请求中是否包含 sessionid。如果有 sessionid，服务器将根据该 id 返回对应 session 对象。如果客户端请求中没有 sessionid，服务器会创建新的 session 对象，并把 sessionid 在本次响应中返回给客户端。通常使用 cookie 方式存储 sessionid 到客户端，在交互中浏览器按照规则将 sessionid 发送给服务器。如果用户禁用 cookie，则要使用 URL 重写，可以通过 response.encodeURL(url) 进行实现；API 对 encodeURL 的结束为，当浏览器支持 Cookie 时，url 不做任何处理；当浏览器不支持 Cookie 的时候，将会重写 URL 将 SessionID 拼接到访问地址后。</p>
<h4 id="3、存储内容："><a href="#3、存储内容：" class="headerlink" title="3、存储内容："></a>3、存储内容：</h4><p>cookie 只能保存字符串类型，以文本的方式；session 通过类似与 Hashtable 的数据结构来保存，能支持任何类型的对象(session 中可含有多个对象)</p>
<h4 id="4、存储的大小："><a href="#4、存储的大小：" class="headerlink" title="4、存储的大小："></a>4、存储的大小：</h4><p>cookie：单个 cookie 保存的数据不能超过 4kb；session 大小没有限制。</p>
<h4 id="5、安全性："><a href="#5、安全性：" class="headerlink" title="5、安全性："></a>5、安全性：</h4><p>cookie：针对 cookie 所存在的攻击：Cookie 欺骗，Cookie 截获；session 的安全性大于 cookie。</p>
<p>原因如下：</p>
<p>（1）sessionID 存储在 cookie 中，若要攻破 session 首先要攻破 cookie；</p>
<p>（2）sessionID 是要有人登录，或者启动 session_start 才会有，所以攻破 cookie 也不一定能得到 sessionID；</p>
<p>（3）第二次启动 session_start 后，前一次的 sessionID 就是失效了，session 过期后，sessionID 也随之失效。</p>
<p>（4）sessionID 是加密的</p>
<p>（5）综上所述，攻击者必须在短时间内攻破加密的 sessionID，这很难。</p>
<h4 id="6、应用场景："><a href="#6、应用场景：" class="headerlink" title="6、应用场景："></a>6、应用场景：</h4><p>cookie：</p>
<p>（1）判断用户是否登陆过网站，以便下次登录时能够实现自动登录（或者记住密码）。如果我们删除 cookie，则每次登录必须从新填写登录的相关信息。</p>
<p>（2）保存上次登录的时间等信息。</p>
<p>（3）保存上次查看的页面</p>
<p>（4）浏览计数</p>
<p><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202204021510199.png"></p>
<p>session：Session 用于保存每个用户的专用信息，变量的值保存在服务器端，通过 SessionID 来区分不同的客户。</p>
<p>（1）网上商城中的购物车</p>
<p>（2）保存用户登录信息</p>
<p>（3）将某些数据放入 session 中，供同一用户的不同页面使用</p>
<p>（4）防止用户非法登录</p>
<h4 id="7、缺点："><a href="#7、缺点：" class="headerlink" title="7、缺点："></a>7、缺点：</h4><p>cookie：</p>
<p>（1）大小受限</p>
<p>（2）用户可以操作（禁用）cookie，使功能受限</p>
<p>（3）安全性较低</p>
<p>（4）有些状态不可能保存在客户端。</p>
<p>（5）每次访问都要传送 cookie 给服务器，浪费带宽。</p>
<p>（6）cookie 数据有路径（path）的概念，可以限制 cookie 只属于某个路径下。</p>
<p>session：</p>
<p>（1）Session 保存的东西越多，就越占用服务器内存，对于用户在线人数较多的网站，服务器的内存压力会比较大。</p>
<p>（2）依赖于 cookie（sessionID 保存在 cookie），如果禁用 cookie，则要使用 URL 重写，不安全</p>
<p>（3）创建 Session 变量有很大的随意性，可随时调用，不需要开发者做精确地处理，所以，过度使用 session 变量将会导致代码不可读而且不好维护。</p>
<h3 id="设置-cookie"><a href="#设置-cookie" class="headerlink" title="设置 cookie"></a>设置 cookie</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie = <span class="string">&quot;name=oeschger&quot;</span>;</span><br><span class="line"><span class="built_in">document</span>.cookie = <span class="string">&quot;favorite_food=tripe&quot;</span>;</span><br><span class="line">alert(<span class="built_in">document</span>.cookie);</span><br><span class="line"><span class="comment">// 显示: name=oeschger;favorite_food=tripe</span></span><br></pre></td></tr></table></figure>

<h3 id="获取-cookie"><a href="#获取-cookie" class="headerlink" title="获取 cookie"></a>获取 cookie</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie = <span class="string">&quot;test1=Hello&quot;</span>;</span><br><span class="line"><span class="built_in">document</span>.cookie = <span class="string">&quot;test2=World&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用正则表示进行获取</span></span><br><span class="line"><span class="keyword">var</span> myCookie = <span class="built_in">document</span>.cookie.replace(</span><br><span class="line">  <span class="regexp">/(?:(?:^|.*;\s*)test2\s*\=\s*([^;]*).*$)|^.*$/</span>,</span><br><span class="line">  <span class="string">&quot;$1&quot;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">alert(myCookie); <span class="comment">// 显示: World</span></span><br></pre></td></tr></table></figure>

<h2 id="6-WebStorage"><a href="#6-WebStorage" class="headerlink" title="6. WebStorage"></a>6. WebStorage</h2><h3 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h3><p>随着互联网的快速发展，基于网页的应用越来越普遍，同时也变得越来越复杂，为了满足各种各样的需求，会经常在本地存储大量的数据，HTML5 规范提出了相关的解决方案。</p>
<p>本地存储特性</p>
<ul>
<li>数据存储在用户浏览器中</li>
<li>设置、读取方便，甚至页面刷新都不会丢失数据</li>
<li>容量较大，sessionStorage 大约 5M，localStorage 约 20M</li>
<li>只能存储字符串，可以将对象经过<code>JSON.stringify(obj)</code>编码后进行存储</li>
</ul>
<h3 id="使用背景"><a href="#使用背景" class="headerlink" title="使用背景"></a>使用背景</h3><p>WebStorage 的目的是<strong>克服由 cookie 所带来的一些限制</strong>，当数据需要被严格控制在客户端时，不需要持续的将数据发回服务器。</p>
<p>WebStorage 两个主要目标：</p>
<p>（1）提供一种在 cookie 之外存储会话数据的路径。</p>
<p>（2）提供一种存储大量可以跨会话存在的数据的机制。</p>
<p>HTML5 的 WebStorage 提供了两种 API：localStorage（本地存储）和 sessionStorage（会话存储）。</p>
<h4 id="1、生命周期："><a href="#1、生命周期：" class="headerlink" title="1、生命周期："></a>1、生命周期：</h4><ul>
<li><p>localStorage:localStorage 的生命周期是永久的，关闭页面或浏览器之后 localStorage 中的数据也不会消失。localStorage 除非主动删除数据，否则数据永远不会消失。</p>
</li>
<li><p>sessionStorage 的生命周期是在仅在当前会话下有效。sessionStorage 引入了一个“浏览器窗口”的概念，sessionStorage 是在同源的窗口中始终存在的数据。只要这个浏览器窗口没有关闭，即使刷新页面或者进入同源另一个页面，数据依然存在。同时独立的打开同一个窗口同一个页面，sessionStorage 也是不一样的。</p>
</li>
</ul>
<h4 id="2、存储大小："><a href="#2、存储大小：" class="headerlink" title="2、存储大小："></a>2、存储大小：</h4><p>localStorage 和 sessionStorage 的存储数据大小一般都是：5MB</p>
<h4 id="3、存储位置："><a href="#3、存储位置：" class="headerlink" title="3、存储位置："></a>3、存储位置：</h4><p>localStorage 和 sessionStorage 都保存在客户端，不与服务器进行交互通信。</p>
<h4 id="4、存储内容类型："><a href="#4、存储内容类型：" class="headerlink" title="4、存储内容类型："></a>4、存储内容类型：</h4><p>localStorage 和 sessionStorage 只能存储字符串类型，对于复杂的对象可以使用 ECMAScript 提供的 JSON 对象的 stringify 和 parse 来处理</p>
<h4 id="5、获取方式："><a href="#5、获取方式：" class="headerlink" title="5、获取方式："></a>5、获取方式：</h4><ul>
<li><p>localStorage：window.localStorage;</p>
</li>
<li><p>sessionStorage：window.sessionStorage;</p>
</li>
</ul>
<h4 id="6、应用场景：-1"><a href="#6、应用场景：-1" class="headerlink" title="6、应用场景："></a>6、应用场景：</h4><ul>
<li>localStoragese：常用于长期登录（+判断用户是否已登录），适合长期保存在本地的数据；</li>
<li>sessionStorage：敏感账号一次性登录；</li>
</ul>
<h4 id="7、WebStorage-的优点："><a href="#7、WebStorage-的优点：" class="headerlink" title="7、WebStorage 的优点："></a>7、WebStorage 的优点：</h4><p>（1）<strong>存储</strong>空间更大：cookie 为 4KB，而 WebStorage 是 5MB；</p>
<p>（2）节省网络<strong>流量</strong>：WebStorage<strong>不会传送到服务器</strong>，存储在本地的数据可以直接获取，也不会像<strong>cookie</strong>一样<strong>每次请求都会传送到服务器</strong>，所以减少了客户端和服务器端的交互，<strong>节省</strong>了网络<strong>流量</strong>；</p>
<p>（3）<strong>针对性强</strong>：对于那种只需要在用户浏览一组页面期间保存而关闭浏览器后就可以丢弃的数据，sessionStorage 会非常方便；</p>
<p>（4）<strong>快速显示</strong>：有的数据存储在 WebStorage 上，再加上浏览器本身的缓存。获取数据时可以从本地获取会比从服务器端获取快得多，所以<strong>速度更快</strong>；</p>
<p>（5）<strong>安全</strong>性：WebStorage 不会随着 HTTP header 发送到服务器端，所以安全性<strong>相对于 cookie</strong>来说比<strong>较高</strong>一些，不会担心截获，但是仍然存在伪造问题；</p>
<p>（6）WebStorage 提供了一些方法，数据操作比 cookie 方便；</p>
<ul>
<li><p>setItem (key, value) —— 保存数据，以键值对的方式储存信息。</p>
</li>
<li><p>getItem (key) —— 获取数据，将键值传入，即可获取到对应的 value 值。</p>
</li>
<li><p>removeItem (key) —— 删除单个数据，根据键值移除对应的信息。</p>
</li>
<li><p>clear () —— 删除所有的数据</p>
</li>
<li><p>key (index) —— 获取某个索引的 key</p>
</li>
</ul>
<h3 id="localStorage-常见-API"><a href="#localStorage-常见-API" class="headerlink" title="localStorage 常见 API"></a>localStorage 常见 API</h3><ul>
<li>声明周期永久有效，除非手动删除，否则关闭页面也会存在</li>
<li>可以多窗口（页面）共享（同一浏览器可以共享）</li>
<li>以键值对的形式进行存储</li>
</ul>
<h4 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">localStorage</span>.setItem(key, value);</span><br></pre></td></tr></table></figure>

<h4 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">localStorage.getItem(key)</span><br></pre></td></tr></table></figure>

<h4 id="删除单条记录"><a href="#删除单条记录" class="headerlink" title="删除单条记录"></a>删除单条记录</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">localStorage.removeItem(key)</span><br></pre></td></tr></table></figure>

<h4 id="删除所有数据"><a href="#删除所有数据" class="headerlink" title="删除所有数据"></a>删除所有数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">localStorage.clear()</span><br></pre></td></tr></table></figure>

<h4 id="记住用户登入案例"><a href="#记住用户登入案例" class="headerlink" title="记住用户登入案例"></a>记住用户登入案例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;remember&quot;</span> /&gt;</span>记住用户名</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> username = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#username&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> remember = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#remember&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (<span class="built_in">localStorage</span>.getItem(<span class="string">&quot;username&quot;</span>)) &#123;</span></span><br><span class="line"><span class="javascript">      username.value = <span class="built_in">localStorage</span>.getItem(<span class="string">&quot;username&quot;</span>);</span></span><br><span class="line"><span class="javascript">      remember.checked = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    remember.addEventListener(<span class="string">&quot;change&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (<span class="built_in">this</span>.checked) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">localStorage</span>.setItem(<span class="string">&quot;username&quot;</span>, username.value);</span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">localStorage</span>.removeItem(<span class="string">&quot;username&quot;</span>);</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="sessionStorage-常见-API"><a href="#sessionStorage-常见-API" class="headerlink" title="sessionStorage 常见 API"></a>sessionStorage 常见 API</h3><ul>
<li>声明周期为关闭浏览器</li>
<li>在同一窗口（页面）下数据可以共享</li>
<li>以键值对的形式进行存储</li>
</ul>
<h4 id="存储数据-1"><a href="#存储数据-1" class="headerlink" title="存储数据"></a>存储数据</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sessionStorage.setItem(key, value);</span><br></pre></td></tr></table></figure>

<h4 id="获取数据-1"><a href="#获取数据-1" class="headerlink" title="获取数据"></a>获取数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sessionStorage.getItem(key)</span><br></pre></td></tr></table></figure>

<h4 id="删除单条记录-1"><a href="#删除单条记录-1" class="headerlink" title="删除单条记录"></a>删除单条记录</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sessionStorage.removeItem(key)</span><br></pre></td></tr></table></figure>

<h4 id="删除所有数据-1"><a href="#删除所有数据-1" class="headerlink" title="删除所有数据"></a>删除所有数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sessionStorage.clear()</span><br></pre></td></tr></table></figure>

<h2 id="7-HTML-语义化"><a href="#7-HTML-语义化" class="headerlink" title="7. HTML 语义化"></a>7. HTML 语义化</h2><p>语义化的好处：</p>
<ol>
<li>代码可读高</li>
<li>有利于 SEO</li>
<li>利于页面内容结构化</li>
</ol>
<p>常见的语义化标签：header、footer、aside、main、nav、article</p>
<ul>
<li><p>对于开发者而言，语义化标签有着更好的页面结构，利于个人的代码编写。</p>
</li>
<li><p>对于用户而言，当网络卡顿时有良好的页面结构，有利于增加用户的体验。</p>
</li>
<li><p>对于爬虫来说，有利于搜索引擎的 SEO 优化，利于网站有更靠前的排名。</p>
</li>
<li><p>对于团队来讲，有利于代码的开发和后期的维护。</p>
</li>
</ul>
<h2 id="8-SSR-CSR"><a href="#8-SSR-CSR" class="headerlink" title="8. SSR/CSR"></a>8. SSR/CSR</h2><h3 id="SSR"><a href="#SSR" class="headerlink" title="SSR"></a>SSR</h3><p>SSR（Server Side Render）是指从服务端侧完成页面 DOM 结构和数据的拼接，然后再发送给浏览器，为其绑定事件和状态，能完成交互的过程。</p>
<p><code>背景</code>：</p>
<ul>
<li>需要更高 SEO（Search Engine Optimization），便于搜索引擎爬虫抓取网站内容的，如博客网站。<ul>
<li>截至目前，Google 和 Bing 可以很好地对<strong>同步</strong> JavaScript 应用进行索引。这里的“同步”是关键词。如果你的应用以一个 loading 动画开始，然后通过 Ajax 获取内容，这是<strong>异步</strong>过程，<strong>爬虫并不会等到内容加载完成再抓取</strong>。也就是说，如果 SEO 对你的页面至关重要，而你的内容又是异步获取的，那么 SSR 可能是必需的。</li>
</ul>
</li>
</ul>
<ul>
<li>提高首屏渲染速度 FMP（First Meaningful Paint），减少白屏时间，提升用户体验。<ul>
<li>这一点在<strong>慢网速</strong>或者<strong>运行缓慢的设备</strong>上尤为重要。服务端渲染的 HTML 无需等到所有的 JavaScript <strong>都下载并执行</strong>完成之后<strong>才显示</strong>，所以你的用户将会更快地看到完整渲染的页面。除此之外，数据获取过程在首次访问时在服务端完成，相比于从客户端获取，可能有更快的数据库连接。这通常可以带来更高的<a href="https://link.juejin.cn/?target=https://web.dev/vitals/">Core Web Vitals</a>评分、更好的用户体验，而对于那些“首屏加载速度与转化率直接相关”的应用来说，这点可能至关重要。</li>
</ul>
</li>
<li>提升低网络和低配置设备上的性能<ul>
<li>有些设备不支持 JavaScript 或 JavaScript 执行得很差，导致用户体验不可接受。对于这些情况，你可能会需要该应用的服务端渲染的、无 JavaScript 的版本。虽然有一些限制，不过这个版本可能是那些完全没办法使用该应用的人的唯一选择。</li>
</ul>
</li>
</ul>
<p><code>优点</code>：</p>
<ul>
<li>搜索引擎爬虫<strong>能爬取完整 HTML</strong>，有利于做<strong>搜索引擎优化</strong>(<strong>SEO</strong>)，提高网站流量和曝光率 ；</li>
<li>首屏渲染在服务端就完成，所以有更快的<strong>首屏加载速度</strong>。只是首屏快，其他页面不像 SPA 一样是无感刷新，切换页面通过超链接进行页面跳转，体验稍差(传统 PHP/JSP)</li>
</ul>
<p><code>缺点</code>：</p>
<ul>
<li>由于是在服务端进行渲染，需要<strong>占用</strong>更多<strong>服务器端资源</strong>(更多的 CPU 和内存)；</li>
<li>由于在服务端渲染，所以有些<strong>浏览器 API 无法使用</strong>，同样地客户端一些生命周期在 SSR 也是不存在的；</li>
<li>部署和开发<strong>要求稍高</strong>，前后端<strong>耦合</strong>。</li>
</ul>
<p><code>使用场景</code>：</p>
<p>一般不会用在公司项目内（涉及前后端分离开发问题），一般用于博客网站、官网、营销类网站等比较<strong>注重加载速度</strong>、<strong>渲染效率</strong>、<strong>SEO 要求高</strong>的场景。</p>
<h3 id="CSR"><a href="#CSR" class="headerlink" title="CSR"></a>CSR</h3><p>自从<strong>ajax</strong>技术兴起，可以在浏览器上加载服务端数据，并且可以在不刷新页面的情况下更新视图。这时，彻底拉开了前后端分离的帷幕，前端和后端可以分开开发，解除耦合。</p>
<h2 id="9-前端优化"><a href="#9-前端优化" class="headerlink" title="9. 前端优化"></a>9. 前端优化</h2><p>前端性能优化分为两类：一类是文件加载更快、另一类是文件渲染更快。</p>
<p><strong>加载</strong>更快的方法：</p>
<ol>
<li>让<strong>传输的数据包更小</strong>（压缩文件/图片）：图片压缩和文件压缩</li>
<li><strong>减少网络请求的次数</strong>：雪碧图/精灵图、节流防抖</li>
<li><strong>减少渲染的次数</strong>：缓存（HTTP 缓存、本地缓存、Vue 的 keep-alive 缓存等）</li>
</ol>
<p><strong>渲染</strong>更快的方法：</p>
<ol>
<li>提前渲染：<strong>SSR</strong>服务器端渲染</li>
<li>避免渲染阻塞：<strong>CSS</strong>放在 HTML 的<strong>head</strong>中， <strong>JS</strong>放在 HTML 的<strong>body 底部</strong></li>
<li>避免无用渲染：懒加载</li>
<li>减少渲染次数：对 dom 查询进行缓存、将 dom 操作合并、使用减少重排的标签</li>
</ol>
<h2 id="10-前后端通讯"><a href="#10-前后端通讯" class="headerlink" title="10. 前后端通讯"></a>10. 前后端通讯</h2><p>前后端一般通过 HTTP 协议进行交互，但 HTTP 协议是基于“问答模式”的，即客户端发起询问，服务端才会响应。但对于一些实时的场景，比如股票趋势图、直播…等，<u>服务端更新数据的速度很快，如果每次都要客户端询问</u><u>，这样传输数据的效率十分低下，所以得通过其它交互模式支持实时通信</u>。</p>
<p>实现实时通信有以下几种方式：</p>
<h3 id="1-短轮询："><a href="#1-短轮询：" class="headerlink" title="1. 短轮询："></a>1. 短轮询：</h3><p>客户端设置定时器，每隔几秒就向服务端发送请求，通过频繁地请求到达实时的效果。这种方式要求服务器的响应速度很快。</p>
<p>优缺点如下：</p>
<ul>
<li>优点就是<strong>实现简单</strong>，无需做过多的更改。</li>
<li>每次发送请求都会有 Http 的 Header，会很<strong>耗流量</strong>，也会<strong>消耗 CPU</strong>的利用率。</li>
<li>缺点是轮询的间隔<strong>过长</strong>，会导致用户不能及时接收到更新的数据；</li>
<li>轮询的间隔<strong>过短</strong>，会导致查询请求过多，增加服务器端的负担</li>
</ul>
<h3 id="2-长轮询："><a href="#2-长轮询：" class="headerlink" title="2. 长轮询："></a>2. 长轮询：</h3><p>长轮询是对轮询的改进版，客户端和服务端保持一条长连接，一旦服务端有新的数据，不等客户端请求就会主动发送给客户端。这种方式要求服务器有高并发能力。</p>
<p>优缺点如下：</p>
<ul>
<li>较短轮询在某种程度上<strong>减小了网络带宽</strong>和<strong>CPU 利用率</strong>等问题；</li>
<li>做了优化，有较好的<strong>时效性</strong>；</li>
<li>缺点是保持连接会<strong>消耗资源</strong>。</li>
</ul>
<h3 id="3-WebSocket"><a href="#3-WebSocket" class="headerlink" title="3. WebSocket"></a>3. WebSocket</h3><p>WebSocket 是类似 Socket 的 TCP 长连接的通讯模式，一旦 WebSocket 连接建立后，后续数据都以帧序列的形式传输。在客户端断开 WebSocket 连接或 Server 端断掉连接前，不需要客户端和服务端重新发起连接请求；</p>
<p>WebSocket 是一种<strong>全双工通信协议</strong>，客户端和服务端处于<strong>相同的地位</strong>。通过客户端与服务端建立的 HTTP 连接进行切换，客户端会发送一个带 update:websocket 字段的 HTTP 请求请求协议切换，服务端会回复带 101 状态码的响应表示协议切换成功。接着它们使用 websocket 进行通信，一旦有新的数据服务端可以直接发送给客户端。</p>
<p>优缺点如下：</p>
<ul>
<li>在海量并发和客户端与服务器交互负载流量大的情况下，极大的<strong>节省了网络带宽</strong>资源的消耗，有明显的性能优势；</li>
<li>客户端发送和接受消息是在同一个持久连接上发起，<strong>实时性</strong>优势明显。</li>
<li>缺点是浏览器支持程度不一致，<strong>不支持断开重连</strong>。</li>
</ul>
<h3 id="4-iframe"><a href="#4-iframe" class="headerlink" title="4. iframe"></a>4. iframe</h3><p>iframe 流方式是在页面中插入一个隐藏的 iframe，利用其 src 属性在服务器和客户端之间创建一条长连接，服务器向 iframe 传输数据（通常是 HTML，内有负责插入信息的 javascript），来实时更新页面。</p>
<p>优缺点如下：</p>
<ul>
<li>消息能够<strong>实时到达</strong>；</li>
<li>浏览器<strong>兼容好</strong>；</li>
<li>移动端<strong>兼容差</strong></li>
<li>服务器维护一个长连接会<strong>增加开销</strong>；</li>
<li><strong>代码复杂</strong>，搜索引擎爬虫还不能很好的处理 iframe 中的内容，使用 iframe 会<strong>不利于搜索引擎优化</strong>（SEO）。</li>
<li>IE、chrome、Firefox 会显示加载没有完成，图标会不停旋转。</li>
</ul>
<h3 id="5-SSE-Server-Sent-Event-："><a href="#5-SSE-Server-Sent-Event-：" class="headerlink" title="5. SSE(Server-Sent Event)："></a>5. SSE(Server-Sent Event)：</h3><p>SSE(Server-Sent Event)是建立在浏览器与服务器之间的<strong>单向通信渠道</strong>，只能由服务端传输特定形式的数据给客户端，这里并不是建立一个长连接。</p>
<p>优点如下：</p>
<ul>
<li><strong>兼容性好</strong>，SSE 使用 HTTP 协议，现有的服务器软件都支持；</li>
<li>SSE 属于<strong>轻量级</strong>，<strong>使用简单</strong>；</li>
<li>SSE 默认<strong>支持断线重连</strong>。</li>
</ul>
<h3 id="6-适用范围"><a href="#6-适用范围" class="headerlink" title="6. 适用范围"></a>6. 适用范围</h3><ul>
<li><p>轮询适用于：小型应用，实时性不高；</p>
</li>
<li><p>长轮询适用于：一些早期的对及时性有一些要求的应用：web IM 聊天；</p>
</li>
<li><p>iframe 适用于：客服通信等；</p>
</li>
<li><p>WebSocket 适用于：微信、网络互动游戏等</p>
</li>
<li><p>SSE 适用于：金融股票数据、看板等</p>
</li>
</ul>
<h2 id="11-null-undefined"><a href="#11-null-undefined" class="headerlink" title="11. null/undefined"></a>11. null/undefined</h2><h3 id="null"><a href="#null" class="headerlink" title="null"></a>null</h3><p>null 代表对象的值未设置，相当于一个对象<strong>没有设置指针地址</strong>就是 null</p>
<ul>
<li><p>null 为一个空对象，可以隐式转化为数值 0，既定义了，也赋值了。</p>
</li>
<li><p>坑：<code>Number(null) == 0</code></p>
</li>
<li><p><code>typeof null == object</code></p>
</li>
</ul>
<h3 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h3><p>undefind 是<strong>全局对象的一个属性</strong>。</p>
<p>当出现以下情况都为 undefined。</p>
<ul>
<li>一个变量没有被赋值</li>
<li>一个函数没有返回值</li>
<li>某个对象不存在</li>
<li>访问某个对象不存在的属性</li>
<li>函数定义了形参但没有传递实参</li>
</ul>
<p>速记：</p>
<ul>
<li><p>表示定义了一个变量，但未赋值。</p>
</li>
<li><p><code>Number(undefined) == NaN</code></p>
</li>
<li><p><code>typeof undefined == undefined</code></p>
</li>
</ul>
<p>溯源如下：</p>
<ol>
<li><p>作者在设计 js 的都是先设计的 null（为什么设计了 null：最初设计 js 的时候借鉴了 java 的语言）</p>
</li>
<li><p>null 会被隐式转换成 0，很不容易发现错误。</p>
</li>
<li><p>先有 null 后有 undefined，出来 undefined 是为了填补之前的坑。</p>
</li>
</ol>
<p>一些论断：</p>
<ol>
<li><p><code>Boolean(undefined) == 0</code></p>
</li>
<li><p><code>Boolean(null) == 0</code></p>
</li>
<li><p>由 1 和 2 得：<code>undefined == null</code></p>
</li>
<li><p>严格判断则不转化，所以不等：<code>undefined !== null</code></p>
</li>
</ol>
<h2 id="12-浏览器输入-URL"><a href="#12-浏览器输入-URL" class="headerlink" title="12. 浏览器输入 URL"></a>12. 浏览器输入 URL</h2><ol>
<li>url 解析：判断是搜索内容还是请求 URL</li>
<li>查找本地缓存：如果有缓存直接返回给页面，没有缓存则进入网络请求阶段</li>
<li>DNS 解析</li>
<li>通过三次握手建立 TCP 连接</li>
<li>合成请求头信息，发送 http 请求</li>
<li>处理响应信息</li>
<li>通过四次挥手断开 TCP 连接</li>
<li>如果响应状态码 301，则重定向</li>
<li>浏览器进行页面渲染：<ol>
<li>解析 html，生成 DOM 树</li>
<li>根据 css 计算节点样式，生成 stylesheet</li>
<li>生成布局树</li>
<li>为特定的元素生成独立图层</li>
</ol>
</li>
</ol>
<h2 id="13-http"><a href="#13-http" class="headerlink" title="13. http"></a>13. http</h2><p>HTTP 是一个在计算机世界里专门在两点之间<strong>传输</strong><u>文字、图片、音频、视频</u>等<strong>超文本数据</strong>的<strong>约定和规范</strong></p>
<h3 id="OSI-模型"><a href="#OSI-模型" class="headerlink" title="OSI 模型"></a>OSI 模型</h3><p>因特网的协议栈由五个部分组成：物理层、链路层、网络层、运输层和应用层。采用自上而下的方法研究其原理如下：</p>
<h4 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h4><p>决定了向用户提供应用服务时通信活动，即<strong>提供应用程序间的通信</strong></p>
<p>应用层是<strong>网络应用程序</strong>和<strong>网络协议</strong>存放的分层，因特网的应用层包括许多协议，例如我们学 web 离不开的 <strong>HTTP 协议</strong>，电子邮件传送协议 <code>SMTP</code>、端系统文件上传<strong>协议 FTP</strong>、还有为我们进行域名解析的 <strong>DNS 协议</strong>。应用层协议分布在多个端系统上，一个<strong>端系统应用程序</strong>与另外一个<strong>端系统应用程序</strong>交换信息分组，我们把位于应用层的信息分组称为 <code>报文(message)</code>。</p>
<h4 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h4><p>传输层对上层应用层，<strong>提供处于网络连接中的两台计算机之间的网络传输</strong></p>
<p>因特网的运输层在应用程序断点之间<strong>传送应用程序报文</strong>，在这一层主要有两种传输协议 <strong>TCP 协议</strong>和<strong>UDP 协议</strong>，利用这两者中的任何一个都能够传输报文，不过这两种协议有巨大的不同。</p>
<p>TCP 向它的应用程序提供了<strong>面向连接的服务</strong>，<u>它能够控制并确认报文是否到达，并提供了拥塞机制来控制网络传输，因此当网络拥塞时，会抑制其传输速率。</u></p>
<p>UDP 协议向它的应用程序提供了<strong>无连接服务</strong>。<u>它不具备可靠性的特征，没有流量控制，也没有拥塞控制</u>。我们把运输层的分组称为 <code>报文段(segment)</code></p>
<h4 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h4><p>网络层用来<strong>处理在网络上流动的数据包</strong>。<strong>数据包</strong>是网络传输的<strong>最小数据单位</strong>。</p>
<p>因特网的网络层负责将称为 <code>数据报(datagram)</code> 的网络分层从一台主机移动到另一台主机。网络层一个非常重要的协议是 <strong>IP 协议</strong>，所有具有网络层的因特网组件都必须运行 IP 协议，IP 协议是一种网际协议，除了 IP 协议外，网络层还包括一些其他网际协议和路由选择协议，一般把网络层就称为 IP 层，由此可知 IP 协议的重要性。</p>
<h4 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h4><p>数据链路层用来<strong>处理连接网络的硬件部分</strong></p>
<p>现在我们有应用程序通信的协议，有了给应用程序提供运输的协议，还有了用于约定发送位置的 IP 协议，那么如何才能真正的发送数据呢？为了将分组从一个节点（主机或路由器）运输到另一个节点，<strong>网络层必须依靠链路层提供服务</strong>。链路层的例子包括以太网、WiFi 和电缆接入的 <strong>DOCSIS</strong> 协议，因为数据从源目的地传送通常需要经过几条链路，一个数据包可能被沿途不同的链路层协议处理，我们把<u>链路层的分组</u>称为<strong>帧(frame)</strong></p>
<h4 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h4><p>虽然链路层的作用是将帧从一个端系统运输到另一个端系统，而物理层的作用是将帧中的一个个 <code>比特</code> 从一个节点运输到另一个节点，物理层的协议<strong>仍然使用链路层</strong>协议，这些协议与实际的<strong>物理传输介质</strong>有关，例如，以太网有很多物理层协议：关于双绞铜线、关于同轴电缆、关于光纤等等。</p>
<p>ISO 给出的 OSI（Open System Interconnection Reference Model）即<strong>开放式系统互联通信参考模型</strong>增加了<u>表示层和会话层</u>。计算机网络体系结构](<a href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84?fromModule=lemma_inlink">https://baike.baidu.com/item/计算机网络体系结构?fromModule=lemma_inlink</a>)(architecture）划分为七层：</p>
<p><strong>表示层</strong>主要包括<u>数据压缩和数据加密以及数据描述</u>，数据描述使得应用程序不必担心计算机内部存储格式的问题，而<strong>会话层</strong>提供了<u>数据交换的定界和同步功能</u>，包括<u>建立检查点和恢复方案</u>。</p>
<h4 id="速记"><a href="#速记" class="headerlink" title="速记"></a>速记</h4><img src="C:\Users\90484\AppData\Roaming\Typora\typora-user-images\image-20220920092537430.png" alt="image-20220920092537430" style="zoom:80%;" />

<ul>
<li>物理层: <strong>将数据转换为</strong>可通过物理介质传送的<strong>电子信号</strong>，相当于邮局中的搬运工人。</li>
<li>数据链路层: <strong>确定访问网络介质的方式</strong>。在此层将数据分帧，并处理流控制。本层指定<strong>拓扑结构</strong>并提供硬件寻址，相当于邮局中的装拆箱工人。</li>
<li>网络层: 使用权数据路由经过大型网络 ，提供<strong>路由选择和寻址功能</strong>，相当于邮局中的排序工人。</li>
<li>传输层: 提供<strong>终端到终端的可靠连接</strong> ，相当于公司中跑邮局的送信职员。</li>
<li>会话层: 允许用户使用简单易记的名称建立连接，具有<strong>建立、管理、维护会话功能</strong>。相当于公司中收寄信、写信封与拆信封的秘书。</li>
<li>表示层: 协商数据交换格式，具有<strong>数据格式处理</strong>和<strong>数据加密</strong>功能。 相当公司中简报老板、替老板写信的助理。</li>
<li>应用层: 用户的应用程序和网络之间的接口。提供<strong>应用程序之间通信</strong>。</li>
</ul>
<p><img src="C:\Users\90484\AppData\Roaming\Typora\typora-user-images\image-20221003102507895.png" alt="image-20221003102507895"></p>
<p><img src="C:\Users\90484\AppData\Roaming\Typora\typora-user-images\image-20221003103430310.png" alt="image-20221003103430310"></p>
<p><img src="C:\Users\90484\AppData\Roaming\Typora\typora-user-images\image-20221003103453963.png" alt="image-20221003103453963"></p>
<p><a href="https://juejin.cn/post/6844904045572800525">优秀博客</a></p>
<h3 id="常见缩写"><a href="#常见缩写" class="headerlink" title="常见缩写"></a>常见缩写</h3><h4 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h4><p>HTTP 一般是明文传输，很容易被攻击者窃取重要信息，鉴于此，HTTPS 应运而生。HTTPS 的全称为 （Hyper Text Transfer Protocol over SecureSocket Layer），全称有点长，HTTPS 和 HTTP 有很大的不同在于 HTTPS 是以安全为目标的 HTTP 通道，在 HTTP 的基础上通过<strong>传输加密</strong>和<strong>身份认证</strong>保证了传输过程的安全性。HTTPS 在 HTTP 的基础上增加了 <code>SSL</code> 层，也就是说 <strong>HTTPS = HTTP + SSL</strong>。</p>
<p>下图：非对称加密</p>
<p><img src="C:\Users\90484\AppData\Roaming\Typora\typora-user-images\image-20221003104818246.png" alt="image-20221003104818246"></p>
<p>先使用非对称加密，建立安全连接后，为了减少消耗采用对称加密</p>
<p><img src="C:\Users\90484\AppData\Roaming\Typora\typora-user-images\image-20221003110557257.png" alt="image-20221003110557257"></p>
<h4 id="SSL"><a href="#SSL" class="headerlink" title="SSL"></a>SSL</h4><p>SSL（Secure Socket Layer）安全套接层是网景公司（Netscape）率先采用的网络安全协议。它是在传输通信协议（TCP/IP）上实现的一种安全协议，采用公开密钥技术。SSL 广泛支持各种类型的网络，同时提供三种基本的安全服务，它们都使用公开密钥技术。</p>
<h4 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h4><p>DNS（Domain Name System）即域名系统，</p>
<h3 id="HTTP-请求特征"><a href="#HTTP-请求特征" class="headerlink" title="HTTP 请求特征"></a>HTTP 请求特征</h3><ul>
<li><p>支持客户-服务器模式</p>
</li>
<li><p>简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有 GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于 HTTP 协议简单，使得 HTTP 服务器的程序规模小，因而通信速度很快。</p>
</li>
<li><p>灵活：HTTP 允许传输任意类型的数据对象。正在传输的类型由 Content-Type 加以标记。</p>
</li>
<li><p><strong>无连接</strong>：无连接的含义是限制<strong>每次连接只处理一个请求</strong>。<u>服务器处理完客户的请求，并收到客户的应答后，即断开连接</u>。采用这种方式可以<strong>节省传输时间</strong>。</p>
</li>
<li><p><strong>无状态</strong>：HTTP 协议是无状态协议。无状态是指<strong>协议对于事务处理没有记忆能力</strong>。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样<u>可能导致每次连接传送的数据量增大，每次都得问一遍身份信息，不仅麻烦，而且还增加了不必要的数据传输量。由此出现了 <code>Cookie</code> 技术</u>。另一方面，<u>服务器不需要先前信息时</u>它的<strong>应答就较快</strong>。</p>
</li>
<li><p>HTTP 协议里还有一把优缺点一体的双刃剑，就是<strong>明文传输</strong>。明文意思就是协议里的报文（准确地说是 header 部分）不使用二进制数据，而是用简单可阅读的文本形式。<br>对比 TCP、UDP 这样的二进制协议，它的优点显而易见，不需要借助任何外部工具，用浏览器、Wireshark 或者 tcpdump 抓包后，直接用肉眼就可以很容易地查看或者修改，为我们的开发调试工作带来极大的便利。<br>当然缺点也是显而易见的，就是不安全，可以被监听和被窥探。因为无法判断通信双方的身份，不能判断报文是否被更改过。</p>
</li>
</ul>
<p>tcp 连接</p>
<p><img src="C:\Users\90484\AppData\Roaming\Typora\typora-user-images\image-20221003094458957.png" alt="image-20221003094458957"></p>
<p><img src="C:\Users\90484\AppData\Roaming\Typora\typora-user-images\image-20221003100751092.png" alt="image-20221003100751092"></p>
<h2 id="14-交换变量方法"><a href="#14-交换变量方法" class="headerlink" title="14. 交换变量方法"></a>14. 交换变量方法</h2><p>常规法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">3</span>,</span><br><span class="line">  b = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> c = a;</span><br><span class="line">a = b;</span><br><span class="line">b = c;</span><br></pre></td></tr></table></figure>

<p>木桶法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">3</span>,</span><br><span class="line">  b = <span class="number">5</span>;</span><br><span class="line">a = a + b;</span><br><span class="line">b = a - b;</span><br><span class="line">a = a - b;</span><br></pre></td></tr></table></figure>

<p>结构赋值法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">3</span>,</span><br><span class="line">  b = <span class="number">5</span>;</span><br><span class="line">[a, b] = [<span class="number">5</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure>

<p>数组法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">3</span>,</span><br><span class="line">  b = <span class="number">5</span>;</span><br><span class="line">a = [a, b];</span><br><span class="line">b = a[<span class="number">0</span>];</span><br><span class="line">a = a[<span class="number">1</span>];</span><br></pre></td></tr></table></figure>

<p>对象法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">3</span>,</span><br><span class="line">  b = <span class="number">5</span>;</span><br><span class="line">a = &#123;</span><br><span class="line">  <span class="attr">a</span>: b,</span><br><span class="line">  <span class="attr">b</span>: a,</span><br><span class="line">&#125;;</span><br><span class="line">b = a.b;</span><br><span class="line">a = a.a;</span><br><span class="line"><span class="built_in">console</span>.log(a, b);</span><br></pre></td></tr></table></figure>

<p>按位异或法</p>
<p>换算成二进制来进行亦或取值，相同为 0，异同为 1</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">3</span>,</span><br><span class="line">  b = <span class="number">5</span>;</span><br><span class="line">a = a ^ b;</span><br><span class="line">b = b ^ a;</span><br><span class="line">a = a ^ b;</span><br><span class="line"><span class="built_in">console</span>.log(a, b);</span><br></pre></td></tr></table></figure>

<p>烧脑写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">3</span>,</span><br><span class="line">  b = <span class="number">5</span>;</span><br><span class="line">a = [b, (b = a)][<span class="number">0</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a, b);</span><br></pre></td></tr></table></figure>

<h2 id="15-倒计时"><a href="#15-倒计时" class="headerlink" title="15. 倒计时"></a>15. 倒计时</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>倒计时<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;day&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;hour&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;min&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;second&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> daySpan = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.day&quot;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> hourSpan = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.hour&quot;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> minSpan = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.min&quot;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> secondSpan = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.second&quot;</span>);</span></span><br><span class="line"><span class="javascript">      aim = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&quot;2022-11-11 00:00&quot;</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">countdown</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 得到的是相差毫秒数</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> defers = aim - now;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(defers);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> day, hour, min, second;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (defers == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        second = <span class="built_in">Math</span>.floor((defers / <span class="number">1000</span>) % <span class="number">60</span>);</span></span><br><span class="line"><span class="javascript">        min = <span class="built_in">Math</span>.floor((defers / <span class="number">1000</span> / <span class="number">60</span>) % <span class="number">60</span>);</span></span><br><span class="line"><span class="javascript">        hour = <span class="built_in">Math</span>.floor((defers / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span>) % <span class="number">24</span>);</span></span><br><span class="line"><span class="javascript">        day = <span class="built_in">Math</span>.floor(defers / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        daySpan.innerHTML = day + <span class="string">&quot;天&quot;</span>;</span></span><br><span class="line"><span class="javascript">        hourSpan.innerHTML = hour + <span class="string">&quot;时&quot;</span>;</span></span><br><span class="line"><span class="javascript">        minSpan.innerHTML = min + <span class="string">&quot;分&quot;</span>;</span></span><br><span class="line"><span class="javascript">        secondSpan.innerHTML = second + <span class="string">&quot;秒&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">setTimeout</span>(countdown, <span class="number">1000</span>);</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">      countdown();</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="16-typeof-instanceof"><a href="#16-typeof-instanceof" class="headerlink" title="16. typeof/instanceof"></a>16. typeof/instanceof</h2><p>typeof 可以检测基本类型数据，instance 可以判断原型。</p>
<p><a href="https://www.cnblogs.com/wangfupeng1988/p/3979533.html">instance</a></p>
<h2 id="17-原型-原型链"><a href="#17-原型-原型链" class="headerlink" title="17. 原型/原型链"></a>17. 原型/原型链</h2><p><a href="https://www.cnblogs.com/wangfupeng1988/p/3979985.html">原型链/继承——超级简单</a></p>
<p>自己没有，可以使用父祖辈的方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&quot;23&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(a)); <span class="comment">//String</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(b)); <span class="comment">//String</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(a) == <span class="built_in">Object</span>.getPrototypeOf(b)); <span class="comment">//True</span></span><br></pre></td></tr></table></figure>

<p>创建没有原型的对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="built_in">Object</span>.create(<span class="literal">null</span>, &#123;</span><br><span class="line">  <span class="attr">name</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&quot;zsh&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(a.hasOwnProperty(<span class="string">&quot;name&quot;</span>)); <span class="comment">//a没有hasOwnProperty方法</span></span><br></pre></td></tr></table></figure>

<p>自我总结：</p>
<p>凡是创建的对象，都先考虑其对应的数据类型。涉及到的数据类型考虑 property，其余的统统考虑使用<code>__proto__</code>进行寻找。</p>
<p><img src="D:\00_importantData\面试.png" alt="面试"></p>
<h2 id="18-apply-bind-call"><a href="#18-apply-bind-call" class="headerlink" title="18. apply/bind/call"></a>18. apply/bind/call</h2><p>apply、call 会立即执行，bind 不会立即执行</p>
<p>要传参时：apply 传数组，bind 和 call 都是分别传</p>
<p>bind 相当于是复制了一个函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hd</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.f + a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用bind会生成新函数（这里只传了一个参数，使用bind时传的参数的权重是最大的，依次进行参数赋值）</span></span><br><span class="line"><span class="keyword">let</span> newFunc = hd.bind(&#123; <span class="attr">f</span>: <span class="number">1</span> &#125;, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里将第2个参数传过去了（如果上述传过值了，那么这里的传值就无效了，依次进行赋值）</span></span><br><span class="line"><span class="built_in">console</span>.log(newFunc(<span class="number">2</span>));</span><br></pre></td></tr></table></figure>

<p>这里 bind 适用于不立即执行的函数，如回调函数，同时改变 this 指向，应用如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>后盾人<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.querySelector(<span class="string">&quot;button&quot;</span>).addEventListener(</span></span><br><span class="line"><span class="javascript">    <span class="string">&quot;click&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(event.target.innerHTML + <span class="built_in">this</span>.url);</span></span><br><span class="line"><span class="javascript">    &#125;.bind(&#123; <span class="attr">url</span>: <span class="string">&quot;houdunren.com&quot;</span> &#125;)</span></span><br><span class="line"><span class="javascript">  );</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="19-this"><a href="#19-this" class="headerlink" title="19. this"></a>19. this</h2><h3 id="普通函数中"><a href="#普通函数中" class="headerlink" title="普通函数中"></a>普通函数中</h3><ul>
<li>构造函数（类）：this 指向实例出来的对象</li>
<li>以函数的形式调用时，this 永远都是 window</li>
<li>以方法的形式进行调用，this 就是调用方法的那个对象</li>
</ul>
<p>值的注意的是，在以方法的形式进行调用时：</p>
<ul>
<li><p>所谓的<strong>this 指的是</strong>在该方法中的<strong>第一层</strong>，如果嵌套，此时 this 的指向还是 window（嵌套函数还是普通函数时），此时可以为函数进行 this 绑定</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> Lesson = &#123;</span><br><span class="line">  <span class="attr">study</span>: <span class="string">&quot;i love&quot;</span>,</span><br><span class="line">  <span class="attr">lists</span>: [<span class="string">&quot;js&quot;</span>, <span class="string">&quot;css&quot;</span>, <span class="string">&quot;mysql&quot;</span>],</span><br><span class="line">  <span class="function"><span class="title">show</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.lists.map(<span class="function"><span class="keyword">function</span> (<span class="params">title</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.study&#125;</span>:<span class="subst">$&#123;title&#125;</span>`</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(Lesson.show()); <span class="comment">// [&#x27;undefined:js&#x27;, &#x27;undefined:css&#x27;, &#x27;undefined:mysql&#x27;]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> lesson = &#123;</span><br><span class="line">  <span class="attr">study</span>: <span class="string">&quot;i love&quot;</span>,</span><br><span class="line">  <span class="attr">lists</span>: [<span class="string">&quot;js&quot;</span>, <span class="string">&quot;css&quot;</span>, <span class="string">&quot;mysql&quot;</span>],</span><br><span class="line">  <span class="function"><span class="title">show</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.lists.map(<span class="function"><span class="keyword">function</span> (<span class="params">title</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.study&#125;</span>:<span class="subst">$&#123;title&#125;</span>`</span>;</span><br><span class="line">    &#125;, <span class="built_in">this</span>); <span class="comment">//绑定this</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(lesson.show()); <span class="comment">// [&#x27;i love:js&#x27;, &#x27;i love:css&#x27;, &#x27;i love:mysql&#x27;]</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="箭头函数中"><a href="#箭头函数中" class="headerlink" title="箭头函数中"></a>箭头函数中</h3><p>箭头函数没有<code>this</code>, 也可以理解为箭头函数中的<code>this</code> 会继承定义函数时的上下文，可以理解为<strong>和外层函数（作用域）</strong>指向<strong>同一个 this</strong>，此时和普通函数不能一概而论，需单独分析。</p>
<p>值的注意的是，当箭头函数作为回调函数时，此时 this 的指向就是<strong>回调函数宿主函数</strong>所在的作用域。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">desc</span>=<span class="string">&quot;test&quot;</span>&gt;</span>无敌是多么寂寞<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> Dom = &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">name</span>: <span class="string">&quot;crazyzsh&quot;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">bind</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> button = <span class="built_in">document</span>.querySelector(<span class="string">&quot;button&quot;</span>);</span></span><br><span class="line"><span class="javascript">        button.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          alert(<span class="built_in">this</span>.name + event.target.innerHTML);</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">    Dom.bind(); <span class="comment">//crazyzsh无敌是多么寂寞</span></span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用场景：</p>
<ul>
<li>如果想使用函数定义时的上下文中的 this，那就使用箭头函数</li>
<li>本着新特性的原则，尽量使用箭头函数（还是得视情况而定）</li>
<li>事件函数可理解为对象<code>onclick</code>设置值，所以函数声明时<code>this</code>为当前对象</li>
</ul>
<h3 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> Lesson = &#123;</span><br><span class="line">  <span class="attr">study</span>: <span class="string">&quot;i love&quot;</span>,</span><br><span class="line">  <span class="attr">lists</span>: [<span class="string">&quot;js&quot;</span>, <span class="string">&quot;css&quot;</span>, <span class="string">&quot;mysql&quot;</span>],</span><br><span class="line">  <span class="function"><span class="title">show</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 使用变量将this进行保存</span></span><br><span class="line">    <span class="keyword">let</span> that = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.lists.map(<span class="function"><span class="keyword">function</span> (<span class="params">title</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;that.study&#125;</span>:<span class="subst">$&#123;title&#125;</span>`</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(Lesson.show()); <span class="comment">//[&#x27;i love:js&#x27;, &#x27;i love:css&#x27;, &#x27;i love:mysql&#x27;]</span></span><br></pre></td></tr></table></figure>

<h2 id="20-作用域"><a href="#20-作用域" class="headerlink" title="20. 作用域"></a>20. 作用域</h2><p><strong>全局作用域</strong>只有一个，每个函数又都有作用域（环境）。</p>
<ul>
<li>编译器运行时会将<strong>变量定义</strong>在所在<strong>作用域</strong></li>
<li><strong>使用变量</strong>时会<u>从当前作用域开始向上查找变量</u></li>
<li>作用域就像攀亲亲一样，晚辈总是可以向上辈要些东西</li>
</ul>
<p>作用域链<strong>只向上查找</strong>，找到全局 window 即终止，应该尽量不要在全局作用域中添加变量。</p>
<p>函数被执行后其环境变量将从<strong>内存中删除</strong>。下面函数在每次执行后将删除函数内部的 total 变量。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">count();</span><br></pre></td></tr></table></figure>

<p>如果<strong>子函数被使用</strong>时<strong>父级环境将被保留</strong>，即此时内存并没有释放。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hd</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> n = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(++n);</span><br><span class="line">      <span class="built_in">console</span>.log(++b);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = hd()();</span><br><span class="line">a(); <span class="comment">//2,2</span></span><br><span class="line">a(); <span class="comment">//3,3</span></span><br></pre></td></tr></table></figure>

<p>构造函数也是很好的环境例子，子函数被外部使用<strong>父级环境将被保留</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">this</span>.show = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a++);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> User();</span><br><span class="line">a.show(); <span class="comment">//1</span></span><br><span class="line">a.show(); <span class="comment">//2</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> User();</span><br><span class="line">b.show(); <span class="comment">//1</span></span><br></pre></td></tr></table></figure>

<h2 id="21-var-let-const"><a href="#21-var-let-const" class="headerlink" title="21. var/let/const"></a>21. var/let/const</h2><p>使用 <code>let/const</code> 可以将变量声明在块作用域中（放在新的环境中，而不是全局中）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//ReferenceError: a is not defined</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">//1</span></span><br></pre></td></tr></table></figure>

<h3 id="定时器体验"><a href="#定时器体验" class="headerlink" title="定时器体验"></a>定时器体验</h3><p>在满足循环条件下，因为这里使用的是 let，每次循环都会创建一个块级作用域，相应的 i 的值也一同保存在了该块级作用域中。setTimeout 函数是属于宏任务，等待主线来执行。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在1s后同时输出0,1,2</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在1s、2s、3s后依次输出0,1,2</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;, i * <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 var，由于在执行 setTimeout 函数时，是要等同步代码执行完后再执行定时器，此时循环已经遍历完了， i 的值为 4，所以此时输出的都为 4。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在1s后同时输出4</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在1s、2s、3s后依次输出4,4,4</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;, <span class="number">1000</span> * i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总结：</p>
<ul>
<li>每次循环 setTimeout 函数（第二个参数如果用到了 i 值的话）都会记住 i 的值，这是不论使用 let 还是 var 都是一样的；</li>
<li>执行 setTimeout 函数时，是要等同步代码执行完后再进行执行，即要等循环完后再执行；</li>
<li>使用 let 具有块级作用域，每次循环出来的 setTimeout 函数都处于其中，变量 i 的值也储存在该块级作用域中，所以打印出来为 1、2、3；</li>
<li>使用 var 是全局声明的，等循环完后 i 最后变成了 4，再执行定时器时 i 的值为 4，所以此时输出的都为 4；</li>
</ul>
<h2 id="22-闭包"><a href="#22-闭包" class="headerlink" title="22. 闭包"></a>22. 闭包</h2><p>闭包指子函数可以访问外部作用域变量的函数特性，即使在子函数作用域外也可以访问。如果没有闭包那么在处理事件绑定，异步请求时都会变得困难。</p>
<ul>
<li>JS 中的所有函数都是闭包</li>
<li>闭包一般在子函数本身作用域以外执行，即延伸作用域</li>
</ul>
<p>使用闭包获取<strong>指定区间数组元素</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">between</span>(<span class="params">left, right</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">el</span>) =&gt;</span> el &gt;= left &amp;&amp; el &lt;= right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> fun = a.filter(between(<span class="number">3</span>, <span class="number">6</span>));</span><br><span class="line"><span class="built_in">console</span>.log(fun); <span class="comment">// [4,5,6]</span></span><br></pre></td></tr></table></figure>

<p>在<strong>回调函数</strong>中使用<strong>闭包</strong>，当点击按钮时显示当前<strong>点击的是第几个按钮</strong>。使用了立即执行函数进行参数传递。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">message</span>=<span class="string">&quot;后盾人&quot;</span>&gt;</span>button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">message</span>=<span class="string">&quot;hdcms&quot;</span>&gt;</span>button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> btns = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;button&quot;</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; btns.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">    btns[i].onclick = (<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">`点击了第<span class="subst">$&#123;i + <span class="number">1</span>&#125;</span>个按钮`</span>);</span></span><br><span class="line"><span class="javascript">      &#125;;</span></span><br><span class="line"><span class="javascript">    &#125;)(i);</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">message</span>=<span class="string">&quot;后盾人&quot;</span>&gt;</span>button1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">message</span>=<span class="string">&quot;hdcms&quot;</span>&gt;</span>button2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    btns.forEach(<span class="function">(<span class="params">el</span>) =&gt;</span></span></span><br><span class="line"><span class="javascript">      el.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> alert(e.target.innerHTML))</span></span><br><span class="line"><span class="javascript">    );</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用闭包实现<strong>根据字段实现排序</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> lessons = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;媒体查询响应式布局&quot;</span>,</span><br><span class="line">    <span class="attr">click</span>: <span class="number">89</span>,</span><br><span class="line">    <span class="attr">price</span>: <span class="number">12</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;FLEX 弹性盒模型&quot;</span>,</span><br><span class="line">    <span class="attr">click</span>: <span class="number">45</span>,</span><br><span class="line">    <span class="attr">price</span>: <span class="number">120</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;GRID 栅格系统&quot;</span>,</span><br><span class="line">    <span class="attr">click</span>: <span class="number">19</span>,</span><br><span class="line">    <span class="attr">price</span>: <span class="number">67</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;盒子模型详解&quot;</span>,</span><br><span class="line">    <span class="attr">click</span>: <span class="number">29</span>,</span><br><span class="line">    <span class="attr">price</span>: <span class="number">300</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">order</span>(<span class="params">field</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">a, b</span>) =&gt;</span> a[field] - b[field];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.table(lessons.sort(order(<span class="string">&quot;price&quot;</span>)));</span><br></pre></td></tr></table></figure>

<p>内存泄漏</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">desc</span>=<span class="string">&quot;houdunren&quot;</span>&gt;</span>在线学习<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">desc</span>=<span class="string">&quot;hdcms&quot;</span>&gt;</span>开源产品<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> divs = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="javascript">  divs.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    item.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(item.getAttribute(<span class="string">&quot;desc&quot;</span>));</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>解决内存泄漏</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> divs = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">divs.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> desc = item.getAttribute(<span class="string">&quot;desc&quot;</span>);</span><br><span class="line">  item.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(desc);</span><br><span class="line">  &#125;);</span><br><span class="line">  item = <span class="literal">null</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="23-常见坑"><a href="#23-常见坑" class="headerlink" title="23. 常见坑"></a>23. 常见坑</h2><h3 id="改变原数组"><a href="#改变原数组" class="headerlink" title="改变原数组"></a>改变原数组</h3><h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><p>sort 会改变原始数组的操作</p>
<p><strong>要升序就返回 a-b，降序就返回 b-a</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr2 = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">10</span>, <span class="attr">flag</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">5</span>, <span class="attr">flag</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">6</span>, <span class="attr">flag</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">9</span>, <span class="attr">flag</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> r = arr2.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b.flag - a.flag);</span><br><span class="line"><span class="built_in">console</span>.log(r);</span><br></pre></td></tr></table></figure>

<h4 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>];</span><br><span class="line">arr.splice(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [3,4,6]</span></span><br></pre></td></tr></table></figure>

<h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>];</span><br><span class="line">arr.reverse();</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[6,4,3,1]</span></span><br></pre></td></tr></table></figure>

<h4 id="push"><a href="#push" class="headerlink" title="push"></a>push</h4><p>在数组末尾追加一个元素，返回数组<strong>长度</strong>。</p>
<h4 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h4><p>在数组末尾删除一个元素，返回被<strong>去掉的元素</strong>。</p>
<h4 id="unshift"><a href="#unshift" class="headerlink" title="unshift"></a>unshift</h4><p>在数组头部添加一个元素，返回数组<strong>长度</strong>。</p>
<h4 id="shift"><a href="#shift" class="headerlink" title="shift"></a>shift</h4><p>在数组头删除一个元素，返回<strong>被删除的元素</strong>。</p>
<h3 id="数组常用方法"><a href="#数组常用方法" class="headerlink" title="数组常用方法"></a>数组常用方法</h3><p>slice</p>
<p><strong><code>slice()</code></strong> 方法返回一个新的数组对象，这一对象是一个由 <code>begin</code> 和 <code>end</code> 决定的原数组的<strong>浅拷贝</strong>（包括 <code>begin</code>，不包括<code>end</code>）。原始数组不会被改变。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">slice();</span><br><span class="line">slice(start);</span><br><span class="line">slice(start, end);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> animals = [<span class="string">&quot;ant&quot;</span>, <span class="string">&quot;bison&quot;</span>, <span class="string">&quot;camel&quot;</span>, <span class="string">&quot;duck&quot;</span>, <span class="string">&quot;elephant&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(animals.slice(<span class="number">2</span>));</span><br><span class="line"><span class="comment">// expected output: Array [&quot;camel&quot;, &quot;duck&quot;, &quot;elephant&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(animals.slice(<span class="number">2</span>, <span class="number">4</span>));</span><br><span class="line"><span class="comment">// expected output: Array [&quot;camel&quot;, &quot;duck&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(animals.slice(<span class="number">1</span>, <span class="number">5</span>));</span><br><span class="line"><span class="comment">// expected output: Array [&quot;bison&quot;, &quot;camel&quot;, &quot;duck&quot;, &quot;elephant&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(animals.slice(-<span class="number">2</span>));</span><br><span class="line"><span class="comment">// expected output: Array [&quot;duck&quot;, &quot;elephant&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(animals.slice(<span class="number">2</span>, -<span class="number">1</span>));</span><br><span class="line"><span class="comment">// expected output: Array [&quot;camel&quot;, &quot;duck&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(animals.slice());</span><br><span class="line"><span class="comment">// expected output: Array [&quot;ant&quot;, &quot;bison&quot;, &quot;camel&quot;, &quot;duck&quot;, &quot;elephant&quot;]</span></span><br></pre></td></tr></table></figure>

<p>splice</p>
<p>splice() 方法通过删除或替换现有元素或者原地添加新的元素来修改数组，并以数组形式返回被修改的内容。此方法会改变原数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">splice(start);</span><br><span class="line">splice(start, deleteCount);</span><br><span class="line">splice(start, deleteCount, item1);</span><br><span class="line">splice(start, deleteCount, item1, item2, itemN);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> months = [<span class="string">&quot;Jan&quot;</span>, <span class="string">&quot;March&quot;</span>, <span class="string">&quot;April&quot;</span>, <span class="string">&quot;June&quot;</span>];</span><br><span class="line">months.splice(<span class="number">1</span>, <span class="number">0</span>, <span class="string">&quot;Feb&quot;</span>);</span><br><span class="line"><span class="comment">// inserts at index 1</span></span><br><span class="line"><span class="built_in">console</span>.log(months);</span><br><span class="line"><span class="comment">// expected output: Array [&quot;Jan&quot;, &quot;Feb&quot;, &quot;March&quot;, &quot;April&quot;, &quot;June&quot;]</span></span><br><span class="line"></span><br><span class="line">months.splice(<span class="number">4</span>, <span class="number">1</span>, <span class="string">&quot;May&quot;</span>);</span><br><span class="line"><span class="comment">// replaces 1 element at index 4</span></span><br><span class="line"><span class="built_in">console</span>.log(months);</span><br><span class="line"><span class="comment">// expected output: Array [&quot;Jan&quot;, &quot;Feb&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;]</span></span><br></pre></td></tr></table></figure>

<p>findIndex</p>
<p><strong><code>findIndex()</code>**方法返回数组中满足提供的测试函数的第一个元素的**索引</strong>。若没有找到对应元素则返回-1。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">5</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isLargeNumber = <span class="function">(<span class="params">element</span>) =&gt;</span> element &gt; <span class="number">13</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array1.findIndex(isLargeNumber));</span><br><span class="line"><span class="comment">// expected output: 3</span></span><br></pre></td></tr></table></figure>

<p>reduce</p>
<p>第一次执行回调函数时，不存在“上一次的计算结果”。<strong>如果</strong>需要回调函数<strong>从数组索引为 0 的元素开始执行</strong>，则需要传递初始值。<strong>否则</strong>，数组索引为 0 的元素将被作为初始值 _initialValue_，迭代器将<strong>从第二个元素开始执行</strong>（索引为 1 而不是 0）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0 + 1 + 2 + 3 + 4</span></span><br><span class="line"><span class="keyword">const</span> initialValue = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> sumWithInitial = array1.reduce(</span><br><span class="line">  <span class="function">(<span class="params">previousValue, currentValue</span>) =&gt;</span> previousValue + currentValue,</span><br><span class="line">  initialValue</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sumWithInitial);</span><br><span class="line"><span class="comment">// expected output: 10</span></span><br></pre></td></tr></table></figure>

<h2 id="24-V8-引擎"><a href="#24-V8-引擎" class="headerlink" title="24. V8 引擎"></a>24. V8 引擎</h2><p><a href="https://blog.fundebug.com/2019/07/16/how-does-v8-work/">v8 引擎介绍 1</a></p>
<p><a href="https://juejin.cn/post/6844904137792962567">v8 引擎介绍 2</a></p>
<p><img src="C:\Users\90484\AppData\Roaming\Typora\typora-user-images\image-20220921235225871.png" alt="image-20220921235225871"></p>
<img src="C:\Users\90484\AppData\Roaming\Typora\typora-user-images\image-20220922091053574.png" alt="image-20220922091053574" style="zoom:67%;" />

<p>执行过程如下：</p>
<ol>
<li>parser 解析器 生成 AST 抽象语法树</li>
<li>interpreter 解释器 Ignition 生成 byteCode 字节码 并<strong>直接执行</strong></li>
<li>清除 AST 释放内存空间</li>
<li>得到 25% - 50%的等效机器代码大小</li>
<li>compiler 运行过程中，解释器收集优化信息发送给编译器 TurboFan</li>
<li>重新生成机器码</li>
<li>有些热点函数变更会由优化后的机器码还原成字节码 也就是 deoptimization 回退字节码<strong>操作执行</strong></li>
</ol>
<p>优化点：</p>
<ol>
<li>值声明未调用，不会被解析生成 AST</li>
<li>函数只被调用一次，bytcode 直接被解释执行，不会进入到编译优化阶段</li>
<li>函数被调用多次，Igniton 会收集函数类型信息，可能会被标记为热点函数，可能被编译成优化后的机器代码</li>
</ol>
<p>好处：</p>
<ol>
<li>由于一开始不需要直接编译成机器码，生成了中间层的字节码，从而节约了时间</li>
<li>优化编译阶段，不需要从源码重新解析,直接通过字节码进行优化，也可以 deoptimization 回退操作</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">sum(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">sum(<span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">sum(<span class="string">&quot;7&quot;</span>, <span class="string">&quot;8&quot;</span>); <span class="comment">//会回退字节码操作执行</span></span><br></pre></td></tr></table></figure>

<h2 id="25-跨域问题"><a href="#25-跨域问题" class="headerlink" title="25. 跨域问题"></a>25. 跨域问题</h2><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><p>当<strong>协议号</strong>和<strong>域名</strong>和<strong>端口</strong>都相同时，才符合同源策略。</p>
<p>当发生跨域时，<strong>后端能收到</strong>前端发送的请求，但是<strong>前端不能收到</strong>后端的响应。这是因为跨域原因，前端接收后端返回的数据时被<u>浏览器的跨域机制</u><strong>拦截了</strong>。</p>
<p>JSONP 是一种<strong>思想</strong>，并不是一个方法， 有些请求是不会受到浏览器的同源策略的影响的。</p>
<p>例如：src、href</p>
<ol>
<li><code>&lt;script src=&quot;&quot;&gt;&lt;/script&gt;</code></li>
<li><code>&lt;img src=&quot;&quot;&gt;</code></li>
<li><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;&quot;&gt;</code></li>
</ol>
<p><strong>JSONP</strong>就是利用<u>script 的 src 属性加载资源时</u><strong>不受同源策略的影响</strong>的这一特性，并且 script 会将引用的<u>外部文件</u>的<u>文本内容</u><strong>当做 js 代码</strong>来进行解析。</p>
<p>即可以将原本跨域拿不到的数据使用<code>script</code>标签进行获取到，并将其当成 js 代码来进行解析，相当于解决了跨域问题，后续可以直接使用解析后的变量或函数等。</p>
<h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><h2 id="26-Promise"><a href="#26-Promise" class="headerlink" title="26. Promise"></a>26. Promise</h2><h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><p><code>new Promise((resolve,reject)=&gt;&#123;//这里如果写的是同步代码，那么此时执行的就是同步代码&#125;)</code>，只有在<code>new Promise</code>中才<strong>可能有同步情况</strong>，在<code>then</code>中的都是<strong>异步代码</strong>。</p>
<h3 id="race"><a href="#race" class="headerlink" title="race"></a>race</h3><ul>
<li><p>返回一个新的 Promise</p>
</li>
<li><p>传入 Promise 组成的数组，返回<strong>最先执行</strong>完成的 Promise，<strong>状态</strong>和<strong>值</strong>皆为此 Promise。</p>
</li>
</ul>
<h3 id="all"><a href="#all" class="headerlink" title="all"></a>all</h3><ul>
<li><p>返回一个新的 promise</p>
</li>
<li><p><strong>只有</strong>所有的 promise 的状态为<strong>fulfilled</strong>，其状态才为<strong>fulfilled</strong>，<strong>否则</strong>状态为<strong>rejected</strong>；</p>
</li>
<li><p>当所有的 Promise<strong>都为成功时</strong>，Promise 的<strong>值</strong>为数组中的<strong>Promise 的值</strong>组成的数组（三个 Promise 的值）；</p>
</li>
<li><p>当其中含有失败的 Promise 的话，返回的 Promise 的<strong>值</strong>为数组中<strong>最靠前的</strong>失败的 Promise 的值（单个，返回的是什么就是什么）。</p>
</li>
</ul>
<h3 id="catch"><a href="#catch" class="headerlink" title="catch"></a>catch</h3><p>只要<strong>没有处理失败</strong>，那么最后一定会被 catch 捕获</p>
<h3 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h3><p>无论状态是<code>resolve</code> 或 <code>reject</code> 都会执行此动作，<code>finally</code> 与状态无关。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  reject(<span class="string">&quot;hdcms&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;resolve&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;reject&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .finally(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;resolve/reject状态都会执行&quot;</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="状态修改"><a href="#状态修改" class="headerlink" title="状态修改"></a>状态修改</h3><ol>
<li><p> resolve()：pending ===&gt; resolved</p>
</li>
<li><p> reject()： pending ===&gt; rejected</p>
</li>
<li><p> <strong>抛出异常</strong>: pending ===&gt; <strong>rejected</strong></p>
</li>
</ol>
<h3 id="中断传递"><a href="#中断传递" class="headerlink" title="中断传递"></a>中断传递</h3><p>在回调函数中返回一个 <code>pendding</code> 状态的<code>promise 对象</code>，即不作 resolve/reject 处理，此时 finally 也不会执行，属于<strong>完全中断</strong>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">111</span>); <span class="comment">//111</span></span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">222</span>); <span class="comment">//222</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;&#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">333</span>); <span class="comment">//上面的Promise状态没有发生改变，所以这里不执行</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .finally(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;finally也不执行&quot;</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="27-http-缓存"><a href="#27-http-缓存" class="headerlink" title="27. http 缓存"></a>27. http 缓存</h2><p>由于请求资源时<strong>网速</strong>很关键，请求资源比较<strong>消耗带宽</strong>，影响用户体验，通常缓存一般是缓存一些<strong>不常变更</strong>的 JS，CSS，Image 等</p>
<p>当浏览器<strong>第一次</strong>向某服务器请求资源，浏览器会检测本地缓存中是否存在缓存，此时由于是第一次发送请求所以没有缓存，当服务器接收到请求后，认为此次请求需要被缓存起来，于是在返回资源的同时在<strong>响应头</strong>中使用<code>Cache-Control:max-age=31536000</code>，如果认为不需要缓存的话则设置<code>Cache-Control:no-cache</code></p>
<p><strong>后续请求</strong>：浏览器会根据本次请求是否拥有本地缓存，如果有，则检查本地缓存是否过期，如果没有过期，则直接使用本地缓存而不重新发送与缓存相关的网络请求。</p>
<p>上述缓存机制又称为<strong>强制缓存</strong>，第一次请求或者在使用本地缓存时（缓存没有过期时）成功响应都是 200</p>
<p><strong>协商缓存</strong>是一种<strong>服务端缓存机制</strong>，当第一次发送请求时，服务端返回资源和资源标识。</p>
<p>后续请求，浏览器携带资源标识，如果资源<strong>没有变更</strong>，则服务端返回<strong>304</strong>，即浏览器使用本<strong>地缓存资源</strong>，服务器不用发送过多资源。</p>
<p>如果资源<strong>进行了变更</strong>，则服务器重新发送资源给浏览器，同时状态码为<strong>200</strong>，即发送了<strong>全新资源</strong></p>
<p><strong>资源标识</strong>类型：</p>
<p>Last-Modify：只精确到秒级，精度不够。</p>
<p>ETag：使用字符串进行标识，比较精确，常用方法。</p>
<p>Cache-Control 值</p>
<img src="C:\Users\90484\AppData\Roaming\Typora\typora-user-images\image-20221017164159749.png" alt="image-20221017164159749" style="zoom:50%;" />

<p>协商缓存</p>
<img src="C:\Users\90484\AppData\Roaming\Typora\typora-user-images\image-20221017165000106.png" alt="image-20221017165000106" style="zoom:50%;" />

<p>由于 Last-Modified 是秒级，不准确</p>
<img src="C:\Users\90484\AppData\Roaming\Typora\typora-user-images\image-20221017165316977.png" alt="image-20221017165316977" style="zoom:50%;" />

<h2 id="28-typeof-instanceof"><a href="#28-typeof-instanceof" class="headerlink" title="28. typeof/instanceof"></a>28. typeof/instanceof</h2><h2 id="29-深拷贝"><a href="#29-深拷贝" class="headerlink" title="29. 深拷贝"></a>29. 深拷贝</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> target === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> cloneTarget = <span class="built_in">Array</span>.isArray(target) ? [] : &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> target) &#123;</span><br><span class="line">      cloneTarget[key] = clone(target[key]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cloneTarget;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="30-数组扁平化"><a href="#30-数组扁平化" class="headerlink" title="30. 数组扁平化"></a>30. 数组扁平化</h2><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>方法 1</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(arr[i])) &#123;</span><br><span class="line">      result = result.concat(flatten(arr[i]));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result.push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(flatten(arr));</span><br></pre></td></tr></table></figure>

<p>方法 2</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, [[<span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>], <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> flatten = <span class="function">(<span class="params">arr, deep = <span class="number">1</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (deep &lt;= <span class="number">0</span>) <span class="keyword">return</span> arr;</span><br><span class="line">  <span class="keyword">return</span> arr.reduce(</span><br><span class="line">    <span class="function">(<span class="params">res, curr</span>) =&gt;</span></span><br><span class="line">      res.concat(<span class="built_in">Array</span>.isArray(curr) ? flatten(curr, deep - <span class="number">1</span>) : curr),</span><br><span class="line">    []</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// function flatten (arr,deep=1) &#123;</span></span><br><span class="line"><span class="comment">// return   arr.reduce((acc,val) =&gt; acc.concat(Array.isArray(val)? flatten(val,deep-1):val),[])</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(arr, <span class="literal">Infinity</span>);</span><br></pre></td></tr></table></figure>

<h3 id="Array-prototype-reduce"><a href="#Array-prototype-reduce" class="headerlink" title="Array.prototype.reduce()"></a>Array.prototype.reduce()</h3><p>第一次执行回调函数时，不存在“上一次的计算结果”。<strong>如果</strong>需要回调函数<strong>从数组索引为 0 的元素开始执行</strong>，则需要传递初始值。<strong>否则</strong>，数组索引为 0 的元素将被作为初始值 _initialValue_，迭代器将<strong>从第二个元素开始执行</strong>（索引为 1 而不是 0）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0 + 1 + 2 + 3 + 4</span></span><br><span class="line"><span class="keyword">const</span> initialValue = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> sumWithInitial = array1.reduce(</span><br><span class="line">  <span class="function">(<span class="params">previousValue, currentValue</span>) =&gt;</span> previousValue + currentValue,</span><br><span class="line">  initialValue</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sumWithInitial);</span><br><span class="line"><span class="comment">// expected output: 10</span></span><br></pre></td></tr></table></figure>

<h3 id="Array-prototype-flat"><a href="#Array-prototype-flat" class="headerlink" title="Array.prototype.flat()"></a>Array.prototype.flat()</h3><p>使用：flat()、flat(depth)，指定要提取嵌套数组的结构深度，默认值为 1。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]];</span><br><span class="line">arr1.flat();</span><br><span class="line"><span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>]]];</span><br><span class="line">arr2.flat();</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, [5, 6]]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr3 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>]]];</span><br><span class="line">arr3.flat(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用 Infinity，可展开任意深度的嵌套数组</span></span><br><span class="line"><span class="keyword">var</span> arr4 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>, [<span class="number">7</span>, <span class="number">8</span>, [<span class="number">9</span>, <span class="number">10</span>]]]]];</span><br><span class="line">arr4.flat(<span class="literal">Infinity</span>);</span><br></pre></td></tr></table></figure>

<p>手写数组扁平化</p>
<p>针对<strong>纯数字</strong>或者<strong>字符串数字</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&quot;1&quot;</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]], <span class="number">6</span>];</span><br><span class="line"><span class="comment">// 针对数组元素为字符串或者纯数字</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">    .toString()</span><br><span class="line">    .split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">    .map(<span class="function">(<span class="params">el</span>) =&gt;</span> <span class="built_in">parseInt</span>(el));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(flatten(arr)); <span class="comment">// [1,2,3,4,5,6]</span></span><br></pre></td></tr></table></figure>

<h3 id="String-prototype-split"><a href="#String-prototype-split" class="headerlink" title="String.prototype.split()"></a>String.prototype.split()</h3><p>指定的分隔符字符串将一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String"><code>String</code></a>对象分割成子字符串<strong>数组</strong>，以一个指定的分割字串来决定每个拆分的位置。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;The quick brown fox jumps over the lazy dog.&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> words = str.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(words[<span class="number">3</span>]);</span><br><span class="line"><span class="comment">// expected output: &quot;fox&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chars = str.split(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(chars[<span class="number">8</span>]);</span><br><span class="line"><span class="comment">// expected output: &quot;k&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> strCopy = str.split();</span><br><span class="line"><span class="built_in">console</span>.log(strCopy);</span><br><span class="line"><span class="comment">// expected output: Array [&quot;The quick brown fox jumps over the lazy dog.&quot;]</span></span><br></pre></td></tr></table></figure>

<h3 id="Array-prototype-toString"><a href="#Array-prototype-toString" class="headerlink" title="Array.prototype.toString()"></a>Array.prototype.toString()</h3><p>将数组元素使用<code>,</code>进行分割组装成字符串，该字符串是一个整体。</p>
<h3 id="String-prototype-toString"><a href="#String-prototype-toString" class="headerlink" title="String.prototype.toString()"></a>String.prototype.toString()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> stringObj = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(stringObj);</span><br><span class="line"><span class="comment">// expected output: String &#123; &quot;foo&quot; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(stringObj.toString());</span><br><span class="line"><span class="comment">// expected output: &quot;foo&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="31-正则"><a href="#31-正则" class="headerlink" title="31. 正则"></a>31. 正则</h2><p>与普通函数操作字符串来比较，正则表达式可以写出更简洁、功能强大的代码。</p>
<p>下面使用<strong>获取字符串中的所有数字</strong>来比较函数与正则的差异。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> hd = <span class="string">&quot;houdunren2200hdcms9988&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> nums = [...hd].filter(<span class="function">(<span class="params">a</span>) =&gt;</span> !<span class="built_in">Number</span>.isNaN(<span class="built_in">parseInt</span>(a)));</span><br><span class="line"><span class="built_in">console</span>.log(nums.join(<span class="string">&quot;&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>使用正则表达式将简单得多</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> hd = <span class="string">&quot;houdunren2200hdcms9988&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(hd.match(<span class="regexp">/\d/g</span>).join(<span class="string">&quot;&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>正则表达式是用于<strong>匹配字符串</strong>中<strong>字符组合</strong>的模式</p>
<table>
<thead>
<tr>
<th>\d</th>
<th>匹配任意一个数字</th>
<th>[0-9]</th>
</tr>
</thead>
<tbody><tr>
<td>\D</td>
<td>与除了数字以外的任何一个字符匹配</td>
<td>[^0-9]</td>
</tr>
<tr>
<td>\w</td>
<td>与任意一个英文字母,数字或下划线匹配</td>
<td>[a-zA-Z_]</td>
</tr>
<tr>
<td>\W</td>
<td>除了字母,数字或下划线外与任何字符匹配</td>
<td>[^a-za-z_]</td>
</tr>
<tr>
<td>\s</td>
<td>任意一个空白字符匹配，如空格，制表符<code>\t</code>，换行符<code>\n</code></td>
<td>[\n\f\r\t\v]</td>
</tr>
<tr>
<td>\S</td>
<td>除了空白符外任意一个字符匹配</td>
<td>[^\n\f\r\t\v]</td>
</tr>
<tr>
<td>.</td>
<td>匹配除换行符外的任意字符</td>
<td></td>
</tr>
</tbody></table>
<h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>构造函数创建</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/ab+c/i; //字面量形式</span><br><span class="line">new RegExp(&#x27;ab+c&#x27;, &#x27;i&#x27;); // 首个参数为字符串模式的构造函数</span><br><span class="line">new RegExp(/ab+c/, &#x27;i&#x27;); // 首个参数为常规字面量的构造函数</span><br></pre></td></tr></table></figure>

<p>使用<code>//</code>进行包裹，使用 test 方法进行测试，返回布尔值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 【正则表达式中不需要加引号（不管是字符型还是数字型）】</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> regExjp = <span class="regexp">/12/</span>; <span class="comment">//只要包含了12都是true</span></span><br><span class="line"><span class="built_in">console</span>.log(regExjp.test(<span class="string">&quot;123&quot;</span>)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ^表示开始，$表示结束【如果^和$同时出现，表示必须是精确匹配】</span></span><br><span class="line"><span class="keyword">let</span> regExp1 = <span class="regexp">/^1$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(regExp1.test(<span class="string">&quot;1&quot;</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(regExp1.test(<span class="string">&quot;11&quot;</span>)); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// []表示可选</span></span><br><span class="line"><span class="keyword">let</span> regExp2 = <span class="regexp">/[1234]/</span>; <span class="comment">//包含1234中任一数字都为真</span></span><br><span class="line"><span class="built_in">console</span>.log(regExp2.test(<span class="string">&quot;2&quot;</span>)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> regExp3 = <span class="regexp">/[a-zA-Z]/</span>; <span class="comment">//从a到z,从A到Z</span></span><br><span class="line"><span class="built_in">console</span>.log(regExp3.test(<span class="string">&quot;d&quot;</span>)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> regExp4 = <span class="regexp">/[a-zA-Z0-9]/</span>; <span class="comment">//从a到z,从A到Z,从0到9</span></span><br><span class="line"><span class="built_in">console</span>.log(regExp4.test(<span class="string">&quot;8&quot;</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;*&quot;</span>.repeat(<span class="number">10</span>));</span><br><span class="line"><span class="built_in">console</span>.log(regExp4.test(<span class="string">&quot;B&quot;</span>)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果[]中包含了^，则表示取反，即不包含</span></span><br><span class="line"><span class="keyword">let</span> regExp5 = <span class="regexp">/[^1-8]/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(regExp5.test(<span class="string">&quot;8&quot;</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(regExp5.test(<span class="string">&quot;9&quot;</span>)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 表示重复具体次数</span></span><br><span class="line"><span class="keyword">let</span> regExp1 = <span class="regexp">/^[0-5]&#123;3&#125;$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(regExp1.test(<span class="string">&quot;123&quot;</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(regExp1.test(<span class="string">&quot;127&quot;</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(regExp1.test(<span class="string">&quot;12&quot;</span>)); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//表示重复区间【加一个逗号，表示没有上限】</span></span><br><span class="line"><span class="keyword">let</span> regExp2 = <span class="regexp">/^[1-6]&#123;2,&#125;$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;2*&quot;</span>.repeat(<span class="number">10</span>));</span><br><span class="line"><span class="built_in">console</span>.log(regExp2.test(<span class="string">&quot;124&quot;</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(regExp2.test(<span class="string">&quot;21&quot;</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(regExp2.test(<span class="string">&quot;45616&quot;</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(regExp2.test(<span class="string">&quot;2&quot;</span>)); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//表示重复区间</span></span><br><span class="line"><span class="keyword">let</span> regExp3 = <span class="regexp">/^[a-g]&#123;2,4&#125;$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;3*&quot;</span>.repeat(<span class="number">10</span>));</span><br><span class="line"><span class="built_in">console</span>.log(regExp3.test(<span class="string">&quot;bea&quot;</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(regExp3.test(<span class="string">&quot;hjalh&quot;</span>)); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//*表示重复[0,+∞]次数</span></span><br><span class="line"><span class="keyword">let</span> regExp4 = <span class="regexp">/^[0-6]*$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;4*&quot;</span>.repeat(<span class="number">10</span>));</span><br><span class="line"><span class="built_in">console</span>.log(regExp4.test(<span class="string">&quot;&quot;</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(regExp4.test(<span class="string">&quot;5&quot;</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(regExp4.test(<span class="string">&quot;21342144&quot;</span>)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//+表示重复[1，+∞]次数</span></span><br><span class="line"><span class="keyword">let</span> regExp5 = <span class="regexp">/^[0-8]+$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;5*&quot;</span>.repeat(<span class="number">10</span>));</span><br><span class="line"><span class="built_in">console</span>.log(regExp5.test(<span class="string">&quot;&quot;</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(regExp5.test(<span class="string">&quot;324&quot;</span>)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//？表示出现0次或者1次</span></span><br><span class="line"><span class="keyword">let</span> regExp6 = <span class="regexp">/^[0-3]?$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;6*&quot;</span>.repeat(<span class="number">10</span>));</span><br><span class="line"><span class="built_in">console</span>.log(regExp6.test(<span class="string">&quot;&quot;</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(regExp6.test(<span class="string">&quot;2&quot;</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(regExp6.test(<span class="string">&quot;222&quot;</span>)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<h3 id="预定义类使用"><a href="#预定义类使用" class="headerlink" title="预定义类使用"></a>预定义类使用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一般的话，除了简单的设定数字字母等，还可以直接使用预定义类，这样会更简洁方便</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1   \d表示数字，\D表示除了数字之外的字符</span></span><br><span class="line"><span class="keyword">let</span> reg1 = <span class="regexp">/\d/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">&quot;h&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//2   \w表示任意的字母数字下划线相当于[0-9a-zA-Z_] 、 \W表示取反</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3   \s匹配空格（换行符、制表符、空格等）相当于[\t\r\n\v\f]   \S表示取反</span></span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>匹配任意数字</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> hd = <span class="string">&quot;houdunren 2010&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(hd.match(<span class="regexp">/\d/g</span>)); <span class="comment">//[&quot;2&quot;, &quot;0&quot;, &quot;1&quot;, &quot;0&quot;]</span></span><br></pre></td></tr></table></figure>

<p>匹配所有电话号码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> hd = <span class="string">`</span></span><br><span class="line"><span class="string">	张三:010-99999999,李四:020-88888888</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> res = hd.match(<span class="regexp">/\d&#123;3&#125;-\d&#123;7,8&#125;/g</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br></pre></td></tr></table></figure>

<p>获取所有用户名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> hd = <span class="string">`</span></span><br><span class="line"><span class="string">张三:010-99999999,李四:020-88888888`</span>;</span><br><span class="line"><span class="keyword">let</span> res = hd.match(<span class="regexp">/[^:\d-,]+/g</span>); <span class="comment">//非（: 数字 -）</span></span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br></pre></td></tr></table></figure>

<p>匹配任意非数字</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\D/</span>.test(<span class="number">2029</span>)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<p>匹配字母数字下划线</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> hd = <span class="string">&quot;hdcms@&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(hd.match(<span class="regexp">/\w/g</span>)); <span class="comment">//[&quot;h&quot;, &quot;d&quot;, &quot;c&quot;, &quot;m&quot;, &quot;s&quot;]</span></span><br></pre></td></tr></table></figure>

<p>匹配除了字母,数字或下划线外与任何字符匹配</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\W/</span>.test(<span class="string">&quot;@&quot;</span>)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>匹配与任意一个空白字符匹配</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\s/</span>.test(<span class="string">&quot; &quot;</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\s/</span>.test(<span class="string">&quot;\n&quot;</span>)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>匹配除了空白符外任意一个字符匹配</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> hd = <span class="string">&quot;hdcms@&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(hd.match(<span class="regexp">/\S/g</span>)); <span class="comment">//[&quot;2&quot;, &quot;0&quot;, &quot;1&quot;, &quot;0&quot;,&quot;@&quot;]</span></span><br></pre></td></tr></table></figure>

<p>如果要匹配点则需要转义</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> hd = <span class="string">`houdunren@com`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/houdunren.com/i</span>.test(hd)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/houdunren\.com/i</span>.test(hd)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<p>使用<code>.</code>匹配除换行符外任意字符，下面匹配不到<code>hdcms.com</code> 因为有换行符</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="string">`</span></span><br><span class="line"><span class="string">  https://www.houdunren.com</span></span><br><span class="line"><span class="string">  hdcms.com</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(url.match(<span class="regexp">/.+/</span>)[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>

<h3 id="RegExp-prototype-test"><a href="#RegExp-prototype-test" class="headerlink" title="RegExp.prototype.test()"></a>RegExp.prototype.test()</h3><p><strong><code>test()</code></strong> 方法执行一个检索，用来查看正则表达式与指定的字符串是否匹配。返回 <code>true</code> 或 <code>false</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;table football&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;foo*&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> globalRegex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;foo*&quot;</span>, <span class="string">&quot;g&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(regex.test(str));</span><br><span class="line"><span class="comment">// expected output: true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(globalRegex.lastIndex);</span><br><span class="line"><span class="comment">// expected output: 0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(globalRegex.test(str));</span><br><span class="line"><span class="comment">// expected output: true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(globalRegex.lastIndex);</span><br><span class="line"><span class="comment">// expected output: 9</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(globalRegex.test(str));</span><br><span class="line"><span class="comment">// expected output: false</span></span><br></pre></td></tr></table></figure>

<h3 id="String-prototype-match"><a href="#String-prototype-match" class="headerlink" title="String.prototype.match()"></a>String.prototype.match()</h3><p>match() 方法检索返回一个<strong>字符串</strong>匹配正则表达式的结果，<strong>返回</strong>的是符合正则要求的元素组成的<strong>数组</strong>。</p>
<p>用法：<code>str.match(regexp)</code></p>
<ul>
<li><p>使用 <code>g</code> 修饰符可以全局操作内容</p>
</li>
<li><p>使用<code>i</code>表示不区分大小写字母的匹配</p>
</li>
<li><p>上述 g 和 i 都是在正则表达式<code>//</code>外边书写</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> paragraph = <span class="string">&quot;The quick brown fox jumps over the lazy dog. It barked.&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/[A-Z]/g</span>;</span><br><span class="line"><span class="keyword">const</span> found = paragraph.match(regex);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(found);</span><br><span class="line"><span class="comment">// expected output: Array [&quot;T&quot;, &quot;I&quot;]</span></span><br></pre></td></tr></table></figure>

<h3 id="String-prototype-replace"><a href="#String-prototype-replace" class="headerlink" title="String.prototype.replace()"></a>String.prototype.replace()</h3><p><code>str.replace(regexp|substr, newSubStr|function)</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正则表达式参数为:【/表达式/[switch]】</span></span><br><span class="line"><span class="comment">// switch称为修饰符，可以设定按照什么样的模式来进行匹配</span></span><br><span class="line"><span class="comment">//g:全局匹配  i:忽略大小写  gi:全局匹配和忽略大小写</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="string">&quot;hello poLl&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用replace只能替换一个</span></span><br><span class="line">b = a.replace(<span class="string">&quot;l&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">//helo poLl</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用g可以全局匹配相应的字符</span></span><br><span class="line"><span class="keyword">let</span> c = a.replace(<span class="regexp">/l/g</span>, <span class="string">&quot;9&quot;</span>); <span class="comment">//he99o poL9</span></span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用gi可以忽略大小写进行匹配</span></span><br><span class="line"><span class="keyword">let</span> d = a.replace(<span class="regexp">/l/gi</span>, <span class="string">&quot;9&quot;</span>); <span class="comment">//he99o po99</span></span><br><span class="line"><span class="built_in">console</span>.log(d);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 综合使用</span></span><br><span class="line"><span class="keyword">let</span> aa = <span class="string">&quot;我买了一把玩具枪&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> aaa = aa.replace(<span class="regexp">/买|枪/g</span>, <span class="string">&quot;**&quot;</span>); <span class="comment">//如果没有g的话也会识别不了两个</span></span><br></pre></td></tr></table></figure>

<h2 id="32-函数柯里化"><a href="#32-函数柯里化" class="headerlink" title="32. 函数柯里化"></a>32. 函数柯里化</h2><p>意义：<strong>统一先收集</strong>所有函数的<strong>参数</strong>，最后<strong>统一进行处理</strong>，提高了函数调用的灵活性。同时也可提高参数的复用性。</p>
<p>核心：使用函数递归（不知道具体函数个数）</p>
<p>以求和函数为例：下面的求和函数调用形式为：<code>add(x,y)</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">2</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure>

<p>这里求和函数调用形式为<code>adds(x)(y)</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">adds</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(adds(<span class="number">3</span>)(<span class="number">1</span>));</span><br></pre></td></tr></table></figure>

<p>简单实现柯里化加法函数</p>
<p>核心：首次调用返回的是<code>add_</code>函数，但是如果在调用<code>add</code>函数时在其前面使用一个<code>+</code>则会触发函数的<strong>隐式调用</strong>机制，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> arr = [...arguments];</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">add_</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    arr.push(...arguments);</span><br><span class="line">    <span class="keyword">return</span> add_;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 首次调用返回的是add_函数，但是如果在调用add_函数</span></span><br><span class="line">  add_.toString = <span class="function">() =&gt;</span> arr.reduce(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> pre + cur);</span><br><span class="line">  <span class="keyword">return</span> add_;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(+add(<span class="number">12</span>, <span class="number">2</span>, <span class="number">1</span>)(<span class="number">3</span>));</span><br></pre></td></tr></table></figure>

<h2 id="33-toString"><a href="#33-toString" class="headerlink" title="33. toString"></a>33. toString</h2><h3 id="Number-prototype-toString-2"><a href="#Number-prototype-toString-2" class="headerlink" title="Number.prototype.toString(2)"></a>Number.prototype.toString(2)</h3><p>将十进制转化为二进制</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">7</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.toString(<span class="number">2</span>));</span><br></pre></td></tr></table></figure>

<h3 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a>类型判断</h3><p><code>Obeject.prototype.toString.call()</code></p>
<p>返回字符串类型的类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> test = <span class="built_in">Object</span>.prototype.toString;</span><br><span class="line"></span><br><span class="line">test.call(<span class="keyword">new</span> <span class="built_in">Date</span>()); <span class="comment">// [object Date]</span></span><br><span class="line">test.call(<span class="keyword">new</span> <span class="built_in">String</span>()); <span class="comment">// [object String]</span></span><br><span class="line">test.call(<span class="built_in">Math</span>); <span class="comment">// [object Math]</span></span><br><span class="line"></span><br><span class="line">test.call(<span class="literal">undefined</span>); <span class="comment">// [object Undefined]</span></span><br><span class="line">test.call(<span class="literal">null</span>); <span class="comment">// [object Null]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(test.call(<span class="keyword">new</span> <span class="built_in">Date</span>()) === <span class="string">&quot;[object Date]&quot;</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><p>十进制转二进制</p>
<ul>
<li>Number.prototype.toString(2)</li>
</ul>
<p>二进制转十进制</p>
<ul>
<li>parseInt(string/number,2)</li>
</ul>
<h2 id="34-搜索框实现"><a href="#34-搜索框实现" class="headerlink" title="34. 搜索框实现"></a>34. 搜索框实现</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;search&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;val&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入课程名称&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;show&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> className = [</span></span><br><span class="line"><span class="javascript">        <span class="string">&quot;css&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">&quot;html&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">&quot;css面试&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">&quot;JavaScript&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">&quot;JavaScript核心&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">&quot;css核心&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">&quot;html核心&quot;</span>,</span></span><br><span class="line"><span class="javascript">      ];</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> val = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#val&quot;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> show = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.show&quot;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(val, submit);</span></span><br><span class="line"><span class="javascript">      val.addEventListener(<span class="string">&quot;keyup&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        show.style.display = <span class="string">&quot;block&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> str = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">        className.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> re = item.indexOf(val.value);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (re != -<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="javascript">            str += <span class="string">&quot;&lt;p&gt;&quot;</span> + item + <span class="string">&quot;&lt;/p&gt;&quot;</span>;</span></span><br><span class="line"><span class="javascript">          &#125;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (!val.value || !str) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// console.log(show);</span></span></span><br><span class="line"><span class="javascript">          show.innerHTML = <span class="string">&quot;&lt;p&gt;暂无结果&lt;/p&gt;&quot;</span>;</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          show.innerHTML = str;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">      val.addEventListener(<span class="string">&quot;blur&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        show.style.display = <span class="string">&quot;none&quot;</span>;</span></span><br><span class="line"><span class="javascript">        val.value = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="35-函数重载"><a href="#35-函数重载" class="headerlink" title="35. 函数重载"></a>35. 函数重载</h2><p>javascript 中没有真正意义上的函数重载，因为 javascript 中同一作用域下的同名函数，前者会被后者覆盖，但是可通过其他方法间接实现重载同样的效果，javascript 中的函数没有签名，它的参数是由包含零的多个数组来表示的。无函数签名的话重载是不可能做到的</p>
<p>但是我们可以简介方法实现重载效果，使用 arguments 对象，是函数内部的一个类数组对象，它里面保存着调用函数时，传递给函数的所有参数。 简单的讲就是使用逻辑判断，根据参数所在数组的长度来执行不同的代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="string">&quot;条件1&quot;</span>) &#123;</span><br><span class="line">    (<span class="string">&quot;函数1&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="string">&quot;条件2&quot;</span>) &#123;</span><br><span class="line">    (<span class="string">&quot;函数2&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重载的本质就是将多个功能相近的函数合并为同一个函数</p>
<h2 id="36-使用"><a href="#36-使用" class="headerlink" title="36. ??使用"></a>36. ??使用</h2><p>如果<code>??</code>左边为 undefined 或者 null，此时值取<code>??</code>右边的，反之则取<code>??</code>左边的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123; <span class="attr">name</span>: <span class="string">&quot;zsh&quot;</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(person?.age); <span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">let</span> re = person?.age ?? [];</span><br><span class="line"><span class="built_in">console</span>.log(re); <span class="comment">//[]</span></span><br><span class="line"><span class="keyword">let</span> res = <span class="literal">null</span> ?? [];</span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">//[]</span></span><br></pre></td></tr></table></figure>

<h2 id="37-弱引用"><a href="#37-弱引用" class="headerlink" title="37. 弱引用"></a>37. 弱引用</h2><p>下面的为强引用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> b = a;</span><br><span class="line">a = [];</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">//[1,2]</span></span><br></pre></td></tr></table></figure>

<p>弱引用 WeakSet 的作用：“弱弱的引用，不会组织垃圾回收”，可以忽略其引用。即当 WeakSet 中的某个元素被赋值为 null，便会立即被垃圾回收。相反，如果在 Set 中的话，借鉴强类型，即便在外部将其设置为 null，此时由于在 Set 中的引用还在，便不会主动被垃圾回收。</p>
<p>WeakSet 常用语 DOM 操作中。</p>
<h2 id="38-Proxy"><a href="#38-Proxy" class="headerlink" title="38. Proxy"></a>38. Proxy</h2><ul>
<li>如果没有 set 函数，那么所有关于赋值操作都无法生效</li>
<li>即使有 set 函数，如果没有书写<code>obj[key]=value</code>，那么赋值操作也不会生效</li>
</ul>
<p>下面是一些应用示例：</p>
<p>使用 Proxy 对数组进行操作，截取超过十个字符以后的文字，并用<code>...</code>进行代替</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">des</span>: <span class="string">&quot;我来自江西，喜欢打乒乓球，我爱学习&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;李四&quot;</span>,</span><br><span class="line">    <span class="attr">des</span>: <span class="string">&quot;我来自福建，我喜欢打游戏，我也热爱学习&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(a, &#123;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params">arr, key</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> desc = arr[key].des;</span><br><span class="line">    arr[key].des =</span><br><span class="line">      desc.length &gt; <span class="number">10</span> ? desc.substr(<span class="number">0</span>, <span class="number">10</span>) + <span class="string">&quot;.&quot;</span>.repeat(<span class="number">3</span>) : arr[key];</span><br><span class="line">    <span class="keyword">return</span> arr[key];</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(proxy[<span class="number">0</span>]); <span class="comment">//&#123;des: &quot;我来自江西，喜欢打乒...&quot; , name: &quot;张三&quot;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(a[<span class="number">0</span>]); <span class="comment">//&#123;des: &quot;我来自江西，喜欢打乒...&quot; , name: &quot;张三&quot;&#125;-------------&gt;转发成功</span></span><br></pre></td></tr></table></figure>

<p>使用 Proxy 进行验证 1</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> validator = &#123;</span><br><span class="line">  <span class="attr">set</span>: <span class="function"><span class="keyword">function</span> (<span class="params">obj, prop, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (prop === <span class="string">&quot;age&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="built_in">Number</span>.isInteger(value)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&quot;The age is not an integer&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (value &gt; <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RangeError</span>(<span class="string">&quot;The age seems invalid&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The default behavior to store the value</span></span><br><span class="line">    obj[prop] = value;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表示成功</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, validator);</span><br><span class="line"></span><br><span class="line">person.age = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.age);</span><br><span class="line"><span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line">person.age = <span class="string">&quot;young&quot;</span>;</span><br><span class="line"><span class="comment">// 抛出异常：Uncaught TypeError: The age is not an integer</span></span><br><span class="line"></span><br><span class="line">person.age = <span class="number">300</span>;</span><br><span class="line"><span class="comment">// 抛出异常：Uncaught RangeError: The age seems invalid</span></span><br></pre></td></tr></table></figure>

<p>使用 Proxy 进行验证 2</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">22</span>, <span class="number">999</span>];</span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(a, &#123;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params">arr, key</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> arr[key];</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params">obj, key, value</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 这里的value才是真正传进来的值</span></span><br><span class="line">    <span class="keyword">if</span> (value &gt; <span class="number">120</span>) &#123;</span><br><span class="line">      obj[key] = <span class="number">100</span> + <span class="string">&quot;岁以上&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      obj[key] = value + <span class="string">&quot;岁&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">proxy[<span class="number">0</span>] = <span class="number">130</span>;</span><br><span class="line"><span class="built_in">console</span>.log(proxy[<span class="number">0</span>]); <span class="comment">//100岁以上</span></span><br><span class="line"><span class="built_in">console</span>.log(a[<span class="number">0</span>]); <span class="comment">//100岁以上</span></span><br></pre></td></tr></table></figure>

<h2 id="39-Vue-双向数据绑定"><a href="#39-Vue-双向数据绑定" class="headerlink" title="39. Vue 双向数据绑定"></a>39. Vue 双向数据绑定</h2><p>关于 document 根据属性取值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;title&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;title&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  title = <span class="string">&quot;title&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// let test = document.querySelectorAll(`[v-model=$&#123;title&#125;]`)</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// let test = document.querySelectorAll(&#x27;[v-model=&quot;title&quot;]&#x27;)</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> test = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;[v-model=&#x27;title&#x27;],[v-bind=&#x27;title&#x27;]&quot;</span>);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(test); <span class="comment">//[input,input,div]</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;title&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;title&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="class"><span class="keyword">class</span> <span class="title">View</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//设置代理拦截</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(</span></span><br><span class="line"><span class="javascript">            &#123;&#125;,</span></span><br><span class="line"><span class="javascript">            &#123;</span></span><br><span class="line"><span class="javascript">              <span class="function"><span class="title">get</span>(<span class="params">obj, property</span>)</span> &#123;&#125;,</span></span><br><span class="line"><span class="javascript">              <span class="function"><span class="title">set</span>(<span class="params">obj, property, value</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                obj[property] = value;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 收集所有v-model和v-bind属性的标签</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span></span></span><br><span class="line"><span class="javascript">                  .querySelectorAll(</span></span><br><span class="line"><span class="javascript">                    <span class="string">`[v-model=&quot;<span class="subst">$&#123;property&#125;</span>&quot;],[v-bind=&quot;<span class="subst">$&#123;property&#125;</span>&quot;]`</span></span></span><br><span class="line"><span class="javascript">                  )</span></span><br><span class="line"><span class="javascript">                  .forEach(<span class="function">(<span class="params">el</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 如果是v-model即为input标签，则将值赋给inpu.value</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (el <span class="keyword">instanceof</span> HTMLInputElement) &#123;</span></span><br><span class="line"><span class="javascript">                      el.value = value;</span></span><br><span class="line"><span class="javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                      <span class="comment">// 如果是v-bind即为本例中的div标签，则将值赋给div的innerHTML</span></span></span><br><span class="line"><span class="javascript">                      el.innerHTML = value;</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                  &#125;);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">              &#125;,</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">          );</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//初始化绑定元素事件</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">run</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> that = <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">const</span> els = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;[v-model]&quot;</span>);</span></span><br><span class="line"><span class="javascript">          els.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            item.addEventListener(<span class="string">&quot;keyup&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">              that.proxy[<span class="built_in">this</span>.getAttribute(<span class="string">&quot;v-model&quot;</span>)] = <span class="built_in">this</span>.value;</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript">          &#125;);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">new</span> View().run();</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="40-Symbol-使用"><a href="#40-Symbol-使用" class="headerlink" title="40. Symbol 使用"></a>40. Symbol 使用</h2><p>Symbol 用于防止属性名冲突而产生的，比如向第三方对象中添加属性时。</p>
<p>Symbol 的值是唯一的，独一无二的不会重复的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> hd = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> edu = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="built_in">console</span>.log(hd); <span class="comment">//symbol</span></span><br><span class="line"><span class="built_in">console</span>.log(hd == edu); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<h3 id="Symbol-for"><a href="#Symbol-for" class="headerlink" title="Symbol.for"></a>Symbol.for</h3><p>根据描述获取 Symbol，如果不存在则新建一个 Symbol</p>
<ul>
<li>使用 Symbol.for 会在系统中将 Symbol 登记</li>
<li>使用 Symbol 则不会登记</li>
</ul>
<h3 id="缓存操作"><a href="#缓存操作" class="headerlink" title="缓存操作"></a>缓存操作</h3><p>核心：源数据要有 symbol，缓存数据时使用 symbol 当做<strong>键值</strong>来进行存储</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cache</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> data = &#123;&#125;;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">set</span>(<span class="params">key, value</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.data[key] = value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">get</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.data[key];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="attr">key</span>: <span class="built_in">Symbol</span>(<span class="string">&quot;我是个男的&quot;</span>),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cart = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="attr">key</span>: <span class="built_in">Symbol</span>(<span class="string">&quot;我是个女的&quot;</span>),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Cache.set(user.key, user);</span><br><span class="line">Cache.set(cart.key, cart);</span><br><span class="line"><span class="built_in">console</span>.log(Cache.get(user.key));</span><br></pre></td></tr></table></figure>

<h2 id="41-class"><a href="#41-class" class="headerlink" title="41. class"></a>41. class</h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p><a href="https://github.com/tc39/proposal-class-fields">ES2022</a> 为类的实例属性，又规定了一种新写法。实例属性现在除了可以定义在<code>constructor()</code>方法里面的<code>this</code>上，也可以定义在类内部的最顶层。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原来的写法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IncreasingCounter</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>._count = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title">value</span>() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Getting the current value!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._count;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">increment</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>._count++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面示例中，实例属性<code>_count</code>定义在<code>constructor()</code>方法里面的<code>this</code>上面。</p>
<p>现在的新写法是，这个属性也可以定义在类的最顶层，其他都不变。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IncreasingCounter</span> </span>&#123;</span><br><span class="line">  _count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">get</span> <span class="title">value</span>() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Getting the current value!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._count;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">increment</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>._count++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，实例属性<code>_count</code>与取值函数<code>value()</code>和<code>increment()</code>方法，处于同一个层级。这时，不需要在实例属性前面加上<code>this</code>。</p>
<p>注意，新写法定义的属性是实例对象自身的属性，而不是定义在实例对象的原型上面。</p>
<p>这种新写法的好处是，所有实例对象自身的属性都定义在类的头部，看上去比较整齐，一眼就能看出这个类有哪些实例属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo</span> </span>&#123;</span><br><span class="line">  bar = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">  baz = <span class="string">&quot;world&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码，一眼就能看出，<code>foo</code>类有两个实例属性，一目了然。另外，写起来也比较简洁。</p>
<h3 id="静态方法："><a href="#静态方法：" class="headerlink" title="静态方法："></a>静态方法：</h3><p><a href="https://es6.ruanyifeng.com/#docs/class">原文链接</a></p>
<p>如果静态方法包含<code>this</code>关键字，这个<code>this</code>指的是类，而不是实例。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">bar</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.baz();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">baz</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">baz</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.bar(); <span class="comment">// hello</span></span><br></pre></td></tr></table></figure>

<p>父类的静态方法，可以被子类继承。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">classMethod</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> <span class="keyword">extends</span> <span class="title">Foo</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Bar.classMethod(); <span class="comment">// &#x27;hello&#x27;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，父类<code>Foo</code>有一个静态方法，子类<code>Bar</code>可以调用这个方法。</p>
<p>静态方法也是可以从<code>super</code>对象上调用的。————————&gt;以下例子足以说明 oob 的<strong>多态</strong>性质</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">classMethod</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> <span class="keyword">extends</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">classMethod</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.classMethod() + <span class="string">&quot;, too&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Bar.classMethod(); <span class="comment">// &quot;hello, too&quot;</span></span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/tc39/proposal-class-fields">ES2022</a>正式为<code>class</code>添加了私有属性，方法是在属性名之前使用<code>#</code>表示。</p>
<h3 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> myStaticProp = <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(MyClass.myStaticProp); <span class="comment">// 42</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="私有方法"><a href="#私有方法" class="headerlink" title="私有方法"></a>私有方法</h3><p>私有方法和私有属性，是只能在类的内部访问的方法和属性，外部不能访问。这是常见需求，有利于代码的封装。</p>
<p>但早期的 ES6 不提供，只能通过变通方法模拟实现。</p>
<p>一种做法是在命名上加以区别。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 公有方法</span></span><br><span class="line">  <span class="function"><span class="title">foo</span>(<span class="params">baz</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>._bar(baz);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 私有方法</span></span><br><span class="line">  <span class="function"><span class="title">_bar</span>(<span class="params">baz</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">this</span>.snaf = baz);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>_bar()</code>方法前面的下划线，表示这是一个只限于内部使用的私有方法。但是，这种命名是<strong>不保险</strong>的，在类的外部，还是可以调用到这个方法。</p>
<p><strong>正式用法：</strong></p>
<p><a href="https://github.com/tc39/proposal-class-fields">ES2022</a>正式为<code>class</code>添加了私有属性，方法是在属性名之前使用<code>#</code>表示。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IncreasingCounter</span> </span>&#123;</span><br><span class="line">  #count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">get</span> <span class="title">value</span>() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Getting the current value!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.#count;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">increment</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.#count++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="in-运算符"><a href="#in-运算符" class="headerlink" title="in 运算符"></a>in 运算符</h3><p><a href="https://github.com/tc39/proposal-private-fields-in-in">ES2022</a> 改进了<code>in</code>运算符，使它也可以用来判断私有属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">  #brand;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">isC</span>(<span class="params">obj</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (#brand <span class="keyword">in</span> obj) &#123;</span><br><span class="line">      <span class="comment">// 私有属性 #brand 存在</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 私有属性 #foo 不存在</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面示例中，<code>in</code>运算符判断某个对象是否有私有属性<code>#foo</code>。它不会报错，而是返回一个布尔值。</p>
<p>这种用法的<code>in</code>，也可以跟<code>this</code>一起配合使用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  #foo = <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="title">m</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(#foo <span class="keyword">in</span> <span class="built_in">this</span>); <span class="comment">// true</span></span><br><span class="line">    <span class="built_in">console</span>.log(#bar <span class="keyword">in</span> <span class="built_in">this</span>); <span class="comment">// false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，判断私有属性时，<code>in</code>只能用在类的内部。</p>
<p>子类从父类继承的私有属性，也可以使用<code>in</code>运算符来判断。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  #foo = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">test</span>(<span class="params">obj</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(#foo <span class="keyword">in</span> obj);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubA</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">A.test(<span class="keyword">new</span> SubA()); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>上面示例中，<code>SubA</code>从父类继承了私有属性<code>#foo</code>，<code>in</code>运算符也有效。</p>
<h2 id="42-前端模块化"><a href="#42-前端模块化" class="headerlink" title="42. 前端模块化"></a>42. 前端模块化</h2><h3 id="commonjs"><a href="#commonjs" class="headerlink" title="commonjs"></a>commonjs</h3><ul>
<li><p>使用<strong>赋值表达式</strong>进行导出</p>
</li>
<li><p>使用 exports、module.exports 作为关键字进行导出，使用 require 关键字进行导入</p>
</li>
<li><p>使用<strong>exports.xxx=……<strong>进行导出时总会</strong>包裹一层对象</strong>，接收时可以进行解构。————–&gt;<strong>分别暴露</strong></p>
</li>
<li><p>使用<strong>module.exports=……<strong>进行导出，</strong>导出什么就是什么</strong>，即当做一个完整模块进行导出———&gt;“<strong>相当于 es6 的默认暴露</strong>”</p>
</li>
<li><p>同一个文件中<strong>不能同时出现</strong>exports、module.exports 进行导出，会覆盖。</p>
</li>
</ul>
<h4 id="exports"><a href="#exports" class="headerlink" title="exports"></a>exports</h4><p>分别暴露</p>
<p><strong>例 1：</strong></p>
<p>a.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>b.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> aa = <span class="built_in">require</span>(<span class="string">&quot;./a.js&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(aa); <span class="comment">//&#123;a:1&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>例 2：</strong></p>
<p>a.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.Test = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">  <span class="function"><span class="title">test</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;haha&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>b.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> re = <span class="built_in">require</span>(<span class="string">&quot;./a&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(re); <span class="comment">//&#123; Classs: [class (anonymous)] &#125;</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> re.Test();</span><br><span class="line">a.test(); <span class="comment">//&#x27;haha&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="module-exports"><a href="#module-exports" class="headerlink" title="module.exports"></a>module.exports</h4><p><strong>例 3：</strong></p>
<p>使用 module 关键字，表示整体导出，<strong>导出的是什么就是什么</strong>，使用 require 来接收即可</p>
<p>a.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;haha&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>b.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> re = <span class="built_in">require</span>(<span class="string">&quot;./a&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(re); <span class="comment">//[Function (anonymous)]</span></span><br><span class="line">re(); <span class="comment">//&#x27;haha&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>例 4：</strong></p>
<p>a.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;zsh&quot;</span>,</span><br><span class="line">  <span class="attr">test</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;haha&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>b.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> re = <span class="built_in">require</span>(<span class="string">&quot;./a&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(re); <span class="comment">//&#123; name: &#x27;zsh&#x27;, test: [Function: test] &#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h3><p>使用 export，import 关键字进行导出导入</p>
<h4 id="export"><a href="#export" class="headerlink" title="export"></a>export</h4><p><strong>具名导出</strong>如果想获取具体某个变量则<strong>必须使用</strong><u>解构赋值</u>的形式来进行取值，<strong>或者</strong>使用**<code>*</code>**来进行代替</p>
<p>b.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> a = <span class="string">&quot;haha&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> b = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;zsh&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>a.html【导入<strong>法 1</strong>】</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; a, b &#125; <span class="keyword">from</span> <span class="string">&quot;./b.js&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// &#x27;haha&#x27;</span></span><br></pre></td></tr></table></figure>

<p>a.html【导入<strong>法 2</strong>】</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> aa <span class="keyword">from</span> <span class="string">&quot;./b.js&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(aa); <span class="comment">// Module &#123;Symbol(Symbol.toStringTag): &#x27;Module&#x27;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(aa.a); <span class="comment">// &#x27;haha&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="export-default"><a href="#export-default" class="headerlink" title="export default"></a>export default</h4><p>使用<strong>任意变量</strong>进行接收，<strong>导出什么就是什么</strong></p>
<p>b.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">str</span>: <span class="string">&quot;haha&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>a.html</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> test <span class="keyword">from</span> <span class="string">&quot;./b.js&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(test); <span class="comment">//&#123;str: &#x27;haha&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="43-数组考法"><a href="#43-数组考法" class="headerlink" title="43. 数组考法"></a>43. 数组考法</h2><h4 id="map-和-forEach-区别"><a href="#map-和-forEach-区别" class="headerlink" title="map 和 forEach 区别"></a>map 和 forEach 区别</h4><ul>
<li>map 会<strong>返回一个新数组</strong>，但是如果回调函数中没有 return 关键字则 return 回来一个全为 undefined 的数组。正常操作<strong>不会改变原数组</strong>，<strong>但是</strong>可以通过 callBack<strong>更改原数组</strong>。</li>
<li>forEach<strong>不会</strong><u>返回数组</u>。可以通过 callBack<strong>更改原数组</strong>，一般用于 DOM 操作。</li>
<li><strong>都可以</strong>通过 callBack 来<strong>更改原数组</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">let</span> a = arr.forEach(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> <span class="built_in">console</span>.log(item, index));</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="keyword">let</span> b = arr.map(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> item + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure>

<p>forEach 通过 callBack<strong>更改原数组</strong>，不返回新数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">let</span> a = arr.forEach(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> (arr[index] = arr[index] + <span class="number">2</span>));</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[3, 4, 5, 6, 7, 8]</span></span><br></pre></td></tr></table></figure>

<p>map 通过 callBack<strong>更改原数组</strong>，返回新数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">let</span> b = arr.map(<span class="function">(<span class="params">item, index, arrs</span>) =&gt;</span> &#123;</span><br><span class="line">  arrs[index] = arrs[index] + <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">return</span> item * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// [2, 4, 6, 8, 10, 12]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[3, 4, 5, 6, 7, 8]</span></span><br></pre></td></tr></table></figure>

<h2 id="DNS-解析过程"><a href="#DNS-解析过程" class="headerlink" title="DNS 解析过程"></a>DNS 解析过程</h2><img src="C:\Users\90484\AppData\Roaming\Typora\typora-user-images\image-20221017162131284.png" alt="image-20221017162131284" style="zoom: 67%;" />

<p>首先进行本地解析</p>
<img src="C:\Users\90484\AppData\Roaming\Typora\typora-user-images\image-20221017162043366.png" alt="image-20221017162043366" style="zoom:50%;" />

<p>总体流程</p>
<img src="C:\Users\90484\AppData\Roaming\Typora\typora-user-images\image-20221017162711039.png" alt="image-20221017162711039" style="zoom: 50%;" />

<h1 id="二、Vue3-源码"><a href="#二、Vue3-源码" class="headerlink" title="二、Vue3 源码"></a>二、Vue3 源码</h1><h2 id="0-遗漏知识点"><a href="#0-遗漏知识点" class="headerlink" title="0. 遗漏知识点"></a>0. 遗漏知识点</h2><p>vscode 中【转到】可以快速定位到指定文件，快捷键为<code>Ctrl+P</code>，可以搜索指定文件。</p>
<h2 id="1-环境搭建流程"><a href="#1-环境搭建流程" class="headerlink" title="1. 环境搭建流程"></a>1. 环境搭建流程</h2><ol>
<li><p>下载源码</p>
</li>
<li><p>使用 pnpm 安装依赖</p>
</li>
<li><p>package.json 文件中的 dev 脚本后加上<code> --sourcemap</code>，之后直接<code>pnpm run dev</code>运行起来</p>
<p><img src="C:\Users\90484\AppData\Roaming\Typora\typora-user-images\image-20221003164355634.png" alt="image-20221003164355634"></p>
</li>
</ol>
<h2 id="2-源码关键"><a href="#2-源码关键" class="headerlink" title="2. 源码关键"></a>2. 源码关键</h2><h3 id="虚拟-DOM"><a href="#虚拟-DOM" class="headerlink" title="虚拟 DOM"></a>虚拟 DOM</h3><p><a href="https://www.bilibili.com/video/BV1JR4y1R7Ln/?spm_id_from=333.999.0.0">原文链接</a></p>
<p><code>renderer.ts</code>的 patchKey 关键字处</p>
<p>虚拟 DOM 是表示真实 DOM 的 js 对象，DIFF 算法的核心目的就是<strong>最小化的更新 DOM 结构</strong>，本质就是找出两个 js 对象的差异。</p>
<img src="C:\Users\90484\AppData\Roaming\Typora\typora-user-images\image-20221017171128292.png" alt="image-20221017171128292" style="zoom:67%;" />

<p>对比流程</p>
<img src="C:\Users\90484\AppData\Roaming\Typora\typora-user-images\image-20221017172227126.png" alt="image-20221017172227126" style="zoom:67%;" />

<p>同级比对</p>
<img src="C:\Users\90484\AppData\Roaming\Typora\typora-user-images\image-20221017172342985.png" alt="image-20221017172342985" style="zoom:67%;" />

<p>对比细节</p>
<img src="C:\Users\90484\AppData\Roaming\Typora\typora-user-images\image-20221017172938196.png" alt="image-20221017172938196" style="zoom:67%;" />
]]></content>
  </entry>
  <entry>
    <title>JS终极总结</title>
    <url>/2022/04/01/2022/js-all/</url>
    <content><![CDATA[<h1 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h1><h2 id="常见API"><a href="#常见API" class="headerlink" title="常见API"></a>常见API</h2><h3 id="Object-entries"><a href="#Object-entries" class="headerlink" title="Object.entries"></a>Object.entries</h3><blockquote>
<p><code>Object.entries()</code>方法<strong>返回</strong>一个给定对象自身可枚举属性的<strong>键值对数组</strong>，其排列与使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...in"><code>for...in</code></a> 循环遍历该对象时返回的顺序一致（区别在于 for-in 循环还会枚举<strong>原型链中的属性</strong>）。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> object1 = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="string">&#x27;somestring&#x27;</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">42</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [key, value] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(object1)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// expected output: &quot;a: somestring&quot; / &quot;b: 42&quot;</span></span><br></pre></td></tr></table></figure>

<p>将Object转化为Map</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map"><code>new Map()</code></a> 构造函数接受一个可迭代的<code>entries</code>。借助<code>Object.entries</code>方法可以很容易的将<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object"><code>Object</code></a>转换为<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map"><code>Map</code></a>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">    <span class="attr">baz</span>: <span class="number">42</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(<span class="built_in">Object</span>.entries(obj));</span><br><span class="line"><span class="built_in">console</span>.log(map); <span class="comment">// Map &#123; foo: &quot;bar&quot;, baz: 42 &#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="getter-setter"><a href="#getter-setter" class="headerlink" title="getter/setter"></a>getter/setter</h2><h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><p><strong>Proxy</strong> 对象用于创建一个<strong>对象</strong>的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等）。Proxy的特点如下：</p>
<ul>
<li><code>setter/getter</code> 是对<strong>单个对象属性</strong>的控制，而代理是对整个<strong>对象</strong>的控制。</li>
</ul>
<ul>
<li>读写属性时代码更简洁</li>
<li>对象的多个属性控制统一交给代理完成</li>
<li>严格模式下 <code>set</code> 必须返回布尔值</li>
</ul>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><blockquote>
<p><code>const p = new Proxy(target, handler)</code></p>
<p>target：要使用 <code>Proxy</code> 包装的目标对象（可以是任何类型的对象，包括原生<strong>数组</strong>，<strong>函数</strong>，甚至<strong>另一个代理</strong>）。</p>
<p>handler：一个通常以函数作为属性的<strong>对象</strong>，各属性中的函数分别定义了在执行各种操作时代理 <code>p</code> 的行为。</p>
</blockquote>
<h4 id="1-handler-get"><a href="#1-handler-get" class="headerlink" title="1.handler.get()"></a><strong>1.<code>handler.get()</code></strong></h4><p>用于拦截对象的<strong>读取属性</strong>操作，常用前两个参数，get方法可以<strong>返回任何值</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="function"><span class="keyword">function</span> (<span class="params">target, property, receiver</span>) </span>&#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="2-hander-set"><a href="#2-hander-set" class="headerlink" title="2.hander.set()"></a>2.<strong><code>hander.set()</code></strong></h4><p><strong>设置属性值</strong>操作的捕获器，<strong>常用前两个参数</strong>，<strong>receiver</strong>为Proxy或者继承Proxy的对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, &#123;</span><br><span class="line">    <span class="attr">set</span>: <span class="function"><span class="keyword">function</span> (<span class="params">target, property, value, receiver</span>) </span>&#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>特别注意：读取、设定值都必须<strong>经过代理</strong>才能使得get和set生效，如果直接<strong>改变原对象</strong>，那么get和set方法都不会生效，但是此时<strong>代理对象的值</strong>确实已经<strong>改变了</strong></p>
<p>牛刀小试</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zsh&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params">obj, key</span>)</span> &#123;</span><br><span class="line">        <span class="comment">// if (obj[key] == &#x27;zsh&#x27;)</span></span><br><span class="line">        <span class="keyword">if</span> (key == <span class="string">&#x27;name&#x27;</span>) <span class="keyword">return</span> <span class="string">&#x27;crazyzsh&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">obj, key, value</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="string">&#x27;age&#x27;</span>) &#123;</span><br><span class="line">            obj[key] = <span class="number">118</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> objProxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj, handler)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取值【此时会触发get()方法，上述get方法中，只要一读取到name属性，它的返回值就是读取到的值】</span></span><br><span class="line"><span class="built_in">console</span>.log(objProxy.name);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改值【此时会触发set()方法，上set方法中，只要通过代理设定age值，那么age值就是设定的age值】</span></span><br><span class="line">objProxy.age = <span class="number">17</span></span><br><span class="line"><span class="built_in">console</span>.log(objProxy);</span><br></pre></td></tr></table></figure>

<h4 id="3-handler-apply"><a href="#3-handler-apply" class="headerlink" title="3.handler.apply()"></a><strong>3.<code>handler.apply()</code></strong></h4><p>用于拦截函数的调用，相关参数如下：</p>
<ul>
<li>target：目标对象（函数）</li>
<li>thisArg：被调用时的上下文对象</li>
<li>argumentsList：被调用时的参数数组</li>
<li>返回值：apply方法可以返回任何值</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, &#123;</span><br><span class="line">    <span class="attr">apply</span>: <span class="function"><span class="keyword">function</span> (<span class="params">target, thisArg, argumentsList</span>) </span>&#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">    <span class="attr">apply</span>: <span class="function"><span class="keyword">function</span> (<span class="params">target, thisArg, argumentsList</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`Calculate sum: <span class="subst">$&#123;argumentsList&#125;</span>`</span>); <span class="comment">// expected output: &quot;Calculate sum: 1,2&quot;</span></span><br><span class="line">        <span class="keyword">return</span> target(argumentsList[<span class="number">0</span>], argumentsList[<span class="number">1</span>]) * <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy1 = <span class="keyword">new</span> <span class="built_in">Proxy</span>(sum, handler);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// expected output: 3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(proxy1(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// expected output: 30</span></span><br></pre></td></tr></table></figure>

<h3 id="实用例子"><a href="#实用例子" class="headerlink" title="实用例子"></a>实用例子</h3><h4 id="截取字符串"><a href="#截取字符串" class="headerlink" title="截取字符串"></a>截取字符串</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">    <span class="comment">// 当代理的是数组时，此时的index就为索引</span></span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params">target, key</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> title = target[key].title;</span><br><span class="line">        <span class="comment">// 指定截取长度</span></span><br><span class="line">        <span class="keyword">const</span> len = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">return</span> title.length &gt; len ?</span><br><span class="line">            title.substr(<span class="number">0</span>, len) + <span class="string">&quot;.&quot;</span>.repeat(<span class="number">3</span>) :</span><br><span class="line">            title;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> lessons = [&#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&quot;媒体查询响应式布局&quot;</span>,</span><br><span class="line">        <span class="attr">category</span>: <span class="string">&quot;css&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&quot;FLEX 弹性盒模型&quot;</span>,</span><br><span class="line">        <span class="attr">category</span>: <span class="string">&quot;css&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&quot;MYSQL多表查询随意操作&quot;</span>,</span><br><span class="line">        <span class="attr">category</span>: <span class="string">&quot;mysql&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> stringDotProxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(lessons, handler);</span><br><span class="line"><span class="built_in">console</span>.log(stringDotProxy[<span class="number">2</span>]); <span class="comment">//MYSQL...</span></span><br></pre></td></tr></table></figure>

<h4 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;title&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;title&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">View</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//设置代理拦截</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">get</span>(<span class="params">obj, property</span>)</span> &#123;&#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">set</span>(<span class="params">obj, property, value</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    obj[property] = value;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span></span></span><br><span class="line"><span class="javascript">                        .querySelectorAll(</span></span><br><span class="line"><span class="javascript">                            <span class="string">`[v-model=&quot;<span class="subst">$&#123;property&#125;</span>&quot;],[v-bind=&quot;<span class="subst">$&#123;property&#125;</span>&quot;]`</span></span></span><br><span class="line"><span class="javascript">                        )</span></span><br><span class="line"><span class="javascript">                        .forEach(<span class="function"><span class="params">el</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                            el.innerHTML = value;</span></span><br><span class="line"><span class="javascript">                            el.value = value;</span></span><br><span class="line"><span class="javascript">                        &#125;);</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript">            <span class="comment">//初始化绑定元素事件</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.run = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> els = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;[v-model]&quot;</span>);</span></span><br><span class="line"><span class="javascript">                els.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    item.addEventListener(<span class="string">&quot;keyup&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        proxy[<span class="built_in">this</span>.getAttribute(<span class="string">&quot;v-model&quot;</span>)] = <span class="built_in">this</span>.value;</span></span><br><span class="line"><span class="javascript">                    &#125;);</span></span><br><span class="line"><span class="javascript">                &#125;);</span></span><br><span class="line"><span class="javascript">            &#125;;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> view = <span class="keyword">new</span> View().run();</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: <span class="number">#34495e</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">input</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: solid <span class="number">10px</span> <span class="number">#ddd</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.error</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: solid <span class="number">10px</span> red;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">validate</span> <span class="attr">rule</span>=<span class="string">&quot;max:12,min:3&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">validate</span> <span class="attr">rule</span>=<span class="string">&quot;max:3,isNumber&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="javascript">        &quot;use strict&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//验证处理类</span></span></span><br><span class="line"><span class="javascript">        <span class="class"><span class="keyword">class</span> <span class="title">Validate</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">max</span>(<span class="params">value, len</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> value.length &lt;= len;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">min</span>(<span class="params">value, len</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> value.length &gt;= len;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">isNumber</span>(<span class="params">value</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="regexp">/^\d+$/</span>.test(value);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//代理工厂</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">makeProxy</span>(<span class="params">target</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, &#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">get</span>(<span class="params">target, key</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> target[key];</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">set</span>(<span class="params">target, key, el</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">const</span> rule = el.getAttribute(<span class="string">&quot;rule&quot;</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">const</span> validate = <span class="keyword">new</span> Validate();</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> state = rule.split(<span class="string">&quot;,&quot;</span>).every(<span class="function"><span class="params">rule</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">const</span> info = rule.split(<span class="string">&quot;:&quot;</span>);</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">return</span> validate[info[<span class="number">0</span>]](el.value, info[<span class="number">1</span>]);</span></span><br><span class="line"><span class="javascript">                    &#125;);</span></span><br><span class="line"><span class="javascript">                    el.classList[state ? <span class="string">&quot;remove&quot;</span> : <span class="string">&quot;add&quot;</span>](<span class="string">&quot;error&quot;</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> nodes = makeProxy(<span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;[validate]&quot;</span>));</span></span><br><span class="line"><span class="javascript">        nodes.forEach(<span class="function">(<span class="params">item, i</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            item.addEventListener(<span class="string">&quot;keyup&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                nodes[i] = <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h1><h2 id="常见API-1"><a href="#常见API-1" class="headerlink" title="常见API"></a>常见API</h2><h3 id="entries"><a href="#entries" class="headerlink" title="entries"></a>entries</h3><p>常与<code>for...of</code>搭配进行<strong>数组遍历</strong>，重点是可以<strong>同时直接获取</strong>到<strong>数组的索引</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> arr.entries()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [0, &quot;a&quot;]</span></span><br><span class="line"><span class="comment">// [1, &quot;b&quot;]</span></span><br><span class="line"><span class="comment">// [2, &quot;c&quot;]</span></span><br></pre></td></tr></table></figure>

<h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><blockquote>
<p>接收三个参数，分别为当前条目、当前条目所处索引、操作的数组</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a.forEach(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item, index, arr);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><p>如果没有指定<code>initialValue</code>值，则循环<code>arr.length-1</code>次，否则循环<code>arr.length</code>次</p>
<ul>
<li><code>previousValue</code>：上一次调用 <code>callbackFn</code> 时的<strong>返回值</strong>，假如回调函数没有返回值，那么此时值为undefined，第一次除外。在第一次调用时，若指定了初始值 <code>initialValue</code>，其值则为 <code>initialValue</code>，否则为数组索引为 0 的元素 <code>array[0]</code>。</li>
<li><code>currentValue</code>：数组中正在处理的元素。在第一次调用时，若指定了初始值 <code>initialValue</code>，其值则为数组索引为 0 的元素 <code>array[0]</code>，否则为 <code>array[1]</code>。</li>
<li><code>currentIndex</code>：数组中正在处理的元素的索引。若指定了初始值 <code>initialValue</code>，则起始索引号为 0，否则从索引 1 起始。</li>
<li><code>array</code>：用于遍历的数组。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//求和</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_sum</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> pre + cur, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求最大值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_max</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> pre &gt; cur ? pre : cur)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求某成员出现次数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_count</span>(<span class="params">arr, num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> pre += cur === num ? <span class="number">1</span> : <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(_sum(arr)); <span class="comment">//28</span></span><br><span class="line"><span class="built_in">console</span>.log(_max(arr)); <span class="comment">//8</span></span><br><span class="line"><span class="built_in">console</span>.log(_count(arr, <span class="number">1</span>)); <span class="comment">//3</span></span><br></pre></td></tr></table></figure>



<h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><p>Map是一组键值对的结构，<strong>用于解决</strong>以往<strong>不能用对象做为键</strong>的问题</p>
<ul>
<li>具有极快的查找速度</li>
<li>函数、对象、基本类型都可以作为键或值</li>
</ul>
<h2 id="1-声明定义"><a href="#1-声明定义" class="headerlink" title="1. 声明定义"></a>1. 声明定义</h2><p>可以接受一个数组作为参数，该数组的<strong>成员是</strong>一个<strong>表示键值对的数组</strong>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">    [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三疯&quot;</span>],</span><br><span class="line">    [<span class="string">&#x27;age&#x27;</span>, <span class="number">18</span>]</span><br><span class="line">])</span><br><span class="line">map.get(<span class="string">&#x27;name&#x27;</span>) <span class="comment">//张三疯</span></span><br></pre></td></tr></table></figure>

<p>使用<code>set</code> 方法添加元素，支持链式操作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;张三疯&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">map.set(obj, <span class="string">&quot;太极&quot;</span>).set(<span class="string">&quot;address&quot;</span>, <span class="string">&quot;武当&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(map); <span class="comment">// Map(2) &#123;&#123;…&#125; =&gt; &#x27;太极&#x27;, &#x27;address&#x27; =&gt; &#x27;武当&#x27;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(map.entries()); <span class="comment">//MapIterator &#123;&#123;…&#125; =&gt; &quot;houdunren.com&quot;, &quot;name&quot; =&gt; &quot;hdcms&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<p>使用构造函数<code>new Map</code>创建的原理如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">    [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三疯&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;age&quot;</span>, <span class="string">&quot;128&quot;</span>]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">arr.forEach(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span> &#123;</span><br><span class="line">    map.set(key, value);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(map);</span><br></pre></td></tr></table></figure>

<p>对于键是对象的<code>Map</code>， 键保存的是内存地址，值相同但内存地址不同的视为两个键。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;张三疯&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(arr, <span class="number">118</span>);</span><br><span class="line"><span class="built_in">console</span>.log(map.get(arr)); <span class="comment">//118</span></span><br><span class="line"><span class="comment">//这里get中的[&#x27;张三疯&#x27;] 内存地址和arr不一样</span></span><br><span class="line"><span class="built_in">console</span>.log(map.get([<span class="string">&quot;张三疯&quot;</span>])); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>

<h2 id="2-获取数量"><a href="#2-获取数量" class="headerlink" title="2. 获取数量"></a>2. 获取数量</h2><blockquote>
<p>map.size，size为属性</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">    [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三疯&quot;</span>],</span><br><span class="line">    [<span class="string">&#x27;age&#x27;</span>, <span class="number">118</span>]</span><br><span class="line">])</span><br><span class="line">map.set(<span class="string">&#x27;address&#x27;</span>, <span class="string">&#x27;武当&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(map.size); <span class="comment">//3</span></span><br></pre></td></tr></table></figure>

<h2 id="3-元素检测"><a href="#3-元素检测" class="headerlink" title="3. 元素检测"></a>3. 元素检测</h2><blockquote>
<p>map.has(key)</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">    [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三疯&quot;</span>],</span><br><span class="line">    [<span class="string">&#x27;age&#x27;</span>, <span class="number">118</span>]</span><br><span class="line">])</span><br><span class="line"><span class="built_in">console</span>.log(map.has(<span class="string">&#x27;name&#x27;</span>));</span><br></pre></td></tr></table></figure>

<h2 id="4-获取元素"><a href="#4-获取元素" class="headerlink" title="4. 获取元素"></a>4. 获取元素</h2><blockquote>
<p>map.get(key)</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">    [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三疯&quot;</span>],</span><br><span class="line">    [<span class="string">&#x27;age&#x27;</span>, <span class="number">118</span>]</span><br><span class="line">])</span><br><span class="line"><span class="built_in">console</span>.log(map.has(<span class="string">&#x27;name&#x27;</span>));</span><br></pre></td></tr></table></figure>

<h2 id="5-删除元素"><a href="#5-删除元素" class="headerlink" title="5. 删除元素"></a>5. 删除元素</h2><p>根据键值删除元素</p>
<blockquote>
<p>map.delete(key)</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">    [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三疯&quot;</span>],</span><br><span class="line">    [<span class="string">&#x27;age&#x27;</span>, <span class="number">118</span>]</span><br><span class="line">])</span><br><span class="line"><span class="built_in">console</span>.log(map.delete(<span class="string">&#x27;name&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p>删除所有元素</p>
<blockquote>
<p>map.clear()</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">    [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三疯&quot;</span>],</span><br><span class="line">    [<span class="string">&#x27;age&#x27;</span>, <span class="number">118</span>]</span><br><span class="line">])</span><br><span class="line"><span class="built_in">console</span>.log(map.size) <span class="comment">//2</span></span><br><span class="line">map.clear()</span><br><span class="line"><span class="built_in">console</span>.log(map.size); <span class="comment">//0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="6-遍历数据"><a href="#6-遍历数据" class="headerlink" title="6. 遍历数据"></a>6. 遍历数据</h2><blockquote>
<p>使用keys()、values()、entries() 都可以返回可遍历的迭代对象</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">    [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三疯&quot;</span>],</span><br><span class="line">    [<span class="string">&#x27;age&#x27;</span>, <span class="number">118</span>]</span><br><span class="line">])</span><br><span class="line"><span class="built_in">console</span>.log(map.keys()); <span class="comment">//MapIterator &#123;&#x27;name&#x27;, &#x27;age&#x27;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(map.values()); <span class="comment">//MapIterator &#123;&#x27;张三疯&#x27;, 118&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(map.entries()); <span class="comment">//MapIterator &#123;&#x27;name&#x27; =&gt; &#x27;张三疯&#x27;, &#x27;age&#x27; =&gt; 118&#125;</span></span><br></pre></td></tr></table></figure>

<p>可以使用keys()和values()函数分别遍历键与值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">    [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三疯&quot;</span>],</span><br><span class="line">    [<span class="string">&#x27;age&#x27;</span>, <span class="number">118</span>]</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> map.keys()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> value <span class="keyword">of</span> map.values()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> value <span class="keyword">of</span> map.entries()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125; <span class="comment">//[&#x27;name&#x27;, &#x27;张三疯&#x27;]、[&#x27;age&#x27;, 118]</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用<code>for...of</code>进行遍历Map相当于使用entries()函数</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">    [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三疯&quot;</span>],</span><br><span class="line">    [<span class="string">&#x27;age&#x27;</span>, <span class="number">118</span>]</span><br><span class="line">])</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> map) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;<span class="comment">//[&#x27;name&#x27;, &#x27;张三疯&#x27;]、[&#x27;age&#x27;, 118]</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用<code>forEach</code>遍历操作【此时的第一个参数为value，第二个参数为key】</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">    [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三疯&quot;</span>],</span><br><span class="line">    [<span class="string">&#x27;age&#x27;</span>, <span class="number">118</span>]</span><br><span class="line">])</span><br><span class="line">map.forEach(<span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key, value);</span><br><span class="line">&#125;)<span class="comment">//name,张三疯、 age,118</span></span><br></pre></td></tr></table></figure>

<h2 id="7-数组转换"><a href="#7-数组转换" class="headerlink" title="7. 数组转换"></a>7. 数组转换</h2><blockquote>
<p>可以使用<code>展开语法</code> 将Map类型转为数组</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">    [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三疯&quot;</span>],</span><br><span class="line">    [<span class="string">&#x27;age&#x27;</span>, <span class="number">118</span>]</span><br><span class="line">])</span><br><span class="line"><span class="built_in">console</span>.log([...map.values()]); <span class="comment">//[&#x27;张三疯&#x27;,118]</span></span><br><span class="line"><span class="built_in">console</span>.log([...map.keys()]); <span class="comment">//[&#x27;name&#x27;,&#x27;age&#x27;]</span></span><br><span class="line"><span class="built_in">console</span>.log(...map); <span class="comment">// [&quot;name&quot;, &quot;张三疯&quot;], [&#x27;age&#x27;, 118]</span></span><br><span class="line"><span class="built_in">console</span>.log(...map.keys()); <span class="comment">//name age</span></span><br></pre></td></tr></table></figure>

<p>检索值长度大于2组成新的Map</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">    [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三&quot;</span>],</span><br><span class="line">    [<span class="string">&#x27;age&#x27;</span>, <span class="number">9</span>],</span><br><span class="line">    [<span class="string">&quot;alias&quot;</span>, <span class="string">&quot;刘三姐&quot;</span>]</span><br><span class="line">])</span><br><span class="line"><span class="keyword">let</span> newArr = [...map].filter(<span class="function"><span class="params">item</span> =&gt;</span> item[<span class="number">1</span>].length &gt; <span class="number">2</span>)</span><br><span class="line">map=<span class="keyword">new</span> <span class="built_in">Map</span>(newArr)</span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br></pre></td></tr></table></figure>

<h2 id="8-节点集合"><a href="#8-节点集合" class="headerlink" title="8. 节点集合"></a>8. 节点集合</h2><p>map的key可以为任意类型，下面使用DOM节点做为键来记录数据。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">desc</span>=<span class="string">&quot;NB&quot;</span>&gt;</span>zsh<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">desc</span>=<span class="string">&quot;强&quot;</span>&gt;</span>crazyzsh<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> divs = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> divMap = <span class="keyword">new</span> <span class="built_in">Map</span>();</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 将desc属性值压入新创建的divMap中</span></span></span><br><span class="line"><span class="javascript">        divs.forEach(<span class="function"><span class="params">div</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            divMap.set(div, &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">content</span>: div.getAttribute(<span class="string">&quot;desc&quot;</span>)</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">        divMap.forEach(<span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            key.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(divMap.get(<span class="built_in">this</span>).content);</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="9-实例操作"><a href="#9-实例操作" class="headerlink" title="9. 实例操作"></a>9. 实例操作</h2><p>当不接受协议时无法提交表单，并根据自定义信息提示用户。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;&quot;</span> onsubmit=<span class="string">&quot; post()&quot;</span>&gt;</span><br><span class="line">    接受协议:</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;agreement&quot;</span> <span class="attr">message</span>=<span class="string">&quot;请接受接受协议&quot;</span> /&gt;</span></span></span><br><span class="line">    我是学生:</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;student&quot;</span> <span class="attr">message</span>=<span class="string">&quot;网站只对学生开放&quot;</span> /&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span></span><br><span class="line">&lt;/form&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="keyword">function</span> <span class="title">post</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">let</span> inputs = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;[message]&quot;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//使用set设置数据</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        inputs.forEach(<span class="function"><span class="params">item</span> =&gt;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">            map.set(item, &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">message</span>: item.getAttribute(<span class="string">&quot;message&quot;</span>),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">status</span>: item.checked</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        );</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//遍历Map数据</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">return</span> [...map].every(<span class="function">(<span class="params">[item, config]</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            config.status || alert(config.message);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">return</span> config.status;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="WeakMap"><a href="#WeakMap" class="headerlink" title="WeakMap"></a>WeakMap</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p><strong>WeakMap</strong> 对象是一组键/值对的集</p>
<ul>
<li><p><strong>键名</strong>必须是<strong>对象</strong></p>
</li>
<li><p>WeaMap对键名是弱引用的，键值是正常引用</p>
</li>
<li><p>垃圾回收不考虑WeaMap的键名，不会改变引用计数器，键在其他地方不被引用时即删除</p>
</li>
<li><p>因为WeakMap 是弱引用，由于其他地方操作成员可能会不存在，所以不可以进行<code>forEach( )</code>遍历等操作</p>
</li>
<li><p>也是因为弱引用，WeaMap 结构没有keys( )，values( )，entries( )等方法和 size 属性</p>
</li>
</ul>
<h2 id="2-使用场景"><a href="#2-使用场景" class="headerlink" title="2. 使用场景"></a>2. 使用场景</h2><ul>
<li>当键的外部引用删除时，希望自动删除数据时使用 <code>WeakMap</code></li>
</ul>
<h2 id="3-声明定义"><a href="#3-声明定义" class="headerlink" title="3. 声明定义"></a>3. 声明定义</h2><p>将DOM节点保存到<code>WeakSet</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>zsh<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>crazyzsh<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> weak = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span></span></span><br><span class="line"><span class="javascript">            .querySelectorAll(<span class="string">&quot;div&quot;</span>)</span></span><br><span class="line"><span class="javascript">            .forEach(<span class="function"><span class="params">item</span> =&gt;</span> weak.set(item, item.innerHTML));</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(weak); <span class="comment">//WeakMap &#123;div =&gt; &quot;zsh&quot;, div =&gt; &quot;crazyzsh&quot;&#125;</span></span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-基本操作"><a href="#4-基本操作" class="headerlink" title="4. 基本操作"></a>4. 基本操作</h2><p>除了不能使用keys( )，values( )，entries( )等方法和 size 属性，其余与Map一致</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>zsh<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>crazyzsh<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> weak = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> arr = [<span class="string">&quot;zsh&quot;</span>, <span class="string">&quot;crazyzsh&quot;</span>];</span></span><br><span class="line"><span class="javascript">        <span class="comment">//添加操作</span></span></span><br><span class="line"><span class="javascript">        weak.set(arr, <span class="string">&quot;NB&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(weak.has(arr)); <span class="comment">//true</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//删除操作</span></span></span><br><span class="line"><span class="javascript">        weak.delete(arr);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//检索判断</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(weak.has(arr)); <span class="comment">//false</span></span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-垃圾回收"><a href="#5-垃圾回收" class="headerlink" title="5. 垃圾回收"></a>5. 垃圾回收</h2><p>WakeMap的键名对象<strong>不会增加引用</strong>计数器，如果一个对象不被引用了会自动删除。</p>
<ul>
<li>下例当<code>zsh</code>删除时内存即清除，因为WeakMap是弱引用不会产生引用计数，此时虽然可以打印值，但是<strong>键已经为空</strong>了</li>
<li>当<strong>垃圾回收</strong>时因为对象被删除，这时WakeMap也就<strong>没有记录</strong>了</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> weak = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> zsh = &#123;&#125;;</span></span><br><span class="line"><span class="javascript">    weak.set(zsh, <span class="string">&quot;crazyzsh&quot;</span>);</span></span><br><span class="line"><span class="javascript">    zsh = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(weak);<span class="comment">//WeakMap &#123;&#123;…&#125; =&gt; &#x27;crazyzsh&#x27;&#125;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(weak);<span class="comment">//WeakMap &#123;&#125;</span></span></span><br><span class="line"><span class="javascript">    &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-选课案例"><a href="#6-选课案例" class="headerlink" title="6. 选课案例"></a>6. 选课案例</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        * &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100vw</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">            <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: solid <span class="number">2px</span> <span class="number">#ddd</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-pseudo">:last-of-type</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-left</span>: -<span class="number">2px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: solid <span class="number">2px</span> <span class="number">#e67e22</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">            <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">transition</span>: <span class="number">1s</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: <span class="number">#16a085</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-right</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.remove</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: solid <span class="number">2px</span> <span class="number">#eee</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">opacity</span>: <span class="number">0.8</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#eee</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.remove</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: <span class="number">#eee</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">p</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: <span class="number">#16a085</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>php<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>js<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>python<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">strong</span> <span class="attr">id</span>=<span class="string">&quot;count&quot;</span>&gt;</span>共选了2门课<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;lists&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="class"><span class="keyword">class</span> <span class="title">Lesson</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.lis = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;ul&gt;li&quot;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.countELem = <span class="built_in">document</span>.getElementById(<span class="string">&quot;count&quot;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.listElem = <span class="built_in">document</span>.getElementById(<span class="string">&quot;lists&quot;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.map = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">run</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.lis.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    item.querySelector(<span class="string">&quot;a&quot;</span>).addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">const</span> elem = event.target;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">const</span> state = elem.getAttribute(<span class="string">&quot;select&quot;</span>);</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span> (state) &#123;</span></span><br><span class="line"><span class="javascript">                            elem.removeAttribute(<span class="string">&quot;select&quot;</span>);</span></span><br><span class="line"><span class="javascript">                            <span class="built_in">this</span>.map.delete(elem.parentElement);</span></span><br><span class="line"><span class="javascript">                            elem.innerHTML = <span class="string">&quot;+&quot;</span>;</span></span><br><span class="line"><span class="javascript">                            elem.style.backgroundColor = <span class="string">&quot;green&quot;</span>;</span></span><br><span class="line"><span class="javascript">                        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                            elem.setAttribute(<span class="string">&quot;select&quot;</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">                            <span class="built_in">this</span>.map.set(elem.parentElement, <span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">                            elem.innerHTML = <span class="string">&quot;-&quot;</span>;</span></span><br><span class="line"><span class="javascript">                            elem.style.backgroundColor = <span class="string">&quot;red&quot;</span>;</span></span><br><span class="line"><span class="javascript">                        &#125;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.render();</span></span><br><span class="line"><span class="javascript">                    &#125;);</span></span><br><span class="line"><span class="javascript">                &#125;);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">count</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> [...this.lis].reduce(<span class="function">(<span class="params">count, item</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> (count += <span class="built_in">this</span>.map.has(item) ? <span class="number">1</span> : <span class="number">0</span>);</span></span><br><span class="line"><span class="javascript">                &#125;, <span class="number">0</span>);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">lists</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> [...this.lis]</span></span><br><span class="line"><span class="javascript">                    .filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">return</span> <span class="built_in">this</span>.map.has(item);</span></span><br><span class="line"><span class="javascript">                    &#125;)</span></span><br><span class="line"><span class="javascript">                    .map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">return</span> <span class="string">`&lt;span&gt;<span class="subst">$&#123;item.querySelector(<span class="string">&quot;span&quot;</span>).innerHTML&#125;</span>&lt;/span&gt;`</span>;</span></span><br><span class="line"><span class="javascript">                    &#125;);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.countELem.innerHTML = <span class="string">`共选了<span class="subst">$&#123;<span class="built_in">this</span>.count()&#125;</span>课`</span>;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.listElem.innerHTML = <span class="built_in">this</span>.lists().join(<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> Lesson().run();</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h1><p>用于存储任何类型的<strong>唯一值</strong>，无论是基本类型还是对象引用。</p>
<ul>
<li><strong>只能保存值</strong>没有键名</li>
<li>严格类型检测如<strong>字符串</strong>数字不等于<strong>数值型</strong>数字</li>
<li>值是<strong>唯一</strong>的</li>
<li>遍历顺序是添加的顺序，方便保存回调函数</li>
</ul>
<h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h2><p>对象的<strong>键</strong>最终都会转为<strong>字符串</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="number">1</span>: <span class="string">&quot;zsh&quot;</span>,</span><br><span class="line">    <span class="string">&quot;1&quot;</span>: <span class="string">&quot;crazy&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.table(obj); <span class="comment">//&#123;1:&quot;zsh&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<p>使用对象做为键名时，会将对象转为字符串后使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="number">1</span>: <span class="string">&quot;zsh&quot;</span>,</span><br><span class="line">    <span class="string">&quot;1&quot;</span>: <span class="string">&quot;crazy&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> crazyzsh = &#123;</span><br><span class="line">    [obj]: <span class="string">&quot;NB&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(crazyzsh);</span><br><span class="line"><span class="comment">//将对象转换成字符串后 当键名 来使用</span></span><br><span class="line"><span class="built_in">console</span>.log(crazyzsh[obj.toString()]);</span><br><span class="line"><span class="built_in">console</span>.log(crazyzsh[<span class="string">&quot;[object Object]&quot;</span>]);</span><br></pre></td></tr></table></figure>

<h2 id="2-添加元素"><a href="#2-添加元素" class="headerlink" title="2. 添加元素"></a>2. 添加元素</h2><p>使用数组做初始数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;crazy&#x27;</span>, <span class="string">&#x27;zsh&#x27;</span>])</span><br><span class="line"><span class="built_in">console</span>.log(set); <span class="comment">//Set(2) &#123;&#x27;crazy&#x27;, &#x27;zsh&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<p>Set 中是严格类型约束的，下面的数值<code>1</code>与字符串<code>&quot;1&quot;</code>属于两个不同的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">set.add(<span class="number">1</span>);</span><br><span class="line">set.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(set); <span class="comment">//Set(2) &#123;1, &quot;1&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<p>使用 <code>add</code> 添加元素，重复添加相同值是无效的</p>
<h2 id="3-获取数量"><a href="#3-获取数量" class="headerlink" title="3. 获取数量"></a>3. 获取数量</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;crazy&#x27;</span>, <span class="string">&#x27;zsh&#x27;</span>])</span><br><span class="line"><span class="built_in">console</span>.log(set.size); <span class="comment">//2</span></span><br></pre></td></tr></table></figure>

<h2 id="4-元素检测"><a href="#4-元素检测" class="headerlink" title="4. 元素检测"></a>4. 元素检测</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;crazy&#x27;</span>, <span class="string">&#x27;zsh&#x27;</span>])</span><br><span class="line"><span class="built_in">console</span>.log(set.has(<span class="string">&#x27;zsh&#x27;</span>)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h2 id="5-删除元素-1"><a href="#5-删除元素-1" class="headerlink" title="5. 删除元素"></a>5. 删除元素</h2><p>使用 <code>delete</code> 删除单个元素，删除成功返回真，否则为假</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;crazy&#x27;</span>, <span class="string">&#x27;zsh&#x27;</span>])</span><br><span class="line"><span class="built_in">console</span>.log(set.delete(<span class="string">&#x27;zsh&#x27;</span>)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>使用 <code>clear</code> 删除所有元素，没有返回值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;crazy&#x27;</span>, <span class="string">&#x27;zsh&#x27;</span>])</span><br><span class="line">set.clear()</span><br><span class="line"><span class="built_in">console</span>.log(set); <span class="comment">//Set(0) &#123;size: 0&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-数组转换"><a href="#6-数组转换" class="headerlink" title="6. 数组转换"></a>6. 数组转换</h2><p>可以使用<code>点语法</code> 或 <code>Array.form</code> 静态方法将Set类型转为数组，这样就可以使用数组处理函数了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;crazy&#x27;</span>, <span class="string">&#x27;zsh&#x27;</span>])</span><br><span class="line"><span class="built_in">console</span>.log([...set]); <span class="comment">//[&#x27;crazy&#x27;, &#x27;zsh&#x27;]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(set)); <span class="comment">//[&#x27;crazy&#x27;, &#x27;zsh&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>移除set中大于5的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一般是传数组的，当传入 单个字符串 的话就会将其转换成Set</span></span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>(<span class="string">&quot;123456789&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(set); <span class="comment">//Set(9) &#123;&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, …&#125;</span></span><br><span class="line"></span><br><span class="line">set = <span class="keyword">new</span> <span class="built_in">Set</span>([...set].filter(<span class="function"><span class="params">item</span> =&gt;</span> item &lt; <span class="number">5</span>));</span><br><span class="line"><span class="built_in">console</span>.log(set); <span class="comment">//Set(4) &#123;&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="7-去重"><a href="#7-去重" class="headerlink" title="7. 去重"></a>7. 去重</h2><p>去除字符串重复</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>(<span class="string">&quot;hello&quot;</span>); <span class="comment">//此刻已经进行了去重</span></span><br><span class="line"><span class="built_in">console</span>.log([...set].join(<span class="string">&#x27;&#x27;</span>)); <span class="comment">//helo</span></span><br></pre></td></tr></table></figure>

<p>去除数组重复</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr = [...new <span class="built_in">Set</span>(arr)]</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// 1,2,4,5</span></span><br></pre></td></tr></table></figure>

<h2 id="8-遍历数据"><a href="#8-遍历数据" class="headerlink" title="8. 遍历数据"></a>8. 遍历数据</h2><p>使用 <code>keys()/values()/entries()</code> 都可以返回迭代对象，因为<code>set</code>类型只有值所以 <code>keys与values</code> 方法结果一致。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&quot;zsh&quot;</span>, <span class="string">&quot;crazyzsh&quot;</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(hd.values()); <span class="comment">//SetIterator &#123;&quot;zsh&quot;, &quot;crazyzsh&quot;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(hd.keys()); <span class="comment">//SetIterator &#123;&quot;zsh&quot;, &quot;crazyzsh&quot;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(hd.entries()); <span class="comment">//SetIterator &#123;&quot;zsh&quot; =&gt; &quot;zsh&quot;, &quot;crazyzsh&quot; =&gt; &quot;crazyzsh&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<p>可以使用 <code>forEach</code> 遍历Set数据，默认使用 <code>values</code> 方法创建迭代器。</p>
<p>为了保持和遍历数组参数统一，函数中的value与key是一样的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">7</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>(arr);</span><br><span class="line"><span class="comment">//使用forEach遍历【item、key值一致】</span></span><br><span class="line">set.forEach(<span class="function">(<span class="params">item,key</span>) =&gt;</span> <span class="built_in">console</span>.log(item,key));</span><br></pre></td></tr></table></figure>

<p>也可以使用 <code>for...of</code> 遍历Set数据，默认使用 <code>values</code> 方法创建迭代器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用for...of遍历</span></span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">7</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">6</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> iterator <span class="keyword">of</span> set) &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(iterator);<span class="comment">//7 6 2 8 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="9-搜索实例"><a href="#9-搜索实例" class="headerlink" title="9. 搜索实例"></a>9. 搜索实例</h2><p>利用Set特性将搜索关键字进行保存并显示在历史记录中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> obj = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">words</span>: <span class="keyword">new</span> <span class="built_in">Set</span>(),</span></span><br><span class="line"><span class="javascript">        <span class="keyword">set</span> <span class="title">keyword</span>(<span class="params">word</span>) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.words.add(word);</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">show</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            ul.innerHTML = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.words.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                ul.innerHTML += (<span class="string">&#x27;&lt;li&gt;&#x27;</span> + item + <span class="string">&#x27;&lt;/li&gt;&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.querySelector(<span class="string">&#x27;input&#x27;</span>).addEventListener(<span class="string">&#x27;keyup&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 按下enter键进行确定</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (event.keyCode == <span class="number">13</span>) &#123;</span></span><br><span class="line"><span class="javascript">            obj.keyword = <span class="built_in">this</span>.value;</span></span><br><span class="line"><span class="javascript">            obj.show();</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="10-交集"><a href="#10-交集" class="headerlink" title="10. 交集"></a>10. 交集</h2><p>获取两个集合中共同存在的元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> set1 = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;zsh&#x27;</span>, <span class="string">&#x27;crazy&#x27;</span>, <span class="string">&#x27;crazyzsh&#x27;</span>]);</span><br><span class="line"><span class="keyword">let</span> set2 = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;crazy&#x27;</span>, <span class="string">&#x27;NB&#x27;</span>]);</span><br><span class="line"><span class="keyword">let</span> newSet = <span class="keyword">new</span> <span class="built_in">Set</span>(</span><br><span class="line">    [...set1].filter(<span class="function"><span class="params">item</span> =&gt;</span> set2.has(item))</span><br><span class="line">);</span><br><span class="line"><span class="built_in">console</span>.log(newSet); <span class="comment">//&#123;&quot;crazy&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="11-差集"><a href="#11-差集" class="headerlink" title="11. 差集"></a>11. 差集</h2><p>在集合a中出现但不在集合b中出现元素集合</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;zsh&#x27;</span>, <span class="string">&#x27;crazy&#x27;</span>, <span class="string">&#x27;crazyzsh&#x27;</span>]);</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;crazy&#x27;</span>, <span class="string">&#x27;NB&#x27;</span>]);</span><br><span class="line"><span class="keyword">let</span> newSet = <span class="keyword">new</span> <span class="built_in">Set</span>(</span><br><span class="line">    [...a].filter(<span class="function"><span class="params">item</span> =&gt;</span> !b.has(item))</span><br><span class="line">);</span><br><span class="line"><span class="built_in">console</span>.log(newSet); <span class="comment">//&#123;&quot;zsh&quot;,&quot;crazyzsh&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="12-并集"><a href="#12-并集" class="headerlink" title="12. 并集"></a>12. 并集</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;zsh&#x27;</span>, <span class="string">&#x27;crazy&#x27;</span>, <span class="string">&#x27;crazyzsh&#x27;</span>]);</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;crazy&#x27;</span>, <span class="string">&#x27;NB&#x27;</span>]);</span><br><span class="line"><span class="keyword">let</span> newSet = <span class="keyword">new</span> <span class="built_in">Set</span>([...a, ...b]);</span><br><span class="line"><span class="built_in">console</span>.log(newSet); <span class="comment">//Set(4) &#123;&#x27;zsh&#x27;, &#x27;crazy&#x27;, &#x27;crazyzsh&#x27;, &#x27;NB&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="WeakSet"><a href="#WeakSet" class="headerlink" title="WeakSet"></a>WeakSet</h1><p>WeakSet结构同样不会存储重复的值，它的成员必须<strong>只能</strong>是<strong>对象类型</strong>的值。</p>
<ul>
<li>垃圾回收不考虑WeakSet，即被WeakSet引用时引用计数器不加一，所以对象不被引用时不管WeakSet是否在使用都将删除</li>
<li>因为WeakSet 是弱引用，由于其他地方操作成员可能会不存在，所以<strong>不可以</strong>进行<code>forEach( )</code>遍历等操作</li>
<li>也是因为弱引用，WeakSet 结构<strong>没有</strong>keys( )，values( )，entries( )等方法和size属性</li>
</ul>
<h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1. 使用场景"></a>1. 使用场景</h2><ul>
<li>因为是弱引用所以当外部引用删除时，希望自动删除数据时使用 <code>WeakMap</code></li>
</ul>
<h2 id="2-添加元素-1"><a href="#2-添加元素-1" class="headerlink" title="2. 添加元素"></a>2. 添加元素</h2><p>以下操作由于数据不是对象类型将产生错误</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">WeakSet</span>([<span class="string">&quot;zsh&quot;</span>, <span class="string">&quot;crazy&quot;</span>]); <span class="comment">//Invalid value used in weak set</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">WeakSet</span>(<span class="string">&quot;crazyzsh&quot;</span>); <span class="comment">//Invalid value used in weak set</span></span><br></pre></td></tr></table></figure>

<p>WeakSet的值必须为对象类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> weak = <span class="keyword">new</span> <span class="built_in">WeakSet</span>([</span><br><span class="line">    [<span class="string">&#x27;zsh&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;crazyzsh&#x27;</span>],</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">description</span>: <span class="string">&quot;NB&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(weak);</span><br></pre></td></tr></table></figure>

<p>将DOM节点保存到<code>WeakSet</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">name</span>=<span class="string">&quot;button1&quot;</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">name</span>=<span class="string">&quot;button1&quot;</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> buttons = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;button&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> targetButtons = <span class="keyword">new</span> <span class="built_in">WeakSet</span>()</span></span><br><span class="line"><span class="javascript">        buttons.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            targetButtons.add(item)</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(targetButtons);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-基本操作"><a href="#3-基本操作" class="headerlink" title="3. 基本操作"></a>3. 基本操作</h2><p>除了size()、keys()、values()、entries()不能用之外，其余与Set一致，下面是WeakSet的常用指令</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> weak = <span class="keyword">new</span> <span class="built_in">WeakSet</span>();</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">&quot;zsh&quot;</span>];</span><br><span class="line"><span class="comment">//添加操作</span></span><br><span class="line">weak.add(arr);</span><br><span class="line"><span class="built_in">console</span>.log(weak.has(arr));</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除操作</span></span><br><span class="line">weak.delete(arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//检索判断</span></span><br><span class="line"><span class="built_in">console</span>.log(weak.has(arr));</span><br></pre></td></tr></table></figure>

<h2 id="4-垃圾回收"><a href="#4-垃圾回收" class="headerlink" title="4. 垃圾回收"></a>4. 垃圾回收</h2><p>WeaSet保存的对象<strong>不会增加</strong>引用计数器，如果一个对象不被引用了会自动删除。</p>
<ul>
<li>下例中的数组被 <code>arr</code> 引用了，引用计数器+1</li>
<li>数据又添加到了 weak 中，引用计数还是1</li>
<li>当 <code>arr</code> 设置为null时，引用计数-1 此时对象引用为0</li>
<li>当垃圾回收时对象被删除，这时weak也就没有记录了</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> weak = <span class="keyword">new</span> <span class="built_in">WeakSet</span>();</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;crazyzsh&quot;</span>];</span><br><span class="line">weak.add(arr);</span><br><span class="line"><span class="built_in">console</span>.log(weak.has(arr)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">arr = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(weak); <span class="comment">//WeakSet &#123;Array(1)&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(weak); <span class="comment">//WeakSet &#123;&#125;</span></span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<h2 id="5-案例操作"><a href="#5-案例操作" class="headerlink" title="5. 案例操作"></a>5. 案例操作</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        * &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: solid <span class="number">2px</span> <span class="number">#e67e22</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">            <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">transition</span>: <span class="number">1s</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: <span class="number">#16a085</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-right</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.remove</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: solid <span class="number">2px</span> <span class="number">#eee</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">opacity</span>: <span class="number">0.8</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#eee</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.remove</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: <span class="number">#eee</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>crazy<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span>x<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>zsh <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span>x<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>crazyzsh<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span>x<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="class"><span class="keyword">class</span> <span class="title">Todos</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;&#125;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">run</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.items = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;ul&gt;li&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.lists = <span class="keyword">new</span> <span class="built_in">WeakSet</span>();</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.record();</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.addEvent();</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">addEvent</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.items.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                item.querySelector(<span class="string">&quot;a&quot;</span>).addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//检测WakeSet中是否存在Li元素【event.target.parentElement为点击的a元素的父元素li】</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">const</span> parentElement = event.target.parentElement;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (!<span class="built_in">this</span>.lists.has(parentElement)) &#123;</span></span><br><span class="line"><span class="javascript">                        alert(<span class="string">&quot;已经删除此TODO&quot;</span>);</span></span><br><span class="line"><span class="javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">//删除后从记录的WakeSet中移除</span></span></span><br><span class="line"><span class="javascript">                        parentElement.classList.add(<span class="string">&quot;remove&quot;</span>);</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.lists.delete(parentElement);</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;);</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">record</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.items.forEach(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">this</span>.lists.add(item));</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Todos().run();</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h1><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><h3 id="普通函数"><a href="#普通函数" class="headerlink" title="普通函数"></a>普通函数</h3><ul>
<li>构造函数（类）：this指向实例出来的对象</li>
<li>以函数的形式调用时，this永远都是window</li>
<li>以方法的形式进行调用，this就是调用方法的那个对象</li>
</ul>
<h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>箭头函数没有<code>this</code>, 也可以理解为箭头函数中的<code>this</code> 会继承定义函数时的上下文，可以理解为<strong>和外层函数（作用域）</strong>指向<strong>同一个this</strong>。</p>
<ul>
<li>如果想使用函数定义时的上下文中的this，那就使用箭头函数</li>
<li>本着新特性的原则，尽量使用箭头函数（还是得视情况而定）</li>
<li>事件函数可理解为对象<code>onclick</code>设置值，所以函数声明时<code>this</code>为当前对象</li>
</ul>
<h3 id="例题分析"><a href="#例题分析" class="headerlink" title="例题分析"></a>例题分析</h3><h4 id="例1【混合】"><a href="#例1【混合】" class="headerlink" title="例1【混合】"></a>例1【混合】</h4><p>由于直接返回的是一个函数，此时不应该将其当成方法来进行分析；返回的是一个箭头函数，得知其this应当指向定义时的上下文，此时箭头函数中的this指向的是方法sayName中的this，由于此时为对象中的方法为普通函数，就必须考虑是谁来调用的，此时的调用者为obj，所以打印出来的为对象中的name</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;张三疯&#x27;</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zsh&#x27;</span>,</span><br><span class="line">    <span class="attr">sayName</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.sayName()() <span class="comment">//&#x27;zsh&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="例2【混合】"><a href="#例2【混合】" class="headerlink" title="例2【混合】"></a>例2【混合】</h4><p>返回的是一个箭头函数，得知其this应当指向定义时的上下文，此时箭头函数中的this指向的是方法sayName中的this，由于此时为对象中的方法为普通函数，就必须考虑是谁来调用的，此时的调用者为window，所以打印出来的为window中的name</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;张三疯&#x27;</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zsh&#x27;</span>,</span><br><span class="line">    <span class="attr">sayName</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> temp = obj.sayName</span><br><span class="line">temp()() <span class="comment">//&#x27;张三疯&#x27;</span></span><br></pre></td></tr></table></figure>

<p>例1例2结论： 只要对象中的<strong>方法</strong>为<strong>普通函数</strong>，此时就必须关注是谁进行调用的</p>
<h4 id="例3【混合】"><a href="#例3【混合】" class="headerlink" title="例3【混合】"></a>例3【混合】</h4><p>返回出来的为函数，this指向的就是window</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;张三疯&#x27;</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zsh&#x27;</span>,</span><br><span class="line">    <span class="attr">sayName</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.sayName()() <span class="comment">//&#x27;张三疯&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="例4【普通】"><a href="#例4【普通】" class="headerlink" title="例4【普通】"></a>例4【普通】</h4><p>由于直接返回的是一个函数，此时不应该将其当成方法来进行分析，返回的是普通函数，所以其this指向的就是window</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;张三疯&#x27;</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zsh&#x27;</span>,</span><br><span class="line">    <span class="attr">sayName</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.sayName()() <span class="comment">//&#x27;张三疯&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="例5【普通】"><a href="#例5【普通】" class="headerlink" title="例5【普通】"></a>例5【普通】</h4><p>当方法的<strong>调用者</strong>为<strong>对象本身</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;张三疯&#x27;</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zsh&#x27;</span>,</span><br><span class="line">    <span class="attr">sayName</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.sayName() <span class="comment">//&#x27;zsh&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="例6【普通】"><a href="#例6【普通】" class="headerlink" title="例6【普通】"></a>例6【普通】</h4><p>当方法的<strong>调用者</strong>为<strong>window</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;张三疯&#x27;</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zsh&#x27;</span>,</span><br><span class="line">    <span class="attr">sayName</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.sayName() <span class="comment">//&#x27;zsh&#x27;</span></span><br><span class="line"><span class="keyword">let</span> temp = obj.sayName</span><br><span class="line">temp() <span class="comment">//&#x27;张三疯&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="例7【箭头】"><a href="#例7【箭头】" class="headerlink" title="例7【箭头】"></a>例7【箭头】</h4><p>由于箭头函数没有this指向，所以此时的this指向的是上一级作用域中的this【常见的话只有函数才能构成作用域，所以此时上一级作用域指的是定义该函数时的作用域】，又由于对象中的<code>&#123;&#125;</code>大括号不构成作用域，所以此时在箭头函数中的this指向的是window</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;张三疯&#x27;</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zsh&#x27;</span>,</span><br><span class="line">    <span class="attr">sayName</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.sayName() <span class="comment">//&#x27;张三疯&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="例8【箭头】"><a href="#例8【箭头】" class="headerlink" title="例8【箭头】"></a>例8【箭头】</h4><p>当使用的是箭头函数时，就不用考虑到底是谁进行调用的，只需考虑其上一级作用域即可。只有在<strong>普通函数中</strong>才要<strong>注意</strong>函数的<strong>调用者</strong>是哪一个。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;张三疯&#x27;</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zsh&#x27;</span>,</span><br><span class="line">    <span class="attr">sayName</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> temp = obj.sayName</span><br><span class="line">temp() <span class="comment">//&#x27;张三疯&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="例9【箭头】"><a href="#例9【箭头】" class="headerlink" title="例9【箭头】"></a>例9【箭头】</h4><p>从最里面的箭头函数分析，由于其是函数而并不是方法，其this指向定义时的上下文，即方法sayName，又由于sayName为箭头函数，其this指向的是window，所以此时的this指向的就是window</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;张三疯&#x27;</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zsh&#x27;</span>,</span><br><span class="line">    <span class="attr">sayName</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.sayName()() <span class="comment">//&#x27;张三疯&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="例10"><a href="#例10" class="headerlink" title="例10"></a>例10</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> lesson = &#123;</span><br><span class="line">    <span class="attr">study</span>: <span class="string">&quot;i love&quot;</span>,</span><br><span class="line">    <span class="attr">lists</span>: [<span class="string">&quot;js&quot;</span>, <span class="string">&quot;css&quot;</span>, <span class="string">&quot;mysql&quot;</span>],</span><br><span class="line">    <span class="function"><span class="title">show</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.lists.map(<span class="function"><span class="params">title</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.study&#125;</span>:<span class="subst">$&#123;title&#125;</span>`</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(lesson.show()); <span class="comment">// [&#x27;i love:js&#x27;, &#x27;i love:css&#x27;, &#x27;i love:mysql&#x27;]</span></span><br></pre></td></tr></table></figure>

<h4 id="例11"><a href="#例11" class="headerlink" title="例11"></a>例11</h4><p>此时this位于普通函数中，所以指向的为window</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> Lesson = &#123;</span><br><span class="line">    <span class="attr">study</span>: <span class="string">&quot;i love&quot;</span>,</span><br><span class="line">    <span class="attr">lists</span>: [<span class="string">&quot;js&quot;</span>, <span class="string">&quot;css&quot;</span>, <span class="string">&quot;mysql&quot;</span>],</span><br><span class="line">    <span class="function"><span class="title">show</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.lists.map(<span class="function"><span class="keyword">function</span> (<span class="params">title</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.study&#125;</span>:<span class="subst">$&#123;title&#125;</span>`</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(Lesson.show());<span class="comment">// [&#x27;undefined:js&#x27;, &#x27;undefined:css&#x27;, &#x27;undefined:mysql&#x27;]</span></span><br></pre></td></tr></table></figure>



<h4 id="例12"><a href="#例12" class="headerlink" title="例12"></a>例12</h4><p>数组中的map函数可以指定第二个参数，用于指定this的指向，此时传入的就是方法中的this，即对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> lesson = &#123;</span><br><span class="line">    <span class="attr">study</span>: <span class="string">&quot;i love&quot;</span>,</span><br><span class="line">    <span class="attr">lists</span>: [<span class="string">&quot;js&quot;</span>, <span class="string">&quot;css&quot;</span>, <span class="string">&quot;mysql&quot;</span>],</span><br><span class="line">    <span class="function"><span class="title">show</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.lists.map(<span class="function"><span class="keyword">function</span> (<span class="params">title</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.study&#125;</span>:<span class="subst">$&#123;title&#125;</span>`</span>;</span><br><span class="line">        &#125;, <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(lesson.show());<span class="comment">// [&#x27;i love:js&#x27;, &#x27;i love:css&#x27;, &#x27;i love:mysql&#x27;]</span></span><br></pre></td></tr></table></figure>

<h4 id="例13"><a href="#例13" class="headerlink" title="例13"></a>例13</h4><p>在父作用域中定义引用<code>this</code>的变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> Lesson = &#123;</span><br><span class="line">    <span class="attr">study</span>: <span class="string">&quot;i love&quot;</span>,</span><br><span class="line">    <span class="attr">lists</span>: [<span class="string">&quot;js&quot;</span>, <span class="string">&quot;css&quot;</span>, <span class="string">&quot;mysql&quot;</span>],</span><br><span class="line">    <span class="function"><span class="title">show</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用变量将this进行保存</span></span><br><span class="line">        <span class="keyword">let</span> that = <span class="built_in">this</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.lists.map(<span class="function"><span class="keyword">function</span> (<span class="params">title</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;that.study&#125;</span>:<span class="subst">$&#123;title&#125;</span>`</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(Lesson.show()); <span class="comment">//[&#x27;i love:js&#x27;, &#x27;i love:css&#x27;, &#x27;i love:mysql&#x27;]</span></span><br></pre></td></tr></table></figure>

<h4 id="例14"><a href="#例14" class="headerlink" title="例14"></a>例14</h4><p>使用普通函数时<code>this</code>为当前DOM对象</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">desc</span>=<span class="string">&quot;this is a test&quot;</span>&gt;</span>button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> Dom = &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">name</span>: <span class="string">&quot;crazyzsh&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">bind</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> button = <span class="built_in">document</span>.querySelector(<span class="string">&quot;button&quot;</span>);</span></span><br><span class="line"><span class="javascript">                button.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="built_in">this</span>.getAttribute(<span class="string">&quot;desc&quot;</span>));</span></span><br><span class="line"><span class="javascript">                &#125;);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;;</span></span><br><span class="line"><span class="javascript">        Dom.bind();</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="例15"><a href="#例15" class="headerlink" title="例15"></a>例15</h4><p>使用箭头函数时this指向上下文对象</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">desc</span>=<span class="string">&quot;test&quot;</span>&gt;</span>无敌是多么寂寞<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> Dom = &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">name</span>: <span class="string">&quot;crazyzsh&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">bind</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> button = <span class="built_in">document</span>.querySelector(<span class="string">&quot;button&quot;</span>);</span></span><br><span class="line"><span class="javascript">                button.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="built_in">this</span>.name + event.target.innerHTML);</span></span><br><span class="line"><span class="javascript">                &#125;);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;;</span></span><br><span class="line"><span class="javascript">        Dom.bind();</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="例16"><a href="#例16" class="headerlink" title="例16"></a>例16</h4><p>使用<code>handleEvent</code>绑定事件处理器时，<code>this</code>指向当前对象而不是DOM元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">desc</span>=<span class="string">&quot;this is a test&quot;</span>&gt;</span>button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> Dom = &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">name</span>: <span class="string">&quot;crazyzsh&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">handleEvent</span>: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">//&#123;name: &#x27;crazyzsh&#x27;, handleEvent: ƒ, bind: ƒ&#125;</span></span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">bind</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> button = <span class="built_in">document</span>.querySelector(<span class="string">&quot;button&quot;</span>);</span></span><br><span class="line"><span class="javascript">                button.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="built_in">this</span>);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;;</span></span><br><span class="line"><span class="javascript">        Dom.bind();</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>在某个时刻被其他函数调用的函数称为回调函数</p>
<ol>
<li>下面是一个常规的通过传入函数的形式来形成的一个回调函数的例子</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayName</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`我叫<span class="subst">$&#123;name&#125;</span>啊`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用回调函数，同时将参数传入回调函数中</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">introduction</span>(<span class="params">name, age, callback</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//此时进行调用，callback称为回调函数</span></span><br><span class="line">    callback(name)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`我今年<span class="subst">$&#123;age&#125;</span>岁了`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">introduction(<span class="string">&#x27;zsh&#x27;</span>, <span class="number">18</span>, sayName)<span class="comment">//我叫zsh  我今年18岁了</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>处理键盘、鼠标事件的函数</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&#x27;button&#x27;</span>&gt;</span>button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">     <span class="built_in">document</span>.getElementById(<span class="string">&#x27;button&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> alert(<span class="string">&#x27;通过回调函数调用&#x27;</span>));</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>使用回调函数递增计算</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">item</span> =&gt;</span> item + <span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br></pre></td></tr></table></figure>



<h2 id="closure"><a href="#closure" class="headerlink" title="closure"></a>closure</h2><h1 id="DOM常用API"><a href="#DOM常用API" class="headerlink" title="DOM常用API"></a>DOM常用API</h1><h2 id="className"><a href="#className" class="headerlink" title="className"></a>className</h2><p>设定类名</p>
<h2 id="classList"><a href="#classList" class="headerlink" title="classList"></a>classList</h2><h3 id="add"><a href="#add" class="headerlink" title="add"></a>add</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> div = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">div.className = <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始状态：&lt;div class=&quot;foo&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="built_in">console</span>.log(div.outerHTML);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 classList API 添加类值</span></span><br><span class="line">div.classList.add(<span class="string">&quot;anotherclass&quot;</span>);</span><br><span class="line"><span class="comment">// 添加多个类值</span></span><br><span class="line">div.classList.add(<span class="string">&quot;bar&quot;</span>, <span class="string">&quot;baz&quot;</span>);</span><br><span class="line"><span class="comment">// 使用展开语法添加多个类值</span></span><br><span class="line"><span class="keyword">const</span> cls = [<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>];</span><br><span class="line">div.classList.add(...cls);</span><br></pre></td></tr></table></figure>

<h3 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> div = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">div.className = <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始状态：&lt;div class=&quot;foo&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="built_in">console</span>.log(div.outerHTML);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 classList API 添加类值</span></span><br><span class="line">div.classList.remove(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"><span class="comment">// 移除多个类值</span></span><br><span class="line">div.classList.remove(<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>, <span class="string">&quot;baz&quot;</span>);</span><br><span class="line"><span class="comment">// 使用展开语法移除多个类值</span></span><br><span class="line"><span class="keyword">const</span> cls = [<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>];</span><br><span class="line">div.classList.remove(...cls);</span><br></pre></td></tr></table></figure>

<h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> div = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">div.className = <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line"><span class="comment">// 如果 visible 类值已存在，则移除它，否则添加它</span></span><br><span class="line">div.classList.toggle(<span class="string">&quot;visible&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="toggle"><a href="#toggle" class="headerlink" title="toggle"></a>toggle</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> div = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">div.className = <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line"><span class="comment">// 将类值 &quot;foo&quot; 替换成 &quot;bar&quot;</span></span><br><span class="line">div.classList.replace(<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="cookie-session"><a href="#cookie-session" class="headerlink" title="cookie/session"></a>cookie/session</h2><p>浏览器的缓存机制提供了可以将用户数据<strong>存储在客户端</strong>上的方式，可以利用cookie，session等<strong>跟服务端</strong>进行<strong>数据交互</strong>。</p>
<p>cookie和session都是用来跟踪浏览器用户身份的会话方式。</p>
<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><h4 id="1、保持状态"><a href="#1、保持状态" class="headerlink" title="1、保持状态"></a>1、保持状态</h4><p>cookie保存在浏览器端，session保存在服务器端</p>
<h4 id="2、使用方式："><a href="#2、使用方式：" class="headerlink" title="2、使用方式："></a>2、使用方式：</h4><p>cookie机制：如果不在浏览器中设置过期时间，cookie被保存在内存中，生命周期随浏览器的关闭而结束，这种cookie简称会话cookie。如果在浏览器中设置了cookie的过期时间，cookie被保存在硬盘中，关闭浏览器后，cookie数据仍然存在，直到过期时间结束才消失。</p>
<p>Cookie是服务器发给客户端的特殊信息，cookie是以文本的方式保存在客户端，每次请求时都带上它</p>
<p>session机制：当服务器收到请求需要创建session对象时，首先会检查客户端请求中是否包含sessionid。如果有sessionid，服务器将根据该id返回对应session对象。如果客户端请求中没有sessionid，服务器会创建新的session对象，并把sessionid在本次响应中返回给客户端。通常使用cookie方式存储sessionid到客户端，在交互中浏览器按照规则将sessionid发送给服务器。如果用户禁用cookie，则要使用URL重写，可以通过response.encodeURL(url) 进行实现；API对encodeURL的结束为，当浏览器支持Cookie时，url不做任何处理；当浏览器不支持Cookie的时候，将会重写URL将SessionID拼接到访问地址后。</p>
<h4 id="3、存储内容："><a href="#3、存储内容：" class="headerlink" title="3、存储内容："></a>3、存储内容：</h4><p>cookie只能保存字符串类型，以文本的方式；session通过类似与Hashtable的数据结构来保存，能支持任何类型的对象(session中可含有多个对象)</p>
<h4 id="4、存储的大小："><a href="#4、存储的大小：" class="headerlink" title="4、存储的大小："></a>4、存储的大小：</h4><p>cookie：单个cookie保存的数据不能超过4kb；session大小没有限制。</p>
<h4 id="5、安全性："><a href="#5、安全性：" class="headerlink" title="5、安全性："></a>5、安全性：</h4><p>cookie：针对cookie所存在的攻击：Cookie欺骗，Cookie截获；session的安全性大于cookie。</p>
<p>原因如下：</p>
<p>（1）sessionID存储在cookie中，若要攻破session首先要攻破cookie；</p>
<p>（2）sessionID是要有人登录，或者启动session_start才会有，所以攻破cookie也不一定能得到sessionID；</p>
<p>（3）第二次启动session_start后，前一次的sessionID就是失效了，session过期后，sessionID也随之失效。</p>
<p>（4）sessionID是加密的</p>
<p>（5）综上所述，攻击者必须在短时间内攻破加密的sessionID，这很难。</p>
<h4 id="6、应用场景："><a href="#6、应用场景：" class="headerlink" title="6、应用场景："></a>6、应用场景：</h4><p>cookie：</p>
<p>（1）判断用户是否登陆过网站，以便下次登录时能够实现自动登录（或者记住密码）。如果我们删除cookie，则每次登录必须从新填写登录的相关信息。</p>
<p>（2）保存上次登录的时间等信息。</p>
<p>（3）保存上次查看的页面</p>
<p>（4）浏览计数</p>
<p><img src="https://raw.githubusercontent.com/crazyzsh/myImage/main/imageTest/202204021510199.png"></p>
<p>session：Session用于保存每个用户的专用信息，变量的值保存在服务器端，通过SessionID来区分不同的客户。</p>
<p>（1）网上商城中的购物车</p>
<p>（2）保存用户登录信息</p>
<p>（3）将某些数据放入session中，供同一用户的不同页面使用</p>
<p>（4）防止用户非法登录</p>
<h4 id="7、缺点："><a href="#7、缺点：" class="headerlink" title="7、缺点："></a>7、缺点：</h4><p>cookie：</p>
<p>（1）大小受限</p>
<p>（2）用户可以操作（禁用）cookie，使功能受限</p>
<p>（3）安全性较低</p>
<p>（4）有些状态不可能保存在客户端。</p>
<p>（5）每次访问都要传送cookie给服务器，浪费带宽。</p>
<p>（6）cookie数据有路径（path）的概念，可以限制cookie只属于某个路径下。</p>
<p> session：</p>
<p>（1）Session保存的东西越多，就越占用服务器内存，对于用户在线人数较多的网站，服务器的内存压力会比较大。</p>
<p>（2）依赖于cookie（sessionID保存在cookie），如果禁用cookie，则要使用URL重写，不安全</p>
<p>（3）创建Session变量有很大的随意性，可随时调用，不需要开发者做精确地处理，所以，过度使用session变量将会导致代码不可读而且不好维护。</p>
<h3 id="设置cookie"><a href="#设置cookie" class="headerlink" title="设置cookie"></a>设置cookie</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie = <span class="string">&quot;name=oeschger&quot;</span>;</span><br><span class="line"><span class="built_in">document</span>.cookie = <span class="string">&quot;favorite_food=tripe&quot;</span>;</span><br><span class="line">alert(<span class="built_in">document</span>.cookie);</span><br><span class="line"><span class="comment">// 显示: name=oeschger;favorite_food=tripe</span></span><br></pre></td></tr></table></figure>

<h3 id="获取cookie"><a href="#获取cookie" class="headerlink" title="获取cookie"></a>获取cookie</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie = <span class="string">&quot;test1=Hello&quot;</span>;</span><br><span class="line"><span class="built_in">document</span>.cookie = <span class="string">&quot;test2=World&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用正则表示进行获取</span></span><br><span class="line"><span class="keyword">var</span> myCookie = <span class="built_in">document</span>.cookie.replace(<span class="regexp">/(?:(?:^|.*;\s*)test2\s*\=\s*([^;]*).*$)|^.*$/</span>, <span class="string">&quot;$1&quot;</span>);</span><br><span class="line"></span><br><span class="line">alert(myCookie);<span class="comment">// 显示: World</span></span><br></pre></td></tr></table></figure>





<h2 id="WebStorage"><a href="#WebStorage" class="headerlink" title="WebStorage"></a>WebStorage</h2><h3 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h3><p>随着互联网的快速发展，基于网页的应用越来越普遍，同时也变得越来越复杂，为了满足各种各样的需求，会经常在本地存储大量的数据，HTML5规范提出了相关的解决方案。</p>
<p>本地存储特性</p>
<ul>
<li>数据存储在用户浏览器中</li>
<li>设置、读取方便，甚至页面刷新都不会丢失数据</li>
<li>容量较大，sessionStorage大约5M，localStorage约20M</li>
<li>只能存储字符串，可以将对象经过<code>JSON.stringify(obj)</code>编码后进行存储</li>
</ul>
<h3 id="使用背景"><a href="#使用背景" class="headerlink" title="使用背景"></a>使用背景</h3><p>WebStorage的目的是<strong>克服由cookie所带来的一些限制</strong>，当数据需要被严格控制在客户端时，不需要持续的将数据发回服务器。</p>
<p>WebStorage两个主要目标：</p>
<p>（1）提供一种在cookie之外存储会话数据的路径。</p>
<p>（2）提供一种存储大量可以跨会话存在的数据的机制。</p>
<p>HTML5的WebStorage提供了两种API：localStorage（本地存储）和sessionStorage（会话存储）。</p>
<h4 id="1、生命周期："><a href="#1、生命周期：" class="headerlink" title="1、生命周期："></a>1、生命周期：</h4><ul>
<li><p>localStorage:localStorage的生命周期是永久的，关闭页面或浏览器之后localStorage中的数据也不会消失。localStorage除非主动删除数据，否则数据永远不会消失。</p>
</li>
<li><p>sessionStorage的生命周期是在仅在当前会话下有效。sessionStorage引入了一个“浏览器窗口”的概念，sessionStorage是在同源的窗口中始终存在的数据。只要这个浏览器窗口没有关闭，即使刷新页面或者进入同源另一个页面，数据依然存在。同时独立的打开同一个窗口同一个页面，sessionStorage也是不一样的。</p>
</li>
</ul>
<h4 id="2、存储大小："><a href="#2、存储大小：" class="headerlink" title="2、存储大小："></a>2、存储大小：</h4><p>localStorage和sessionStorage的存储数据大小一般都是：5MB</p>
<h4 id="3、存储位置："><a href="#3、存储位置：" class="headerlink" title="3、存储位置："></a>3、存储位置：</h4><p>localStorage和sessionStorage都保存在客户端，不与服务器进行交互通信。</p>
<h4 id="4、存储内容类型："><a href="#4、存储内容类型：" class="headerlink" title="4、存储内容类型："></a>4、存储内容类型：</h4><p>localStorage和sessionStorage只能存储字符串类型，对于复杂的对象可以使用ECMAScript提供的JSON对象的stringify和parse来处理</p>
<h4 id="5、获取方式："><a href="#5、获取方式：" class="headerlink" title="5、获取方式："></a>5、获取方式：</h4><ul>
<li><p>localStorage：window.localStorage;</p>
</li>
<li><p>sessionStorage：window.sessionStorage;</p>
</li>
</ul>
<h4 id="6、应用场景：-1"><a href="#6、应用场景：-1" class="headerlink" title="6、应用场景："></a>6、应用场景：</h4><ul>
<li>localStoragese：常用于长期登录（+判断用户是否已登录），适合长期保存在本地的数据；</li>
<li>sessionStorage：敏感账号一次性登录；</li>
</ul>
<h4 id="7、WebStorage的优点："><a href="#7、WebStorage的优点：" class="headerlink" title="7、WebStorage的优点："></a>7、WebStorage的优点：</h4><p>（1）存储空间更大：cookie为4KB，而WebStorage是5MB；</p>
<p>（2）节省网络流量：WebStorage<strong>不会传送到服务器</strong>，存储在本地的数据可以直接获取，也不会像<strong>cookie</strong>一样<strong>每次请求都会传送到服务器</strong>，所以减少了客户端和服务器端的交互，<strong>节省</strong>了网络<strong>流量</strong>；</p>
<p>（3）对于那种只需要在用户浏览一组页面期间保存而关闭浏览器后就可以丢弃的数据，sessionStorage会非常方便；</p>
<p>（4）快速显示：有的数据存储在WebStorage上，再加上浏览器本身的缓存。获取数据时可以从本地获取会比从服务器端获取快得多，所以<strong>速度更快</strong>；</p>
<p>（5）安全性：WebStorage不会随着HTTP header发送到服务器端，所以安全性<strong>相对于cookie</strong>来说比<strong>较高</strong>一些，不会担心截获，但是仍然存在伪造问题；</p>
<p>（6）WebStorage提供了一些方法，数据操作比cookie方便；</p>
<ul>
<li><p> setItem (key, value) ——  保存数据，以键值对的方式储存信息。</p>
</li>
<li><p>getItem (key) ——  获取数据，将键值传入，即可获取到对应的value值。</p>
</li>
<li><p>removeItem (key) ——  删除单个数据，根据键值移除对应的信息。</p>
</li>
<li><p>clear () ——  删除所有的数据</p>
</li>
<li><p>key (index) —— 获取某个索引的key</p>
</li>
</ul>
<h3 id="localStorage常见API"><a href="#localStorage常见API" class="headerlink" title="localStorage常见API"></a>localStorage常见API</h3><ul>
<li>声明周期永久有效，除非手动删除，否则关闭页面也会存在</li>
<li>可以多窗口（页面）共享（同一浏览器可以共享）</li>
<li>以键值对的形式进行存储</li>
</ul>
<h4 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">localStorage</span>.setItem(key, value)</span><br></pre></td></tr></table></figure>

<h4 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">localStorage.getItem(key) </span><br></pre></td></tr></table></figure>

<h4 id="删除单条记录"><a href="#删除单条记录" class="headerlink" title="删除单条记录"></a>删除单条记录</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">localStorage.removeItem(key)</span><br></pre></td></tr></table></figure>

<h4 id="删除所有数据"><a href="#删除所有数据" class="headerlink" title="删除所有数据"></a>删除所有数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">localStorage.clear()</span><br></pre></td></tr></table></figure>

<h4 id="记住用户登入案例"><a href="#记住用户登入案例" class="headerlink" title="记住用户登入案例"></a>记住用户登入案例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&#x27;username&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;remember&quot;</span>&gt;</span>记住用户名</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> username = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#username&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> remember = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#remember&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;username&#x27;</span>)) &#123;</span></span><br><span class="line"><span class="javascript">            username.value = <span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;username&#x27;</span>)</span></span><br><span class="line"><span class="javascript">            remember.checked = <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        remember.addEventListener(<span class="string">&#x27;change&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (<span class="built_in">this</span>.checked) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;username&#x27;</span>, username.value)</span></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">localStorage</span>.removeItem(<span class="string">&#x27;username&#x27;</span>)</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="sessionStorage常见API"><a href="#sessionStorage常见API" class="headerlink" title="sessionStorage常见API"></a>sessionStorage常见API</h3><ul>
<li>声明周期为关闭浏览器</li>
<li>在同一窗口（页面）下数据可以共享</li>
<li>以键值对的形式进行存储</li>
</ul>
<h4 id="存储数据-1"><a href="#存储数据-1" class="headerlink" title="存储数据"></a>存储数据</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sessionStorage.setItem(key, value)</span><br></pre></td></tr></table></figure>

<h4 id="获取数据-1"><a href="#获取数据-1" class="headerlink" title="获取数据"></a>获取数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sessionStorage.getItem(key) </span><br></pre></td></tr></table></figure>

<h4 id="删除单条记录-1"><a href="#删除单条记录-1" class="headerlink" title="删除单条记录"></a>删除单条记录</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sessionStorage.removeItem(key)</span><br></pre></td></tr></table></figure>

<h4 id="删除所有数据-1"><a href="#删除所有数据-1" class="headerlink" title="删除所有数据"></a>删除所有数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sessionStorage.clear()</span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title>sufs</title>
    <url>/2022/01/06/2022/sufs/</url>
    <content><![CDATA[<h1 id="开发手册"><a href="#开发手册" class="headerlink" title="开发手册"></a>开发手册</h1><h2 id="1-优秀博客"><a href="#1-优秀博客" class="headerlink" title="1. 优秀博客"></a>1. 优秀博客</h2><table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>链接</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>cesium官方文档</td>
<td><a href="https://sandcastle.cesium.com/?src=CZML%20Custom%20Properties.html">https://sandcastle.cesium.com/?src=CZML%20Custom%20Properties.html</a></td>
</tr>
<tr>
<td>2</td>
<td>网友代码</td>
<td><a href="https://blog.csdn.net/weixin_39080216/article/details/99747748">https://blog.csdn.net/weixin_39080216/article/details/99747748</a></td>
</tr>
<tr>
<td>3</td>
<td></td>
<td></td>
</tr>
<tr>
<td>4</td>
<td></td>
<td></td>
</tr>
<tr>
<td>5</td>
<td></td>
<td></td>
</tr>
<tr>
<td>6</td>
<td></td>
<td></td>
</tr>
<tr>
<td>7</td>
<td></td>
<td></td>
</tr>
<tr>
<td>8</td>
<td></td>
<td></td>
</tr>
<tr>
<td>9</td>
<td></td>
<td></td>
</tr>
<tr>
<td>10</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="2-开发计划"><a href="#2-开发计划" class="headerlink" title="2. 开发计划"></a>2. 开发计划</h2>]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>项目</tag>
      </tags>
  </entry>
</search>
